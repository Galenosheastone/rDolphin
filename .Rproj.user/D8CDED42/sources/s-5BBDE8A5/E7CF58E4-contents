library(grid)
library(gridExtra)
library(ggplot2)
sapply(list.files('C:/Users/Usuario/Downloads/prediction_code',full.names=T),source)
sapply(list.files('C:/Users/Usuario/Documents/GitHub/rDolphin/R',full.names=T),source)
load("C:/Bruker/TopSpin3.2/data/RamirezN/data_analysis/ramirezn_data.RData")
load("C:/Bruker/TopSpin3.2/data/MNavarro_femtes_IRSI/data_analysis/resultats_paper_3.RData")
# ac_quantification=log10(ac$final_output$quantification+1)
# millorat_quantification=log10(millorat$final_output$quantification+1)
# profiling_names_corrected_quantification=log10(profiling_names_corrected$final_output$quantification+1)
# millorat_cow_5_quantification=log10(millorat_cow_5$final_output$quantification+1)
ac$final_output$fitting_error[ac$final_output$fitting_error>1]=1
millorat$final_output$fitting_error[millorat$final_output$fitting_error>1]=1
profiling_names_corrected$final_output$fitting_error[profiling_names_corrected$final_output$fitting_error>1]=1
millorat_cow_5$final_output$fitting_error[millorat_cow_5$final_output$fitting_error>1]=1

#####

predicted_shift_2=millorat$predicted_shift
predicted_width_2=millorat$predicted_width
predicted_width_2[,apply(predicted_width_2,2,function(x)length(unique(x)))==1]=NA
predicted_intensity_2=millorat$predicted_intensity

ind=c(which(ab$ROI_data[,5]==0),grep('Sum',ab$ROI_data[,3]))
median(apply(predicted_shift_2[,-ind]-millorat$min_shift[,-ind],2,median))
median(apply(predicted_shift_2[,-ind]-millorat$min_shift[,-ind],2,median)/ab$ROI_data[-ind,7])-1

median(apply(predicted_width_2[,-ind]-millorat$min_width[,-ind],2,median))
median(apply(predicted_width_2[,-ind]-millorat$min_width[,-ind],2,median)/0.25)-1

Ydatamatrix=matrix(NA,nrow(predicted_intensity_2),ncol(predicted_intensity_2))
for (i in seq(nrow(predicted_intensity_2))) {
  for (j in seq(ncol(predicted_intensity_2))) {
    Ydatamatrix[i,j]=max(ac$useful_data[[i]][[j]]$Ydata)
  }}
median(apply(predicted_intensity_2[,-ind]-millorat$min_intensity[,-ind],2,median)/apply(Ydatamatrix[,-ind],2,median),na.rm=T)-1


newpredicted_shift_2=rf_pred_2(millorat$final_output$shift)
newpredicted_width_2=rf_pred_2(millorat$final_output$half_band_width)
newpredicted_intensity_2=rf_pred_coward_2(millorat$final_output$intensity,ab$ROI_data[,4])

median(apply((newpredicted_shift_2$predicted_matrix[,-ind]-newpredicted_shift_2$lower_bound_matrix[,-ind])/
               (predicted_shift_2[,-ind]-millorat$min_shift[,-ind]) ,2,function(x)median(x,na.rm=T)),na.rm=T)-1
median(apply((newpredicted_width_2$predicted_matrix[,-ind]-newpredicted_width_2$lower_bound_matrix[,-ind])/
               (predicted_width_2[,-ind]-millorat$min_width[,-ind]) ,2,function(x)median(x,na.rm=T)),na.rm=T)-1
median(apply((newpredicted_intensity_2$predicted_matrix[,-ind]-newpredicted_intensity_2$lower_bound_matrix[,-ind])/
               (predicted_intensity_2[,-ind]-millorat$min_intensity[,-ind]) ,2,function(x)median(x,na.rm=T)),na.rm=T)-1



###

predicted_shift=millorat_cow_5$predicted_shift
predicted_width=millorat_cow_5$predicted_width
predicted_width[,apply(predicted_width,2,function(x)length(unique(x)))==1]=NA
predicted_intensity=millorat_cow_5$predicted_intensity

ind=c(which(initial_corrected$ROI_data[,5]==0),grep('Sum',initial_corrected$ROI_data[,3]))
median(apply(predicted_shift[,-ind]-millorat_cow_5$min_shift[,-ind],2,median))
median(apply(predicted_shift[,-ind]-millorat_cow_5$min_shift[,-ind],2,median)/initial_corrected$ROI_data[-ind,7])-1

median(apply(predicted_width[,-ind]-millorat_cow_5$min_width[,-ind],2,median))
median(apply(predicted_width[,-ind]-millorat_cow_5$min_width[,-ind],2,median)/0.25)-1

Ydatamatrix=matrix(NA,nrow(predicted_intensity),ncol(predicted_intensity))
for (i in seq(nrow(predicted_intensity))) {
  for (j in seq(ncol(predicted_intensity))) {
    Ydatamatrix[i,j]=max(profiling_names_corrected$useful_data[[i]][[j]]$Ydata)
  }}
median(apply(predicted_intensity[,-ind]-millorat_cow_5$min_intensity[,-ind],2,median)/apply(Ydatamatrix[,-ind],2,median),na.rm=T)-1


newpredicted_shift=rf_pred(millorat_cow_5$final_output$shift)
newpredicted_width=rf_pred(millorat_cow_5$final_output$half_band_width)
newpredicted_intensity=rf_pred_coward(millorat_cow_5$final_output$intensity,initial_corrected$ROI_data[,4])

median(apply((newpredicted_shift$predicted_matrix[,-ind]-newpredicted_shift$lower_bound_matrix[,-ind])/
               (predicted_shift[,-ind]-millorat_cow_5$min_shift[,-ind]) ,2,function(x)median(x,na.rm=T)),na.rm=T)-1
median(apply((newpredicted_width$predicted_matrix[,-ind]-newpredicted_width$lower_bound_matrix[,-ind])/
               (predicted_width[,-ind]-millorat_cow_5$min_width[,-ind]) ,2,function(x)median(x,na.rm=T)),na.rm=T)-1
median(apply((newpredicted_intensity$predicted_matrix[,-ind]-newpredicted_intensity$lower_bound_matrix[,-ind])/
               (predicted_intensity[,-ind]-millorat_cow_5$min_intensity[,-ind]) ,2,function(x)median(x,na.rm=T)),na.rm=T)-1



set.seed(1);samples2=sample(nrow(acv),0.5*nrow(acv))
i=16
lol2=profiling_names_corrected$final_output$shift[,!is.na(profiling_names_corrected$final_output$shift[1,])]
set.seed(1);model=randomForest::randomForest(x=lol2[samples2,-i],y=lol2[samples2,i],
                                             xtest=lol2[-samples2,-i],ytest=lol2[-samples2,i],
                                             keep.forest=T,replace=T,keep.inbag=T,ntree=4000)

var_hat <- randomForestCI::randomForestInfJack(model, lol2[,-i], calibrate = TRUE)
df <- data.frame(y = lol2[,i], var_hat)
df <- dplyr::mutate(df, se = sqrt(var.hat))
p1 <- ggplot(df, aes(x = y, y = y.hat)) +
  geom_errorbar(aes(ymin=y.hat-se, ymax=y.hat+se), width=.00001) +
  geom_point() +
  geom_abline(intercept=0, slope=1, linetype=2) +
  xlab("Obtained chemical shift") +
  ylab("Predicted chemical shift") +
  ggtitle("Prediction of chemical shift")
p1=p1+geom_point(x=df$y[j], y = df$y.hat[j],color='red')+
  geom_errorbar(data=df[j,,drop=F], aes(ymin=y.hat-se, ymax=y.hat+se),color='red', width=.00001)


lol2=profiling_names_corrected$final_output$half_band_width[,!is.na(profiling_names_corrected$final_output$half_band_width[1,])]
i=13
set.seed(1);model=randomForest::randomForest(x=lol2[samples2,-i],y=lol2[samples2,i],
                                             xtest=lol2[-samples2,-i],ytest=lol2[-samples2,i],
                                             keep.forest=T,replace=T,keep.inbag=T,ntree=4000)
var_hat <- randomForestCI::randomForestInfJack(model, lol2[,-i], calibrate = TRUE)
df <- data.frame(y = lol2[,i], var_hat)
df <- dplyr::mutate(df, se = sqrt(var.hat))
p2 <- ggplot(df, aes(x = y, y = y.hat)) +
  geom_errorbar(aes(ymin=y.hat-se, ymax=y.hat+se), width=.00001) +
  geom_point() +
  geom_abline(intercept=0, slope=1, linetype=2) +
  xlab("Obtained half bandwidth") +
  ylab("Predicted half bandwidth") +
  ggtitle("Prediction of half bandwidth")

p2=p2+geom_point(x=df$y[j], y = df$y.hat[j],color='red')+
  geom_errorbar(data=df[j,,drop=F], aes(ymin=y.hat-se, ymax=y.hat+se),color='red', width=.00001)

lol2=profiling_names_corrected$final_output$intensity[,c(14,16)]
i=2
set.seed(1);model=randomForest::randomForest(x=lol2[samples2,-i,drop=F],y=lol2[samples2,i],
                                             xtest=lol2[-samples2,-i,drop=F],ytest=lol2[-samples2,i],
                                             keep.forest=T,replace=T,keep.inbag=T,ntree=4000)

var_hat <- randomForestCI::randomForestInfJack(model, lol2[,-i,drop=F], calibrate = TRUE)
df <- data.frame(y = lol2[,2], var_hat)
df <- dplyr::mutate(df, se = sqrt(var.hat))
p3 <- ggplot(df, aes(x = y, y = y.hat)) +
  geom_errorbar(aes(ymin=y.hat-se, ymax=y.hat+se), width=.00001) +
  geom_point() +
  geom_abline(intercept=0, slope=1, linetype=2) +
  xlab("Obtained intensity") +
  ylab("Predicted intensity") +
  ggtitle("Prediction of intensity")

p3=p3+geom_point(x=df$y[j], y = df$y.hat[j],color='red')+
  geom_errorbar(data=df[j,,drop=F], aes(ymin=y.hat-se, ymax=y.hat+se),color='red', width=.00001)

j=16
i=order(millorat_cow_5$final_output$quantification[,j]/profiling_names_corrected$final_output$quantification[,j],decreasing=T)[1]


FeaturesMatrix=millorat_cow_5$useful_data[[i]][[j]]$FeaturesMatrix
Xdata_2=millorat_cow_5$useful_data[[i]][[j]]$Xdata
Xdata_2=seq(max(Xdata_2),min(Xdata_2),-0.00001)
program_parameters=millorat_cow_5$useful_data[[i]][[j]]$program_parameters
multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
fitted_signals=matrix(NA,11,length(Xdata_2))
fitted_signals[1,] = approx(millorat_cow_5$useful_data[[i]][[j]]$Xdata,colSums(millorat_cow_5$useful_data[[i]][[j]]$plot_data[4:6,]),Xdata_2)$y
multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
fitted_signals[2,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[2]=signals_parameters[2]+0.003
fitted_signals[3,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[2]=signals_parameters[2]-0.003
fitted_signals[4,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[2]=millorat_cow_5$max_shift[i,j]
fitted_signals[5,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[2]=millorat_cow_5$min_shift[i,j]
fitted_signals[6,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
data=data.frame(y=t(fitted_signals[-1,]),x=Xdata_2)
data=reshape2::melt(data, id.var="x")
data3=data.frame(x=Xdata_2,y=colSums(fitted_signals[1:2,]))
ab1=ggplot() +
  geom_line(aes(x, value), colour='blue',alpha=0.5, data=data[(1*nrow(data3)+1):(2*nrow(data3)),]) +
  geom_line(aes(x, value), colour='blue',alpha=0.5, data=data[(2*nrow(data3)+1):(3*nrow(data3)),]) +
  geom_line(aes(x, value), colour='red', alpha=0.5,data=data[(3*nrow(data3)+1):(4*nrow(data3)),]) +
  geom_line(aes(x, value), colour='red',alpha=0.5, data=data[(4*nrow(data3)+1):(5*nrow(data3)),]) +
  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +
  scale_x_reverse(limits=c(1.06,1.03))+scale_y_continuous(limits=c(0,3))+labs(x = "ppm",y='Intensity',title = "Chemical shift") +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
fitted_signals=matrix(NA,11,length(Xdata_2))
fitted_signals[1,] = approx(millorat_cow_5$useful_data[[i]][[j]]$Xdata,colSums(millorat_cow_5$useful_data[[i]][[j]]$plot_data[4:6,]),Xdata_2)$y
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
fitted_signals[2,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[3]=signals_parameters[3]*(1+0.25)
fitted_signals[3,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[3]=signals_parameters[3]*(1-0.25)
fitted_signals[4,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[3]=millorat_cow_5$max_width[i,j]
fitted_signals[5,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[3]=millorat_cow_5$min_width[i,j]
fitted_signals[6,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
data=data.frame(x=Xdata_2,twox=fitted_signals[4,],x2=fitted_signals[3,])
data2=data.frame(x=Xdata_2,twox=fitted_signals[6,],x2=fitted_signals[5,])
data3=data.frame(x=Xdata_2,y=colSums(fitted_signals[1:2,]))
ab2=ggplot(data, aes(x=x, y=twox)) +
  geom_ribbon(data=data,aes(ymin=twox,ymax=x2), fill="blue", alpha="0.5") +
  geom_ribbon(data=data2,aes(ymin=twox,ymax=x2), fill="red", alpha="0.5") +
  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +
  scale_x_reverse(limits=c(1.06,1.03))+scale_y_continuous(limits=c(0,3))+ labs(x = "ppm",y='Intensity',title = "Half bandwidth") +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
fitted_signals=matrix(NA,11,length(Xdata_2))
# signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
fitted_signals[1,] = approx(millorat_cow_5$useful_data[[i]][[j]]$Xdata,colSums(millorat_cow_5$useful_data[[i]][[j]]$plot_data[4:6,]),Xdata_2)$y
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
fitted_signals[2,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[1]=0
fitted_signals[3,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[1]=max(colSums(fitted_signals[1:2,]))
fitted_signals[4,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[1]=millorat_cow_5$min_intensity[i,j]
fitted_signals[5,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_5$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[1]=millorat_cow_5$max_intensity[i,j]
fitted_signals[6,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
fitted_signals[fitted_signals>3]=3
data=data.frame(x=Xdata_2,twox=fitted_signals[4,],x2=fitted_signals[3,])
data2=data.frame(x=Xdata_2,twox=fitted_signals[6,],x2=fitted_signals[5,])
data3=data.frame(x=Xdata_2,y=colSums(fitted_signals[1:2,]))

ab3=ggplot(data, aes(x=x, y=twox)) +

  geom_ribbon(data=data,aes(ymin=twox,ymax=x2), fill="blue", alpha="0.5") +
  geom_ribbon(data=data2,aes(ymin=twox,ymax=x2), fill="red", alpha="0.5") +
  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +
  scale_x_reverse(limits=c(1.06,1.03))+scale_y_continuous(limits=c(0,3))+ labs(x = "ppm",y='Intensity',title = "Intensity") +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p12 <- grid.arrange(arrangeGrob(p1 ,ab1,p2,ab2,p3 ,ab3,nrow=3))



###



pal1=pal2=pal3=matrix(1,nrow(predicted_width),ncol(predicted_width))
for (i in which(apply(predicted_shift,2,function(x)all(is.na(x)))==F))  {
  pal1[,i]=robustbase::lmrob(predicted_shift[,i]~profiling_names_corrected$final_output$shift[,i])$rweights
}
for (i in which(apply(predicted_width,2,function(x)all(is.na(x)))==F))  {
  pal2[,i]=robustbase::lmrob(predicted_width[,i]~profiling_names_corrected$final_output$half_band_width[,i])$rweights
}
for (i in which(apply(predicted_intensity,2,function(x)all(is.na(x)))==F))  {
  pal3[,i]=robustbase::lmrob(predicted_intensity[,i]~profiling_names_corrected$final_output$intensity[,i])$rweights
}
pal=pal1+pal2+pal3


    edited=profiling_names_corrected$final_output$fitting_error
for (i in which(initial_corrected$ROI_data[,5]>0))  {
  ind=pal[,i] %in% boxplot.stats(pal[,i])$out
  edited[ind,i]=NA
}

asd=order(apply(profiling_names_corrected$final_output$fitting_error[,initial_corrected$ROI_data[,5]>0],2,function(x)mean(x,na.rm=T)),na.last=NA)
asd2=order(apply(millorat_cow_5$final_output$fitting_error[,initial_corrected$ROI_data[,5]>0],2,function(x) mean(x,na.rm=T)),na.last=NA)
asd3=order(apply(edited[,initial_corrected$ROI_data[,5]>0],2,function(x) mean(x,na.rm=T)),na.last=NA)

asd=asd[asd %in% asd2]
asd=asd[asd %in% asd3]

dades=100*(apply(millorat_cow_5$final_output$fitting_error[,asd],2,mean)/
             apply(profiling_names_corrected$final_output$fitting_error[,asd],2,mean)-1)
dades2=100*(apply(edited[,asd],2,function(x)mean(x,na.rm=T))/
             apply(profiling_names_corrected$final_output$fitting_error[,asd],2,mean)-1)
data=data.frame(x=rep(seq_along(dades),2),y=c(dades2,dades),
                z=rep(c('Removal suspicious quantifications','Profiling reimplementation'),c(length(dades),length(dades2))))

ab2=ggplot(data=data,aes(x=x,y=y,fill=z)) +
  geom_boxplot()+
  scale_fill_manual(values=c("Profiling reimplementation"="red", "Removal suspicious quantifications"="blue")) +
  labs(x = "",y='% variation of mean fitting error',title = "Faecal extract dataset") +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))



#
# edited=profiling_names_corrected_quantification
# for (i in which(initial_corrected$ROI_data[,5]>0))  {
#   ind=pal[,i] %in% boxplot.stats(pal[,i])$out
#   edited[ind,i]=NA
# }


edited=profiling_names_corrected$final_output$quantification
for (i in which(initial_corrected$ROI_data[,5]>0))  {
  ind=pal[,i] %in% boxplot.stats(pal[,i])$out
  edited[ind,i]=NA
}

prova_intensity=predicted_intensity
prova_intensity[,apply(predicted_intensity,2,function(x)all(is.na(x)))]=millorat_cow_5$final_output$intensity[,apply(predicted_intensity,2,function(x)all(is.na(x)))]
prova_shift=predicted_shift
prova_shift[,apply(predicted_shift,2,function(x)all(is.na(x)))]=millorat_cow_5$final_output$shift[,apply(predicted_shift,2,function(x)all(is.na(x)))]
prova_width=predicted_width
prova_width[,apply(predicted_width,2,function(x)all(is.na(x)))]=millorat_cow_5$final_output$half_band_width[,apply(predicted_width,2,function(x)all(is.na(x)))]

tec=sapply(seq(length(prova_intensity)),function(x)sum(peakpvoigt(c(prova_intensity[x],prova_shift[x],prova_width[x]*0.5/600.2,0),initial_corrected$ppm))*initial_corrected$buck_step)
dim(tec)=dim(prova_intensity)
tec[,apply(tec,2,function(x)all(is.na(x)))]=millorat_cow_5$final_output$quantification[,apply(tec,2,function(x)all(is.na(x)))]
# tec=log10(tec+1)


# asd=order(apply(profiling_names_corrected_quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))
# asd2=order(apply(millorat_cow_5_quantification,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd=order(apply(profiling_names_corrected$final_output$quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))
asd2=order(apply(millorat_cow_5$final_output$quantification,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd3=order(apply(edited,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd4=order(apply(tec,2,function(x) mean(x,na.rm=T)),na.last=NA)

asd=asd[asd %in% asd2]
asd=asd[asd %in% asd3]
asd=asd[asd %in% asd4]

# dades=100*(apply(edited[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
#              apply(profiling_names_corrected_quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
# dades2=100*(apply(tec[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
#              apply(profiling_names_corrected_quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
# dades3=100*(apply(millorat_cow_5_quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
#              apply(profiling_names_corrected_quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)

dades=100*(apply(edited[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
             apply(profiling_names_corrected$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades2=100*(apply(tec[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(profiling_names_corrected$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades3=100*(apply(millorat_cow_5$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(profiling_names_corrected$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)


data=data.frame(x=rep(seq_along(dades),3),y=c(dades,dades2,dades3),
                z=rep(c('Removal suspicious quantifications',"Quantification edition", 'Profiling reimplementation'),c(length(dades),length(dades2),length(dades3))))

ab3=ggplot(data=data,aes(x=x,y=y,fill=z)) +
  geom_boxplot()+
  scale_fill_manual(values=c("Profiling reimplementation"="red", "Removal suspicious quantifications"="blue","Quantification edition"="green")) +

  labs(x='',y="% variation of CV",title = "Faecal extract dataset") +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


######

pal1=pal2=pal3=matrix(0,nrow(predicted_width_2),ncol(predicted_width_2))
for (i in which(apply(predicted_shift_2,2,function(x)all(is.na(x)))==F))  {
  pal1[,i]=robustbase::lmrob(predicted_shift_2[,i]~ac$final_output$shift[,i])$rweights
}
for (i in which(apply(predicted_width_2,2,function(x)all(is.na(x)))==F))  {
  pal2[,i]=robustbase::lmrob(predicted_width_2[,i]~ac$final_output$half_band_width[,i])$rweights
}
for (i in which(apply(predicted_intensity_2,2,function(x)all(is.na(x)))==F))  {
  pal3[,i]=robustbase::lmrob(predicted_intensity_2[,i]~ac$final_output$intensity[,i])$rweights
}
pal=pal1+pal2+pal3


edited_2=ac$final_output$fitting_error
for (i in which(ab$ROI_data[,5]>0))  {
  ind=pal[,i] %in% boxplot.stats(pal[,i])$out
  edited_2[ind,i]=NA
}

asd=order(apply(ac$final_output$fitting_error[,ab$ROI_data[,5]>0],2,function(x)mean(x,na.rm=T)),na.last=NA)
asd2=order(apply(millorat$final_output$fitting_error[,ab$ROI_data[,5]>0],2,function(x) mean(x,na.rm=T)),na.last=NA)
asd3=order(apply(edited_2[,ab$ROI_data[,5]>0],2,function(x) mean(x,na.rm=T)),na.last=NA)

asd=asd[asd %in% asd2]
asd=asd[asd %in% asd3]

dades=100*(apply(millorat$final_output$fitting_error[,asd],2,mean)/
             apply(ac$final_output$fitting_error[,asd],2,mean)-1)
dades2=100*(apply(edited_2[,asd],2,function(x)mean(x,na.rm=T))/
             apply(ac$final_output$fitting_error[,asd],2,mean)-1)
data=data.frame(x=rep(seq_along(dades),2),y=c(dades2,dades),
                z=rep(c('Removal suspicious quantifications','Profiling reimplementation'),c(length(dades),length(dades2))))
# data$y[data$y>50]=50
# data$y[data$y<(-50)]=-50

ab4=ggplot(data=data,aes(x=x,y=y,fill=z)) +
  geom_boxplot()+
  scale_fill_manual(values=c("Profiling reimplementation"="red", "Removal suspicious quantifications"="blue")) +

  labs(x = "",y='% variation of mean fitting error',title = "Serum dataset") +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))




# edited_2=ac_quantification
edited_2=ac$final_output$quantification

for (i in which(ab$ROI_data[,5]>0))  {
  ind=pal[,i] %in% boxplot.stats(pal[,i])$out
  edited_2[ind,i]=NA
}

prova_intensity=predicted_intensity_2
prova_intensity[,apply(predicted_intensity_2,2,function(x)all(is.na(x)))]=ac$final_output$intensity[,apply(predicted_intensity_2,2,function(x)all(is.na(x)))]
prova_shift=predicted_shift_2
prova_shift[,apply(predicted_shift_2,2,function(x)all(is.na(x)))]=ac$final_output$shift[,apply(predicted_shift_2,2,function(x)all(is.na(x)))]
prova_width=predicted_width_2
prova_width[,apply(predicted_width_2,2,function(x)all(is.na(x)))]=ac$final_output$half_band_width[,apply(predicted_width_2,2,function(x)all(is.na(x)))]

tec2=sapply(seq(length(prova_intensity)),function(x)sum(peakpvoigt(c(prova_intensity[x],prova_shift[x],prova_width[x]*0.5/600.2,0),ab$ppm))*ab$buck_step)
dim(tec2)=dim(prova_intensity)
tec2[,apply(tec2,2,function(x)all(is.na(x)))]=ac$final_output$quantification[,apply(tec2,2,function(x)all(is.na(x)))]
# tec2=log10(tec2+1)

# asd=order(apply(ac_quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))
# asd2=order(apply(millorat_quantification,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd=order(apply(ac$final_output$quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))
asd2=order(apply(millorat$final_output$quantification,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd3=order(apply(edited_2,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd4=order(apply(tec2,2,function(x) mean(x,na.rm=T)),na.last=NA)

asd=asd[asd %in% asd2]
asd=asd[asd %in% asd3]
asd=asd[asd %in% asd4]

# dades=100*(apply(edited_2[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
#              apply(ac_quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
# dades2=100*(apply(tec2[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
#               apply(ac_quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
# dades3=100*(apply(millorat_quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
#               apply(ac_quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades=100*(apply(edited_2[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
             apply(ac$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades2=100*(apply(tec2[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(ac$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades3=100*(apply(millorat$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(ac$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)

data=data.frame(x=rep(seq_along(dades),3),y=c(dades,dades2,dades3),
                z=rep(c('Removal suspicious quantifications',"Quantification edition", 'Profiling reimplementation'),c(length(dades),length(dades2),length(dades3))))

ab5=ggplot(data=data,aes(x=x,y=y,fill=z)) +
  geom_boxplot()+
  scale_fill_manual(values=c("Profiling reimplementation"="red", "Removal suspicious quantifications"="blue","Quantification edition"="green")) +

  labs(x='',y='% variation of CV',title = "Serum dataset") +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),,axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
g_legend=function(a.gplot){
  tmp = ggplot_gtable(ggplot_build(a.gplot))
  leg = which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend = tmp$grobs[[leg]]
  return(legend)}
mylegend=g_legend(ab3)


p13 <- grid.arrange(arrangeGrob(ab2+theme(legend.position = 'none'),
                                ab4+theme(legend.position = 'none'),
                                top=textGrob('Variation of mean fitting error',gp=gpar(fontsize=14,fontface='bold')),nrow=2) )
p14 <- grid.arrange(arrangeGrob(ab3+theme(legend.position = 'none'),
                                ab5+theme(legend.position = 'none'),

                                top=textGrob('Variation of CV',gp=gpar(fontsize=14,fontface='bold')),nrow=2))

p15 <- grid.arrange(arrangeGrob(p13,p14,
                                nrow=1),
                    mylegend, heights=c(10, 1))



TIC_normalization <- as.data.frame(readr::read_csv("C:/Users/Usuario/Downloads/TIC.normalization.csv"))
TIC_normalization2=t(TIC_normalization[,-c(1:6,141:165)])
colnames(TIC_normalization2)=TIC_normalization[,2]
# TIC_normalization2=log10(TIC_normalization2+1)



# ind=c(58,21,13,14,36,110,98,68,69,6,38,20,57,92,60,33,51)
# ind2=c(21,1,4,2,10,17,18,24,26,29,37,40,48,49,53,62,59)
# toc2=diag(cor(profiling_names_corrected_quantification[,ind],TIC_normalization2[,ind2] ,use='pairwise.complete.obs'))
# toc3=diag(cor(edited[,ind],TIC_normalization2[,ind2] ,use='pairwise.complete.obs'))
# toc4=diag(cor(tec[,ind],TIC_normalization2[,ind2], ,use='pairwise.complete.obs'))
# toc5=diag(cor(millorat_cow_5_quantification[,ind],TIC_normalization2[,ind2] ,use='pairwise.complete.obs'))
ind=c(58,21,13,14,36,110,98,68,69,6,38,20,57,92,60,33,51)
ind2=c(21,1,4,2,10,17,18,24,26,29,37,40,48,49,53,62,59)
toc2=diag(cor(profiling_names_corrected$final_output$quantification[,ind],TIC_normalization2[,ind2] ,method='spearman'))
toc3=diag(cor(edited[,ind],TIC_normalization2[,ind2] ,use='pairwise.complete.obs',method='spearman'))
toc4=diag(cor(tec[,ind],TIC_normalization2[,ind2],method='spearman'))
toc5=diag(cor(millorat_cow_6$final_output$quantification[,ind],TIC_normalization2[,ind2],method='spearman'))

metadata=factor(rep(c("Original","Removal suspicious quantifications","Quantification edition","Profiling reimplementation"),c(length(toc2),length(toc3),length(toc4),length(toc5))),levels =c("Original","Removal suspicious quantifications","Quantification edition","Profiling reimplementation") )
data=data.frame(shift=c(toc2,toc3,toc4,toc5),metadata=metadata)
p10 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
  geom_boxplot() +
  scale_fill_manual(values=c("Original"="yellow","Profiling reimplementation"="red", "Removal suspicious quantifications"="blue","Quantification edition"="green")) +

  labs(title='Spearman correlation between quantifications of metabolites in MS and NMR data',
       y="rho",x='') +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))

#
# toc2=sapply(seq(17),function(x)summary(robustbase::lmrob(profiling_names_corrected$final_output$quantification[,ind[x]]~TIC_normalization2[,ind2[x]]))$adj.r.squared)
# toc3=sapply(seq(17),function(x)summary(robustbase::lmrob(edited[,ind[x]]~TIC_normalization2[,ind2[x]]))$adj.r.squared)
# toc4=sapply(seq(17),function(x)summary(robustbase::lmrob(tec[,ind[x]]~TIC_normalization2[,ind2[x]]))$adj.r.squared)
# toc5=sapply(seq(17),function(x)summary(robustbase::lmrob(millorat_cow_5$final_output$quantification[,ind[x]]~TIC_normalization2[,ind2[x]]))$adj.r.squared)
# metadata=factor(rep(c("Original","Removal suspicious quantifications","Quantification edition","Profiling reimplementation"),c(length(toc2),length(toc3),length(toc4),length(toc5))),levels =c("Original","Removal suspicious quantifications","Quantification edition","Profiling reimplementation") )
# data=data.frame(shift=c(toc2,toc3,toc4,toc5),metadata=metadata)
# p11 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
#   geom_boxplot() +
#   scale_fill_manual(values=c("Original"="yellow","Profiling reimplementation"="red", "Removal suspicious quantifications"="blue","Quantification edition"="green")) +
#
#   labs(title='Adjusted R2 between quantifications of metabolites in MS and NMR data',
#        y="Adjusted R2",x='') +
#   theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
#                      panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# mylegend=g_legend(p11)
#
# p13 <- grid.arrange(arrangeGrob(p10+theme(legend.position = 'none'),
#                                 p11+theme(legend.position = 'none'),
#                                 top=textGrob('Faecal extract dataset',gp=gpar(fontsize=14,fontface='bold')),nrow=2),
#                     mylegend, heights=c(10, 1))
