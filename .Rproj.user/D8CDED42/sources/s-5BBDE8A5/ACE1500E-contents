library(grid)
library(gridExtra)
library(ggplot2)
sapply(list.files('C:/Users/Usuario/Downloads/prediction_code',full.names=T),source)
sapply(list.files('C:/Users/Usuario/Documents/GitHub/rDolphin/R',full.names=T),source)
load("C:/Bruker/TopSpin3.2/data/RamirezN/data_analysis/ramirezn_data_2.RData")
load("C:/Bruker/TopSpin3.2/data/MNavarro_femtes_IRSI/data_analysis/resultats_paper_3.RData")
# ac_quantification=log10(ac$final_output$quantification+1)
# millorat_quantification=log10(millorat$final_output$quantification+1)
# profiling_names_corrected_quantification=log10(profiling_names_corrected$final_output$quantification+1)
# millorat_cow_5_quantification=log10(millorat_cow_7$final_output$quantification+1)
ac$final_output$fitting_error[ac$final_output$fitting_error>1]=1
millorat$final_output$fitting_error[millorat$final_output$fitting_error>1]=1
profiling_names_corrected$final_output$fitting_error[profiling_names_corrected$final_output$fitting_error>1]=1
millorat_cow_7$final_output$fitting_error[millorat_cow_7$final_output$fitting_error>1]=1
profiling_names_corrected$final_output$fitting_error[profiling_names_corrected$final_output$fitting_error<(-1)]=1
millorat_cow_7$final_output$fitting_error[millorat_cow_7$final_output$fitting_error<(-1)]=1
profiling_names_corrected$final_output$fitting_error[which(profiling_names_corrected$final_output$fitting_error<0)]=abs(profiling_names_corrected$final_output$fitting_error[which(profiling_names_corrected$final_output$fitting_error<0)])
millorat_cow_7$final_output$fitting_error[which(millorat_cow_7$final_output$fitting_error<0)]=abs(millorat_cow_7$final_output$fitting_error[which(millorat_cow_7$final_output$fitting_error<0)])
ac$final_output$fitting_error[ac$final_output$fitting_error<(-1)]=1
millorat$final_output$fitting_error[millorat$final_output$fitting_error<(-1)]=1
ac$final_output$fitting_error[which(ac$final_output$fitting_error<0)]=abs(ac$final_output$fitting_error[which(ac$final_output$fitting_error<0)])
millorat$final_output$fitting_error[which(millorat$final_output$fitting_error<0)]=abs(millorat$final_output$fitting_error[which(millorat$final_output$fitting_error<0)])

#####

predicted_shift=millorat_cow_7$predicted_shift
predicted_width=millorat_cow_7$predicted_width
predicted_width[,apply(predicted_width,2,function(x)length(unique(x)))==1]=NA
predicted_intensity=millorat_cow_7$predicted_intensity

ind=c(which(initial_corrected$ROI_data[,5]==0),grep('Sum',initial_corrected$ROI_data[,3]))
dades=millorat_cow_7$max_shift[,-ind]-millorat_cow_7$min_shift[,-ind]
lol=as.vector(diff(apply(millorat_cow_7$final_output$shift[,-ind],2,function(x)quantile(x,c(0.025,0.975)))))
dades2=t(replicate(146,lol))
dades3=(millorat_cow_7$max_width[,-ind]-millorat_cow_7$min_width[,-ind])/millorat_cow_7$predicted_width[,-ind]
lol=as.vector(diff(apply(millorat_cow_7$final_output$half_band_width[,-ind],2,function(x)quantile(x,c(0.025,0.975)))))
dades4=t(replicate(146,lol))/apply(millorat_cow_7$final_output$half_band_width[,-ind],2,function(x)median(x,na.rm=T))
dades5=100*millorat_cow_7$max_intensity[,-ind]-millorat_cow_7$min_intensity[,-ind]/millorat_cow_7$predicted_intensity[,-ind]
lol=as.vector(diff(apply(millorat_cow_7$final_output$intensity[,-ind],2,function(x)quantile(x,c(0.025,0.975)))))
dades6=100*t(replicate(146,lol))/apply(millorat_cow_7$final_output$intensity[,-ind],2,function(x)median(x,na.rm=T))
sed=c(which(apply(dades,2,function(x)(all(is.na(x))))==T),which(apply(dades2,2,function(x)(all(is.na(x))))==T))
if (length(sed)>0) {
  dades=dades[,-sed]
  dades2=dades2[,-sed]
}
sed=c(which(apply(dades3,2,function(x)(all(is.na(x))))==T),which(apply(dades4,2,function(x)(all(is.na(x))))==T))
if (length(sed)>0) {
  dades3=dades3[,-sed]
  dades4=dades4[,-sed]
}
sed=c(which(apply(dades5,2,function(x)(all(is.na(x))))==T),which(apply(dades6,2,function(x)(all(is.na(x))))==T))
if (length(sed)>0) {
  dades5=dades5[,-sed]
  dades6=dades6[,-sed]
}

metadata=factor(rep(c("Original CIs","Calculated CIs"),c(length(dades2),length(dades))),levels =c("Original CIs","Calculated CIs") )
data=data.frame(shift=c(dades2,dades),metadata=metadata)
p10 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
  geom_violin()+
  scale_fill_manual(values=c("Original CIs"="yellow","Calculated CIs"="red")) +
  scale_y_continuous(limits=c(0,0.01))+
  labs(title='Chemical shift',
       y="ppm",x='') +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))

metadata=factor(rep(c("Original CIs","Calculated CIs"),c(length(dades4),length(dades3))),levels =c("Original CIs","Calculated CIs") )
data=data.frame(shift=c(dades4,dades3),metadata=metadata)
p11 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
geom_violin()+
  scale_y_continuous(limits=c(0,0.8))+
  scale_fill_manual(values=c("Original CIs"="yellow","Calculated CIs"="red")) +
  labs(title='Half bandwidth',y='% of median half bandwidth',x='') +
theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                   axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


metadata=factor(rep(c("Original CIs","Calculated CIs"),c(length(dades6),length(dades5))),levels =c("Original CIs","Calculated CIs") )
data=data.frame(shift=c(dades6,dades5),metadata=metadata)
p12 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
  geom_violin()+
  scale_fill_manual(values=c("Original CIs"="yellow","Calculated CIs"="red")) +
  scale_y_continuous(limits=c(0,300))+
  labs(title='Intensity',
       y="% of median intensity",x='') +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))



predicted_shift_2=millorat$predicted_shift
predicted_width_2=millorat$predicted_width
predicted_width_2[,apply(predicted_width_2,2,function(x)length(unique(x)))==1]=NA
predicted_intensity_2=millorat$predicted_intensity
ind=c(which(ab$ROI_data[,5]==0),grep('Sum',ab$ROI_data[,3]))
dades7=millorat$max_shift[,-ind]-millorat$min_shift[,-ind]
lol=as.vector(diff(apply(millorat$final_output$shift[,-ind],2,function(x)quantile(x,c(0.025,0.975)))))
dades8=t(replicate(146,lol))
dades9=(millorat$max_width[,-ind]-millorat$min_width[,-ind])/millorat$predicted_width[,-ind]
lol=as.vector(diff(apply(millorat$final_output$half_band_width[,-ind],2,function(x)quantile(x,c(0.025,0.975)))))
dades10=t(replicate(146,lol))/apply(millorat$final_output$half_band_width[,-ind],2,function(x)median(x,na.rm=T))
dades11=100*millorat$max_intensity[,-ind]-millorat$min_intensity[,-ind]/millorat$predicted_intensity[,-ind]
lol=as.vector(diff(apply(millorat$final_output$intensity[,-ind],2,function(x)quantile(x,c(0.025,0.975)))))
dades12=100*t(replicate(146,lol))/apply(millorat$final_output$intensity[,-ind],2,function(x)median(x,na.rm=T))
sed=c(which(apply(dades7,2,function(x)(all(is.na(x))))==T),which(apply(dades8,2,function(x)(all(is.na(x))))==T))
if (length(sed)>0) {
  dades7=dades7[,-sed]
dades8=dades8[,-sed]
}
sed=c(which(apply(dades9,2,function(x)(all(is.na(x))))==T),which(apply(dades10,2,function(x)(all(is.na(x))))==T))
if (length(sed)>0) {
  dades9=dades9[,-sed]
  dades10=dades10[,-sed]
}
sed=c(which(apply(dades11,2,function(x)(all(is.na(x))))==T),which(apply(dades12,2,function(x)(all(is.na(x))))==T))
if (length(sed)>0) {
  dades11=dades11[,-sed]
  dades12=dades12[,-sed]
}
metadata=factor(rep(c("Original CIs","Calculated CIs"),c(length(dades8),length(dades7))),levels =c("Original CIs","Calculated CIs") )
data=data.frame(shift=c(dades8,dades7),metadata=metadata)
p13 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
  geom_violin(alpha=0.5)+
  scale_fill_manual(values=c("Original CIs"="yellow","Calculated CIs"="red")) +
  scale_y_continuous(limits=c(0,0.01))+
  labs(title='Chemical shift',
       y="ppm",x='') +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))

metadata=factor(rep(c("Original CIs","Calculated CIs"),c(length(dades10),length(dades9))),levels =c("Original CIs","Calculated CIs") )
data=data.frame(shift=c(dades10,dades9),metadata=metadata)
p14 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
  geom_violin(alpha=0.5)+
  scale_y_continuous(limits=c(0,0.8))+
  scale_fill_manual(values=c("Original CIs"="yellow","Calculated CIs"="red")) +
  labs(title='Half bandwidth',y='% of median half bandwidth',x='') +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


metadata=factor(rep(c("Original CIs","Calculated CIs"),c(length(dades12),length(dades11))),levels =c("Original CIs","Calculated CIs") )
data=data.frame(shift=c(dades12,dades11),metadata=metadata)
p15 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
  geom_violin(alpha=0.5)+
  scale_fill_manual(values=c("Original CIs"="yellow","Calculated CIs"="red")) +
  scale_y_continuous(limits=c(0,300))+
  labs(title='Intensity',
       y="% of median intensity",x='') +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))

g_legend=function(a.gplot){
  tmp = ggplot_gtable(ggplot_build(a.gplot))
  leg = which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend = tmp$grobs[[leg]]
  return(legend)}
mylegend=g_legend(p10)


p16 <- grid.arrange(arrangeGrob(p10+theme(legend.position = 'none'),
                                p11+theme(legend.position = 'none'),
                                p12+theme(legend.position = 'none'),
                                top=textGrob('Faecal extract dataset',gp=gpar(fontsize=14,fontface='bold')),nrow=1) )
p17 <- grid.arrange(arrangeGrob(p13+theme(legend.position = 'none'),
                                p14+theme(legend.position = 'none'),
                                p15+theme(legend.position = 'none'),
                                top=textGrob('Serum dataset',gp=gpar(fontsize=14,fontface='bold')),nrow=1) )

p18 <- grid.arrange(arrangeGrob(p16,p17,
                                nrow=2),
                    mylegend, heights=c(10, 1))


median(dades)/median(dades2)-1
median(dades3)/median(dades4)-1
median(dades5)/median(dades6)-1
median(dades7)/median(dades8)-1
median(dades9)/median(dades10)-1
median(dades11)/median(dades12)-1

######


j=16
i=order(millorat_cow_7$final_output$quantification[,j]/profiling_names_corrected$final_output$quantification[,j],decreasing=T)[3]
df <- data.frame(y= profiling_names_corrected$final_output$shift[,j], y.hat= predicted_shift[,j],
                 min.se=millorat_cow_7$min_shift[,j],
                 max.se=millorat_cow_7$max_shift[,j])
p1 <- ggplot(df, aes(x = y, y = y.hat)) +
  geom_errorbar(aes(ymin=min.se, ymax=max.se), width=.00001) +
  geom_point() +
  geom_abline(intercept=0, slope=1, linetype=2) +
  xlab("Obtained chemical shift") +
  ylab("Predicted chemical shift") +
  ggtitle("Prediction of chemical shift")
p1=p1+geom_point(x=df$y[j], y = df$y.hat[j],color='red')+
  geom_errorbar(data=df[j,,drop=F], aes(ymin=min.se, ymax=max.se),color='red', width=.00001)

df <- data.frame(y= profiling_names_corrected$final_output$half_band_width[,j], y.hat= predicted_width[,j],
                 min.se=millorat_cow_7$min_width[,j],
                 max.se=millorat_cow_7$max_width[,j])
p2 <- ggplot(df, aes(x = y, y = y.hat)) +
  geom_errorbar(aes(ymin=min.se, ymax=max.se), width=.00001) +
  geom_point() +
  geom_abline(intercept=0, slope=1, linetype=2) +
  xlab("Obtained half bandwidth") +
  ylab("Predicted half bandwidth") +
  ggtitle("Prediction of half bandwidth")
p2=p2+geom_point(x=df$y[j], y = df$y.hat[j],color='red')+
  geom_errorbar(data=df[j,,drop=F], aes(ymin=min.se, ymax=max.se),color='red', width=.00001)

df <- data.frame(y= profiling_names_corrected$final_output$intensity[,j], y.hat= predicted_intensity[,j],
                 min.se=millorat_cow_7$min_intensity[,j],
                 max.se=millorat_cow_7$max_intensity[,j])
p3 <- ggplot(df, aes(x = y, y = y.hat)) +
  geom_errorbar(aes(ymin=min.se, ymax=max.se), width=.00001) +
  geom_point() +
  geom_abline(intercept=0, slope=1, linetype=2) +
  xlab("Obtained intensity") +
  ylab("Predicted intensity") +
  ggtitle("Prediction of intensity")

p3=p3+geom_point(x=df$y[j], y = df$y.hat[j],color='red')+
  geom_errorbar(data=df[j,,drop=F], aes(ymin=min.se, ymax=max.se),color='red', width=.00001)


FeaturesMatrix=millorat_cow_7$useful_data[[i]][[j]]$FeaturesMatrix
Xdata_2=millorat_cow_7$useful_data[[i]][[j]]$Xdata
Xdata_2=seq(max(Xdata_2),min(Xdata_2),-0.00001)
program_parameters=millorat_cow_7$useful_data[[i]][[j]]$program_parameters
multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
fitted_signals=matrix(NA,11,length(Xdata_2))
fitted_signals[1,] = approx(millorat_cow_7$useful_data[[i]][[j]]$Xdata,colSums(millorat_cow_7$useful_data[[i]][[j]]$plot_data[4:6,]),Xdata_2)$y
multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
fitted_signals[2,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[2]=signals_parameters[2]+0.003
fitted_signals[3,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[2]=signals_parameters[2]-0.003
fitted_signals[4,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[2]=millorat_cow_7$max_shift[i,j]
fitted_signals[5,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[2]=millorat_cow_7$min_shift[i,j]
fitted_signals[6,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
data=data.frame(y=t(fitted_signals[-1,]),x=Xdata_2)
data=reshape2::melt(data, id.var="x")
data3=data.frame(x=Xdata_2,y=colSums(fitted_signals[1:2,]))
ab1=ggplot() +
  geom_line(aes(x, value), colour='blue',alpha=0.5, data=data[(1*nrow(data3)+1):(2*nrow(data3)),]) +
  geom_line(aes(x, value), colour='blue',alpha=0.5, data=data[(2*nrow(data3)+1):(3*nrow(data3)),]) +
  geom_line(aes(x, value), colour='red', alpha=0.5,data=data[(3*nrow(data3)+1):(4*nrow(data3)),]) +
  geom_line(aes(x, value), colour='red',alpha=0.5, data=data[(4*nrow(data3)+1):(5*nrow(data3)),]) +
  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +
  scale_x_reverse(limits=c(1.06,1.035))+scale_y_continuous(limits=c(0,2))+labs(x = "ppm",y='Intensity',title = "Chemical shift") +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
fitted_signals=matrix(NA,11,length(Xdata_2))
fitted_signals[1,] = approx(millorat_cow_7$useful_data[[i]][[j]]$Xdata,colSums(millorat_cow_7$useful_data[[i]][[j]]$plot_data[4:6,]),Xdata_2)$y
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
fitted_signals[2,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[3]=signals_parameters[3]*(1+0.25)
fitted_signals[3,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[3]=signals_parameters[3]*(1-0.25)
fitted_signals[4,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[3]=millorat_cow_7$max_width[i,j]
fitted_signals[5,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[3]=millorat_cow_7$min_width[i,j]
fitted_signals[6,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
data=data.frame(x=Xdata_2,twox=fitted_signals[4,],x2=fitted_signals[3,])
data2=data.frame(x=Xdata_2,twox=fitted_signals[6,],x2=fitted_signals[5,])
data3=data.frame(x=Xdata_2,y=colSums(fitted_signals[1:2,]))
ab2=ggplot(data, aes(x=x, y=twox)) +
  geom_ribbon(data=data,aes(ymin=twox,ymax=x2), fill="blue", alpha="0.5") +
  geom_ribbon(data=data2,aes(ymin=twox,ymax=x2), fill="red", alpha="0.5") +
  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +
  scale_x_reverse(limits=c(1.06,1.035))+scale_y_continuous(limits=c(0,2))+ labs(x = "ppm",y='Intensity',title = "Half bandwidth") +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


multiplicities=FeaturesMatrix[1,11]
roof_effect=FeaturesMatrix[1,12]
fitted_signals=matrix(NA,11,length(Xdata_2))
# signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
fitted_signals[1,] = approx(millorat_cow_7$useful_data[[i]][[j]]$Xdata,colSums(millorat_cow_7$useful_data[[i]][[j]]$plot_data[4:6,]),Xdata_2)$y
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
fitted_signals[2,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[1]=0
fitted_signals[3,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[1]=max(colSums(fitted_signals[1:2,]))
fitted_signals[4,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[1]=millorat_cow_7$min_intensity[i,j]
fitted_signals[5,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
signals_parameters=millorat_cow_7$useful_data[[i]][[j]]$signals_parameters[8:12]
signals_parameters[1]=millorat_cow_7$max_intensity[i,j]
fitted_signals[6,] = signal_fitting(signals_parameters,
                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)
fitted_signals[fitted_signals>2]=2
data=data.frame(x=Xdata_2,twox=fitted_signals[4,],x2=fitted_signals[3,])
data2=data.frame(x=Xdata_2,twox=fitted_signals[6,],x2=fitted_signals[5,])
data3=data.frame(x=Xdata_2,y=colSums(fitted_signals[1:2,]))

ab3=ggplot(data, aes(x=x, y=twox)) +

  geom_ribbon(data=data,aes(ymin=twox,ymax=x2), fill="blue", alpha="0.5") +
  geom_ribbon(data=data2,aes(ymin=twox,ymax=x2), fill="red", alpha="0.5") +
  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +
  scale_x_reverse(limits=c(1.06,1.035))+scale_y_continuous(limits=c(0,2))+ labs(x = "ppm",y='Intensity',title = "Intensity") +
  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p12 <- grid.arrange(arrangeGrob(p1 ,ab1,p2,ab2,p3 ,ab3,nrow=3))




###



asd=order(apply(profiling_names_corrected$final_output$fitting_error[,initial_corrected$ROI_data[,5]>0],2,function(x)mean(x,na.rm=T)),na.last=NA)
dades=100*(apply(millorat_cow_7$final_output$fitting_error[,initial_corrected$ROI_data[,5]>0][,asd],2,function(x)mean(x,na.rm=T))/
             apply(profiling_names_corrected$final_output$fitting_error[,initial_corrected$ROI_data[,5]>0][,asd],2,function(x)mean(x,na.rm=T))-1)

asd=order(apply(ac$final_output$fitting_error[,ab$ROI_data[,5]>0],2,function(x)mean(x,na.rm=T)),na.last=NA)
dades2=100*(apply(millorat$final_output$fitting_error[,ab$ROI_data[,5]>0][,asd],2,function(x)mean(x,na.rm=T))/
             apply(ac$final_output$fitting_error[,ab$ROI_data[,5]>0][,asd],2,function(x)mean(x,na.rm=T))-1)


data=data.frame(x=c(seq_along(dades),seq_along(dades2)),y=c(dades,dades2),
                z=rep(c('Faecal extract dataset',"Serum dataset"),c(length(dades),length(dades2))))
ab2=ggplot(data=data,aes(x=z,y=y,fill=z)) +
  geom_boxplot()+
  scale_fill_manual(values=c("Faecal extract dataset"="red", "Serum dataset"="blue")) +
  labs(x = "",y='% variation of mean fitting error',title = "Faecal extract dataset") +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


prova_intensity=predicted_intensity
prova_intensity[,apply(predicted_intensity,2,function(x)all(is.na(x)))]=profiling_names_corrected$final_output$intensity[,apply(predicted_intensity,2,function(x)all(is.na(x)))]
prova_shift=predicted_shift
prova_shift[,apply(predicted_shift,2,function(x)all(is.na(x)))]=profiling_names_corrected$final_output$shift[,apply(predicted_shift,2,function(x)all(is.na(x)))]
prova_width=predicted_width
prova_width[,apply(predicted_width,2,function(x)all(is.na(x)))]=profiling_names_corrected$final_output$half_band_width[,apply(predicted_width,2,function(x)all(is.na(x)))]

tec=sapply(seq(length(prova_intensity)),function(x)sum(peakpvoigt(c(prova_intensity[x],prova_shift[x],prova_width[x]*0.5/600.2,0),initial_corrected$ppm))*initial_corrected$buck_step)
dim(tec)=dim(prova_intensity)
tec[,apply(tec,2,function(x)all(is.na(x)))]=profiling_names_corrected$final_output$quantification[,apply(tec,2,function(x)all(is.na(x)))]

prova_intensity=predicted_intensity_2
prova_intensity[,apply(predicted_intensity_2,2,function(x)all(is.na(x)))]=ac$final_output$intensity[,apply(predicted_intensity_2,2,function(x)all(is.na(x)))]
prova_shift=predicted_shift_2
prova_shift[,apply(predicted_shift_2,2,function(x)all(is.na(x)))]=ac$final_output$shift[,apply(predicted_shift_2,2,function(x)all(is.na(x)))]
prova_width=predicted_width_2
prova_width[,apply(predicted_width_2,2,function(x)all(is.na(x)))]=ac$final_output$half_band_width[,apply(predicted_width_2,2,function(x)all(is.na(x)))]

tec2=sapply(seq(length(prova_intensity)),function(x)sum(peakpvoigt(c(prova_intensity[x],prova_shift[x],prova_width[x]*0.5/600.2,0),ab$ppm))*ab$buck_step)
dim(tec2)=dim(prova_intensity)
tec2[,apply(tec2,2,function(x)all(is.na(x)))]=ac$final_output$quantification[,apply(tec2,2,function(x)all(is.na(x)))]

asd=order(apply(profiling_names_corrected$final_output$quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)),na.last=NA)
dades=100*(apply(tec[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(profiling_names_corrected$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades2=100*(apply(millorat_cow_7$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(profiling_names_corrected$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
asd=order(apply(ac$final_output$quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)),na.last=NA)
dades3=100*(apply(tec2[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
             apply(ac$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades4=100*(apply(millorat$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(ac$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)

data=data.frame(x=c(seq_along(dades),seq_along(dades2),seq_along(dades3),seq_along(dades4)),
                y=c(dades,dades2,dades3,dades4),
                z=rep(c("Feacal repetition", 'Faecal Profiling reimplementation',
                        "Serum repetition", 'Serum Profiling reimplementation'),
                      c(length(dades),length(dades2),length(dades3),length(dades4))))

ab3=ggplot(data=data,aes(x=z,y=y,fill=z)) +
  geom_boxplot()+
  # scale_fill_manual(values=c("Profiling reimplementation"="red", "Removal suspicious quantifications"="blue","Quantification correction"="green")) +

  labs(x='',y="% variation of CV",title = "Faecal extract dataset") +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))


######


prova_intensity=predicted_intensity_2
prova_intensity[,apply(predicted_intensity_2,2,function(x)all(is.na(x)))]=ac$final_output$intensity[,apply(predicted_intensity_2,2,function(x)all(is.na(x)))]
prova_shift=predicted_shift_2
prova_shift[,apply(predicted_shift_2,2,function(x)all(is.na(x)))]=ac$final_output$shift[,apply(predicted_shift_2,2,function(x)all(is.na(x)))]
prova_width=predicted_width_2
prova_width[,apply(predicted_width_2,2,function(x)all(is.na(x)))]=ac$final_output$half_band_width[,apply(predicted_width_2,2,function(x)all(is.na(x)))]

tec2=sapply(seq(length(prova_intensity)),function(x)sum(peakpvoigt(c(prova_intensity[x],prova_shift[x],prova_width[x]*0.5/600.2,0),ab$ppm))*ab$buck_step)
dim(tec2)=dim(prova_intensity)
tec2[,apply(tec2,2,function(x)all(is.na(x)))]=ac$final_output$quantification[,apply(tec2,2,function(x)all(is.na(x)))]
# tec2=log10(tec2+1)

# asd=order(apply(ac_quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))
# asd2=order(apply(millorat_quantification,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd=order(apply(ac$final_output$quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))
asd2=order(apply(millorat$final_output$quantification,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd3=order(apply(edited_2,2,function(x) mean(x,na.rm=T)),na.last=NA)
asd4=order(apply(tec2,2,function(x) mean(x,na.rm=T)),na.last=NA)

asd=asd[asd %in% asd2]
asd=asd[asd %in% asd3]
asd=asd[asd %in% asd4]

dades=100*(apply(edited_2[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
             apply(ac$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades2=100*(apply(tec2[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(ac$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)
dades3=100*(apply(millorat$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))/
              apply(ac$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T))-1)

data=data.frame(x=rep(seq_along(dades),3),y=c(dades2,dades3),
                z=rep(c("Quantification correction", 'Profiling reimplementation'),c(length(dades),length(dades2),length(dades3))))

ab5=ggplot(data=data,aes(x=x,y=y,fill=z)) +
  geom_boxplot()+
  scale_fill_manual(values=c("Profiling reimplementation"="red", "Removal suspicious quantifications"="blue","Quantification correction"="green")) +

  labs(x='',y='% variation of CV',title = "Serum dataset") +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     axis.text.x=element_blank(),,axis.ticks.x=element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
g_legend=function(a.gplot){
  tmp = ggplot_gtable(ggplot_build(a.gplot))
  leg = which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend = tmp$grobs[[leg]]
  return(legend)}
mylegend=g_legend(ab3)


p13 <- grid.arrange(arrangeGrob(ab2+theme(legend.position = 'none'),
                                ab4+theme(legend.position = 'none'),
                                top=textGrob('Variation of mean fitting error',gp=gpar(fontsize=14,fontface='bold')),nrow=2) )
p14 <- grid.arrange(arrangeGrob(ab3+theme(legend.position = 'none'),
                                ab5+theme(legend.position = 'none'),

                                top=textGrob('Variation of CV',gp=gpar(fontsize=14,fontface='bold')),nrow=2))

p15 <- grid.arrange(arrangeGrob(p13,p14,
                                nrow=1),
                    mylegend, heights=c(10, 1))



TIC_normalization <- as.data.frame(readr::read_csv("C:/Users/Usuario/Downloads/TIC.normalization.csv"))
TIC_normalization2=t(TIC_normalization[,-c(1:6,141:165)])
colnames(TIC_normalization2)=TIC_normalization[,2]
ind=c(58,21,13,14,36,110,98,68,69,6,38,20,57,92,60,33,51)
ind2=c(21,1,4,2,10,17,18,24,26,29,37,40,48,49,53,62,59)

tec3=profiling_names_corrected$final_output$quantification
sol=which(profiling_names_corrected$final_output$fitting_error>0.05)
tec3[sol]=tec[sol]


toc2=diag(cor(profiling_names_corrected$final_output$quantification[,ind],TIC_normalization2[,ind2] ,method='spearman'))
toc3=diag(cor(tec[,ind],TIC_normalization2[,ind2],use='pairwise.complete.obs',method='spearman'))
toc4=diag(cor(tec3[,ind],TIC_normalization2[,ind2],use='pairwise.complete.obs',method='spearman'))
toc5=diag(cor(millorat_cow_7$final_output$quantification[,ind],TIC_normalization2[,ind2],method='spearman'))
metadata=factor(rep(c("Original","Quantification correction","Selective quantification correction","Profiling reimplementation"),c(length(toc2),length(toc3),length(toc4),length(toc5))),levels =c("Original","Quantification correction","Selective quantification correction","Profiling reimplementation") )
data=data.frame(shift=c(toc2,toc3,toc4,toc5),metadata=metadata)
p10 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +
  # geom_boxplot() +
  # geom_point(aes(fill = metadata), size = 5, shape = 21, position = position_jitterdodge()) +
  geom_violin()+
  scale_fill_manual(values=c("Original"="yellow","Profiling reimplementation"="red", "Selective quantification correction"="blue","Quantification correction"="green")) +

  labs(title='Spearman correlation between quantifications of metabolites in MS and NMR data',
       y="rho",x='') +
  theme_bw() + theme(legend.title=element_blank(),legend.position="bottom",panel.border = element_blank(), panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))

