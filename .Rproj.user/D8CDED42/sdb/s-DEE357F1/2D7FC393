{
    "collab_server" : "",
    "contents" : "#' Helper function to generate ROI data. Not to be used in console.\n#'\n#' @param ROI_data ROI_data\n#' @param useful_data useful_data\n#' @param final_output final_output\n#' @return dummy\n#' @export integration_error\n\nintegration_error <- function(ROI_data,useful_data,final_output) {\nind=which(ROI_data[,3]==\"Clean Sum\"| ROI_data[,3]==\"Baseline Sum\")\nfor (ii in ind) {\n  all4=t(as.data.frame(lapply(useful_data,function(x)x[[ii]]$plot_data[1,])))\n  spectra_lag=rep(NA,dim(all4)[1])\n  for (i in 1:dim(all4)[1]) {\n    d <-\n      ccf(all4[i, ],\n          apply(all4, 2, median),\n          type = 'covariance',\n          plot = FALSE)\n    spectra_lag[i]=d$lag[which.max(d$acf)]\n  }\n  so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))\n  for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]\n\nfitted_median=apply(all4,2,median)\nsorted_bins=sort(fitted_median/sum(fitted_median),decreasing=T,index.return=T)\nif(length(sorted_bins$x)>0) {\n  bins= sorted_bins$ix[1:which.min(abs(cumsum(sorted_bins$x)-0.9))]\n} else {\n  bins=seq_along(fitted_median)\n}\n\nple=apply(all4[,bins],1,function(x)summary(lm(fitted_median[bins]~x))$sigma/max(fitted_median[bins]))\nfor (j in seq(nrow(final_output$fitting_error))) useful_data[[j]][[ii]]$results_to_save$fitting_error=ple[j]\nfinal_output$fitting_error[,ii]=ple\n}\ndummy=list(final_output=final_output,useful_data=useful_data)\n}\n",
    "created" : 1492703181184.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3186100078",
    "id" : "2D7FC393",
    "lastKnownWriteTime" : 1492703621,
    "last_content_update" : 1492703621504,
    "path" : "~/GitHub/prova/R/integration_error.R",
    "project_path" : "R/integration_error.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}