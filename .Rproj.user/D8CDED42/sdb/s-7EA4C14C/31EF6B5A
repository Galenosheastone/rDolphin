{
    "collab_server" : "",
    "contents" : "#' Helper function to edit line shape fitting\n#'\n#' @param imported_data imported data\n#' @param final_output final_output\n#' @param spectrum_index spectrum_index\n#' @param signals_introduce signals_introduce\n#' @param ROI_profile ROI_profile\n#' @return provisional_data\n#' @export signals_int\n\n\nsignals_int = function(imported_data, final_output,spectrum_index,signals_introduce,ROI_profile) {\n\n    #Preparation of necessary variables and folders to store figures and information of the fitting\n\n  ROI_buckets = which.min(abs(as.numeric(ROI_profile[1, 1])-imported_data$ppm)):which.min(abs(as.numeric(ROI_profile[1, 2])-imported_data$ppm))\n\n  Xdata= as.numeric(imported_data$ppm[ROI_buckets])\n    Ydata = as.numeric(imported_data$dataset[spectrum_index, ROI_buckets])\n    program_parameters=imported_data$program_parameters\n    program_parameters$freq = imported_data$freq\n    program_parameters$ROI_buckets = ROI_buckets\n    program_parameters$buck_step = imported_data$buck_step\n\n\n      signals_to_quantify = which(ROI_profile[, 5] >0)\n      signals_codes = replicate(length(signals_to_quantify), NA)\n      signals_names = replicate(length(signals_to_quantify), NA)\n      j = 1\n      for (i in signals_to_quantify) {\n        k = which(imported_data$signals_names == paste(ROI_profile[i,\n          4],ROI_profile[i,5],sep='_'))\n\n        signals_codes[j] = imported_data$signals_codes[k]\n        signals_names[j] = as.character(imported_data$signals_names[k])\n        j = j + 1\n      }\n\n      # program_parameters$clean_fit = clean_fit\nexperiment_name = imported_data$Experiments[[spectrum_index]]\n\n\nfitting_type=ROI_profile[1,3]\n      #Fitting of the signals\n      multiplicities=signals_introduce[,6]\n      roof_effect=signals_introduce[,7]\n      signals_parameters=as.vector(t(signals_introduce[,1:5]))\n      Xdata_2=imported_data$ppm\n      Ydata_2 = as.numeric(imported_data$dataset[spectrum_index, ])\n\n      program_parameters$freq=imported_data$freq\n      fitted_signals = signal_fitting(signals_parameters,\n                                         Xdata_2,multiplicities,roof_effect,Ydata,program_parameters$freq)\n\n      dim(signals_parameters) = c(5, length(signals_parameters)/5)\n      rownames(signals_parameters) = c(\n        'intensity',\n        'shift',\n        'half_band_width',\n        'gaussian',\n        'J_coupling'\n         )\n\n      program_parameters$signals_to_quantify=signals_to_quantify\n\n      #Generation of output data about the fitting and of the necessary variables for the generation ofa figure\n      dummy = output_generator(\n        signals_to_quantify,\n        fitted_signals,\n        Ydata_2,\n        Xdata_2,\n        signals_parameters,multiplicities\n      )\n      output_data=dummy$output_data\n      error1=dummy$error1\n      output_data$intensity=signals_parameters[1, signals_to_quantify]\n      output_data$half_band_width=signals_parameters[3, signals_to_quantify]\n\n      #Generation of the dataframe with the final output variables\n      results_to_save = data.frame(\n        shift = output_data$shift,\n        quantification = output_data$quantification,\n        signal_area_ratio = output_data$signal_area_ratio,\n        fitting_error = output_data$fitting_error,\n        intensity = output_data$intensity,\n        half_band_width = output_data$half_band_width\n      )\n\n      #Adaptation of the quantification to de-scaled Ydata\n\n      #Generation of the figure when the conditions specified in the Parameters file are accomplished\n      plot_data = rbind(\n        output_data$signals_sum,\n        output_data$baseline_sum,\n        output_data$fitted_sum,\n        output_data$signals\n      )\n      rownames(plot_data) = c(\"signals_sum\",\n        \"baseline_sum\",\n        \"fitted_sum\",\n        as.character(paste(ROI_profile[,4],ROI_profile[,5],sep='_')),rep('additional signal',dim(plot_data)[1]-length(ROI_profile[,4])-3))\n\n      plotdata2 = data.frame(Xdata=Xdata_2,\n        Ydata=Ydata_2,\n        plot_data[3, ],\n        plot_data[2, ] )\n      plotdata3 <- melt(plotdata2, id = \"Xdata\")\n      plotdata3$variable = c(\n        rep('Original Spectrum', length(Ydata_2)),\n        rep('Generated Spectrum', length(Ydata_2)),\n        rep('Generated Background', length(Ydata_2))\n      )\n      # plotdata4 = data.frame(Xdata=Xdata_2, (t(plot_data[-c(1, 2, 3), , drop = F]) ))\n      # plotdata5 = melt(plotdata4, id = \"Xdata\")\n\n      colors=c('red','blue','black','brown','cyan','green','yellow')\n      # plotdata = data.frame(Xdata=Xdata_2, signals = plot_data[1, ] )\n      p=plot_ly(plotdata3,x=~Xdata,y=~value,color=~variable,type='scatter',mode='lines',fill=NULL) %>% layout(xaxis = list(range=c(Xdata[1],Xdata[length(Xdata)]),title = 'ppm'), yaxis = list(range=c(0,max(Ydata)),title = 'Intensity'))\n      for (i in 4:nrow(plot_data)) {\n        plotdata5 =  data.frame(Xdata=Xdata_2, variable=rownames(plot_data)[i] ,value=plot_data[i,])\n\n        p=p %>%add_trace(data=plotdata5,x=~Xdata,y=~value,name=~variable,type='scatter',mode='lines',fill='tozeroy',fillcolor=colors[i-3])\n      }\n\n\n    # final_output = save_output(\n    #   spectrum_index,\n    #   signals_codes,\n    #   results_to_save,\n    #   imported_data$buck_step,\n    #   final_output)\n      signals_parameters=rbind(signals_parameters,multiplicities,roof_effect)\n      if (fitting_type == \"Clean Fitting\") {\n        colnames(signals_parameters)=paste(ROI_profile[,4],ROI_profile[,5],sep='_')\n      } else {\n        colnames(signals_parameters)=c(paste(ROI_profile[,4],ROI_profile[,5],sep='_'),paste('baseline_signal',seq(ncol(signals_parameters)-nrow(ROI_profile)),sep='_'))\n      }  \n      provisional_data=list()\n    provisional_data$signals_parameters=signals_parameters\n    provisional_data$program_parameters=program_parameters\n    provisional_data$p=p\n    # provisional_data$p2=p2\n    provisional_data$Xdata=Xdata\n    provisional_data$Ydata=Ydata\n    # provisional_data$final_output=final_output\n    provisional_data$results_to_save=results_to_save\n    provisional_data$error1=error1\n    # provisional_data$FeaturesMatrix=FeaturesMatrix\n    # provisional_data$fitted_signals=fitted_signals[,ROI_buckets]\n\n    provisional_data$spectrum_index=spectrum_index\n    provisional_data$signals_codes=signals_codes\n    provisional_data$signals_names=signals_names\n\n    provisional_data$fitting_type=fitting_type\n    provisional_data$ROI_profile=ROI_profile\n    provisional_data$final_output=final_output\n    provisional_data$plot_data=plot_data[,ROI_buckets]\n\n\n  return(provisional_data)\n}\n",
    "created" : 1492704346743.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1737145129",
    "id" : "31EF6B5A",
    "lastKnownWriteTime" : 1492687213,
    "last_content_update" : 1492687213,
    "path" : "~/GitHub/prova/R/signals_int.R",
    "project_path" : "R/signals_int.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}