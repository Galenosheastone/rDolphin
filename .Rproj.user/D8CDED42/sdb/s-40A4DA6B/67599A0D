{
    "collab_server" : "",
    "contents" : "\nintegration = function(clean_fit, Xdata, Ydata,interface='F') {\n\n  #preallocation of results_to_save\n  results_to_save = list(\n    shift = NA,\n    quantification = NA,\n    signal_area_ratio = NA,\n    fitting_error = NA,\n    intensity = NA,\n    half_band_width = NA\n  )\n\n  baseline = rep(0,length(Xdata))\n  #preparation of baseline, if specified by the user\n  if (clean_fit == 'N') baseline = seq(min(Ydata[1:5]), min(Ydata[(length(Xdata) - 4):length(Xdata)]), len =length(Xdata))\nbaseline[which((baseline-Ydata)>0)]=Ydata[which((baseline-Ydata)>0)]\n  #integration ad chechk that there are no negative values\n  integrated_signal = Ydata - baseline\n    integrated_signal[integrated_signal<0]=0\n  #preparation of results_to_save\n  results_to_save$quantification = sum(integrated_signal)\n  results_to_save$intensity = max(integrated_signal)\n\n  cumulative_area = cumsum(integrated_signal) / sum(integrated_signal)\n\n  if (all(is.na(cumulative_area))) {\n    p1=1\n    p2=length(cumulative_area)\n  } else {\n\t  p1 = max(1,which(cumulative_area< 0.05)[length(which(cumulative_area< 0.05))])\n\t  p2 = min(which(cumulative_area > 0.95)[1],length(cumulative_area))\n  }\n\n  results_to_save$signal_area_ratio = tryCatch((sum(integrated_signal[p1:p2]) / sum(Ydata[p1:p2])) *\n    100,error = function(e) NaN, silent=T)\n\n  # d=ccf(Ydata,Ydatamedian,type = 'covariance',plot = FALSE)\n  # so=(1+max(abs(d$lag[which.max(d$acf)]))):(length(Ydata)-max(abs(d$lag[which.max(d$acf)])))\n  # results_to_save$fitting_error=summary(lm(Ydatamedian[so]~Ydata [so]))$sigma/max(Ydatamedian[so])\n  results_to_save$half_band_width = NaN\n#\n#   peaks = peakdet(integrated_signal, 0.2*max(0.000001,max(integrated_signal)))\n#   results_to_save$shift = mean(Xdata[peaks$maxtab$pos])\n  wer=which.min(abs(cumulative_area-0.5))\n  if (cumulative_area[wer]>0.5) {\n    wer=c(max(1,wer-1),wer)\n  } else {\n    wer=c(wer,min(wer+1,length(Xdata)))\n  }\n  wer2=(0.5-cumulative_area[wer[1]])/diff(cumulative_area[wer])\n  if (wer[1]==wer[2]) wer2=0\n  results_to_save$shift = Xdata[wer[1]]-wer2*diff(Xdata[wer])\n\np=''\nif (interface=='T') {\nplotdata = data.frame(Xdata, signal = integrated_signal)\n  plotdata2 = data.frame(Xdata, Ydata)\n  plotdata3 <- melt(plotdata2, id = \"Xdata\")\n  plotdata3$variable = rep('Original Spectrum', length(Ydata))\n  plotdata4 = data.frame(Xdata, integrated_signal)\n  plotdata5 = melt(plotdata4, id = \"Xdata\")\n  p=plot_ly(plotdata,x = ~Xdata, y = ~signal, type = 'scatter', color= 'Signal',mode = 'lines', fill = 'tozeroy') %>% add_trace(data=plotdata3,x=~Xdata,y=~value,color=~variable,type='scatter',mode='lines',fill=NULL) %>%\n    layout(xaxis = list(range=c(Xdata[1],Xdata[length(Xdata)]),title = 'ppm'),\n      yaxis = list(range=c(0,max(Ydata)),title = 'Intensity'))\n  }\n  plot_data=rbind(integrated_signal,baseline,integrated_signal+baseline,integrated_signal)\n\n  integration_variables=list(results_to_save=results_to_save,p=p,plot_data=plot_data)\n  return(integration_variables)\n}\n",
    "created" : 1493568112308.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3839436521",
    "id" : "67599A0D",
    "lastKnownWriteTime" : 1493618460,
    "last_content_update" : 1493618460802,
    "path" : "~/GitHub/rDolphin/R/integration.R",
    "project_path" : "R/integration.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}