{
    "collab_server" : "",
    "contents" : "#' Import of variables stored in the parameters file and of the dataset to quantify\n#'\n#' @param path Path where plots are stored inside a created 'plots' folder\n#' @param final_output List with quantifications and indicators of quality of quantification.\n#' @param imported_data List with typical elements necessary to perform quantification of ROIs.\n#' @param useful_data List with necessary information to load quantifications on the Shiny GUI.\n#' @return Plots in pdf files\n#' @export write_plots\n#' @import gridExtra\n#' @import grid\n#' @import ggplot2\n#'\n#' @examples\n#' setwd(paste(system.file(package = \"rDolphin\"),\"extdata\",sep='/'))\n#' load(\"MTBLS242_subset_example.RData\")\n#' #Not run:\n#' #write_plots('quantification_plots',quantification_variables$final_output,imported_data,quantification_variables$useful_data)\n\n\nwrite_plots = function(path,final_output,imported_data,useful_data) {\n  path=file.path(path,'plots')\n  dir.create(path)\n  ind3=which(apply(final_output$shift,2, function(x) all(is.na(x)))==F)\n  print('Be patient. This could take a while. Take another cup of coffee, meanwhile')\n  p <- vector(mode = \"list\", length = nrow(imported_data$dataset))\n  pb   <- txtProgressBar(1, max(ind3), style=3)\n\n  for (ind2 in ind3) {\n    for (ind in 1:nrow(imported_data$dataset)) {\n      Xdata=try(useful_data[[ind]][[ind2]]$Xdata,silent=T)\n      Ydata=useful_data[[ind]][[ind2]]$Ydata\n      plot_data=useful_data[[ind]][[ind2]]$plot_data\n      ROI_profile=useful_data[[ind]][[ind2]]$ROI_profile\n      plotdata2 = data.frame(Xdata=Xdata,\n        Ydata=Ydata,\n        plot_data[3, ] ,\n        plot_data[2, ])\n      colnames(plotdata2)=c('Xdata','Ydata',\"fitted_sum\",\"baseline_sum\")\n\n      plotdata3 <- melt(plotdata2, id = \"Xdata\")\n      plotdata3$variable = c(\n        rep('Original Spectrum', length(Ydata)),\n        rep('Generated Spectrum', length(Ydata)),\n        rep('Generated Background', length(Ydata))\n      )\n      plotdata4 = data.frame(Xdata, (t(plot_data[-c(1, 2, 3), , drop = F])))\n\n      colnames(plotdata4)=c('Xdata',rownames(plot_data)[-c(1, 2, 3)])\n      plotdata5 = melt(plotdata4, id = \"Xdata\")\n      r=which(paste(ROI_profile[,4],ROI_profile[,5],sep='_')==imported_data$signals_names[ind2])\n      if (length(r)==0) next\n      plotdata = data.frame(Xdata, signals = plot_data[3 + r, ] )\n\n\n\n      p[[ind]]=ggplot() +\n        geom_line(data = plotdata3,\n          aes(\n            x = Xdata,\n            y = value,\n            colour = variable,\n            group = variable\n          )) +\n        geom_line(data = plotdata5,\n          aes(\n            x = Xdata,\n            y = value,\n            colour = 'Surrounding signals',\n            group = variable\n          )) +\n        geom_area(\n          data = plotdata,\n          aes(\n            x = Xdata,\n            y = signals,\n            fill = 'Quantified Signal'\n          )\n        ) + theme(legend.position = \"none\", text = element_text(size=5)) + ggtitle(paste(imported_data$Experiments[ind],\" - fitting error \",round(final_output$fitting_error[ind,ind2],3),\" - signal/area ratio \",round(final_output$signal_area_ratio[ind,ind2],3),sep=''))+\n        scale_x_reverse() + labs(x='ppm',y='Intensity')\n    }\n    gridExtra::grid.arrange(grid::rectGrob(), grid::rectGrob())\n    ml <- gridExtra::marrangeGrob(p, top = imported_data$signals_names[ind2],nrow=3, ncol=1)\n    ggplot2::ggsave(file.path(path,paste(imported_data$signals_names[ind2],\".pdf\",sep='')),  ml)\n    setTxtProgressBar(pb, ind2)\n\n  }\n  print(\"Done!\")\n\n}\n",
    "created" : 1494011798207.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2023885803",
    "id" : "2457FDB5",
    "lastKnownWriteTime" : 1494065149,
    "last_content_update" : 1494065149,
    "path" : "~/GitHub/rDolphin/R/write_plots.R",
    "project_path" : "R/write_plots.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}