{
    "collab_server" : "",
    "contents" : "#' Load quantification\n#'\n#' @param useful_data List with necessary information to load quantifications on the Shiny GUI.\n#' @param imported_data List with typical elements necessary to perform quantification of ROIs.\n#' @param final_output List with quantifications and indicators of quality of quantification.\n#' @param info List with 'row' and 'column' indicating spectrum and signal to load.\n#' @param ROI_data ROIs data\n#'\n#' @return Loaded plot, signals parameters and quality of fitting parameters of quantifications\n#' @export load_quantification\n#' @import reshape2\n#' @import plotly\n#'\n#' @examples\n#' setwd(paste(system.file(package = \"rDolphin\"),\"extdata\",sep='/'))\n#' imported_data=import_data(\"Parameters_MTBLS242_15spectra_5groups.csv\")\n#' resulting_data=not_automatic_quant(imported_data,imported_data$final_output,c(1,4),imported_data$ROI_data[1:2,],imported_data$useful_data)\n#' loaded_quantification=load_quantification(resulting_data$useful_data,imported_data,resulting_data$final_output,list(row=1,col=1),imported_data$ROI_data)\n\n\n\nload_quantification=function(useful_data,imported_data,final_output,info,ROI_data) {\n  loaded_quantification=list()\nrow=info$row\ncol=info$col\nXdata=useful_data[[row]][[col]]$Xdata\nYdata=useful_data[[row]][[col]]$Ydata\nplot_data=useful_data[[row]][[col]]$plot_data\nROI_profile=useful_data[[row]][[col]]$ROI_profile\n\nrownames(plot_data) = c(\"signals_sum\",\n                        \"baseline_sum\",\n                        \"fitted_sum\",\n                        as.character(paste(ROI_profile[,4],ROI_profile[,5],sep='_')),rep('additional signal',dim(plot_data)[1]-length(ROI_profile[,4])-3))\n\nplotdata2 = data.frame(Xdata,\n                       Ydata,\n                       plot_data[3, ],\n                       plot_data[2, ] )\nplotdata3 <- reshape2::melt(plotdata2, id = \"Xdata\")\nplotdata3$variable = c(\n  rep('Original Spectrum', length(Ydata)),\n  rep('Generated Spectrum', length(Ydata)),\n  rep('Generated Background', length(Ydata))\n)\nplot_title = paste(imported_data$Experiments[row],\"- ROI \",ROI_profile[1,1],\"-\",ROI_profile[1,2],\"ppm\")\ncolors=c(I('red'),I('blue'),I('black'),I('brown'),I('cyan'),I('green'),I('yellow'))\nloaded_quantification$plot=plot_ly(plotdata3,x=~Xdata,y=~value,color=~variable,type='scatter',mode='lines',fill=NULL) %>% layout(title = plot_title,xaxis = list(range=c(Xdata[1],Xdata[length(Xdata)]),title = 'ppm'), yaxis = list(range=c(0,max(Ydata)),title = 'Intensity'))\nfor (i in 4:nrow(plot_data)) {\n  plotdata5 =  data.frame(Xdata=Xdata, variable=rownames(plot_data)[i] ,value=plot_data[i,])\n\n  loaded_quantification$plot=loaded_quantification$plot%>%add_trace(data=plotdata5,x=~Xdata,y=~value,name=~variable,type='scatter',mode='lines',fill='tozeroy',fillcolor=colors[i-3])\n}\n#Preparation of ROI parameters and of indicators of quality of quantification\nloaded_quantification$ROIpar=ROI_profile\nloaded_quantification$signpar=matrix(NA,2,7)\ncolnames(loaded_quantification$signpar)=c(\"intensity\",\t\"shift\",\t\"half bandwidth\",\t\"gaussian\",\t\"J_coupling\",\t\"multiplicities\",\t\"roof_effect\")\n\nif (!is.null(useful_data[[row]][[col]]$signals_parameters)) {\n  loaded_quantification$signpar=t(useful_data[[row]][[col]]$signals_parameters)\n  if (is.null(rownames(loaded_quantification$signpar))) {\n  if (ROI_profile[1,3]==\"Baseline Fitting\") {\n    rownames(loaded_quantification$signpar)=c(as.character(paste(ROI_profile[,4],ROI_profile[,5],sep='_')),rep('baseline signal',nrow(loaded_quantification$signpar)-nrow(ROI_profile)))\n  } else {\n    rownames(loaded_quantification$signpar)=as.character(paste(ROI_profile[,4],ROI_profile[,5],sep='_'))\n}}}\n\n\ndummy = which(is.na(ROI_data[, 1]))\n    if (length(dummy)==0) dummy=dim(ROI_data)[1]+1\n    lal=which(duplicated(ROI_data[-dummy,1:2])==F)\n    ROI_separator = cbind(lal, c(lal[-1] - 1, dim(ROI_data[-dummy,])[1]))\n\n\tind=which(ROI_separator[,2]-col>=0)[1]\n\tloaded_quantification$ind=(ROI_separator[ind, 1]:ROI_separator[ind, 2])\n\n\tloaded_quantification$qualitypar=cbind(t(final_output$quantification[row,ind,drop=F]),t(final_output$fitting_error[row,ind,drop=F]),t(final_output$signal_area_ratio[row,ind,drop=F]))\n\tcolnames(loaded_quantification$qualitypar)=c('Quantification','fitting_error','signal/total spectrum ratio')\n\trownames(loaded_quantification$qualitypar)=imported_data$signals_names[col]\nreturn(loaded_quantification)\n}\n",
    "created" : 1495994171760.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2516300859",
    "id" : "8B323D7D",
    "lastKnownWriteTime" : 1501845457,
    "last_content_update" : 1501845457,
    "path" : "~/GitHub/rDolphin/R/load_quantification.R",
    "project_path" : "R/load_quantification.R",
    "properties" : {
    },
    "relative_order" : 19,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}