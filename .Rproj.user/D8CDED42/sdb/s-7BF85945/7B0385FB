{
    "collab_server" : "",
    "contents" : "\n\nsignal_fitting = function(parS, Xdata,multiplicities,roof_effect,freq) {\n\n  i = as.numeric(parS[seq(1, length(parS) - 4, 5)])\n  p = as.numeric(parS[seq(2, length(parS) - 3, 5)])\n  w = as.numeric(parS[seq(3, length(parS) - 2, 5)])*0.5/freq\n  g = as.numeric(parS[seq(4, length(parS) - 1, 5)])\n  j = as.numeric(parS[seq(5, length(parS) - 0, 5)])/freq\n  signals_parameters=rbind(i,p,w,g,j)\n  fitted_signals = matrix(0, dim(signals_parameters)[2], length(Xdata))\n\n  # multiplicities = as.numeric(parS[seq(6, length(parS) - 1, 7)])\n  # roof_effect = as.numeric(parS[seq(7, length(parS) - 0, 7)])\n  NumSignals = length(parS) / 5\n\n\n  for (s in seq_along(multiplicities)) {\n    if (roof_effect[s] > 0) {\n      if (multiplicities[s] == 1)   {\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s],\n            signals_parameters[2, s],\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        )\n      } else if (multiplicities[s] == 2) {\n        fitted_signals[s, ] = peakpvoigt(c(\n          signals_parameters[1, s]/(1 - roof_effect[s]),\n          (signals_parameters[2, s] - signals_parameters[5, s]/2),\n          signals_parameters[3, s],\n          signals_parameters[4, s]\n        ),\n          Xdata) + peakpvoigt(\n            c(\n              signals_parameters[1, s],\n              (signals_parameters[2, s] + signals_parameters[5, s]/2),\n              signals_parameters[3, s],\n              signals_parameters[4, s]\n            ),\n            Xdata\n          )\n      } else if (multiplicities[s] == 3) {\n        y=1/(2 + roof_effect[s])\n        x= 1-y\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s] *x,\n            (signals_parameters[2, s] - signals_parameters[5, s]),\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        ) + peakpvoigt(\n          c(\n            signals_parameters[1, s],\n            signals_parameters[2, s],\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        ) + peakpvoigt(\n          c(\n            signals_parameters[1, s] *y,\n            (signals_parameters[2, s] + signals_parameters[5, s]),\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        )\n      } else if (multiplicities[s] == 4) {\n        #     fitted_signals[s, ] = peakpvoigt(\n        #       c(\n        #         signals_parameters[1, s] / 3,\n        #         (signals_parameters[2, s] - 3 * signals_parameters[5, s]),\n        #         signals_parameters[3, s],\n        #         signals_parameters[4, s]\n        #       ),\n        #       Xdata\n        #     ) + peakpvoigt(c(\n        #       signals_parameters[1, s],\n        #       (signals_parameters[2, s] - signals_parameters[5, s]),\n        #       signals_parameters[3, s],\n        #       signals_parameters[4, s]\n        #     ),\n        #     Xdata) + peakpvoigt(c(\n        #       signals_parameters[1, s],\n        #       (signals_parameters[2, s] + signals_parameters[5, s]),\n        #       signals_parameters[3, s],\n        #       signals_parameters[4, s]\n        #     ),\n        #     Xdata) + peakpvoigt(\n        #       c(\n        #         signals_parameters[1, s] / 3,\n        #         (signals_parameters[2, s] + 3 * signals_parameters[5, s]),\n        #         signals_parameters[3, s],\n        #         signals_parameters[4, s]\n        #       ),\n        #       Xdata\n        #     )\n      }\n    } else if (roof_effect[s] == 0) {\n      if (multiplicities[s] == 0) {\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s],\n            signals_parameters[2, s],\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        )\n      } else if (multiplicities[s] == 1) {\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s],\n            signals_parameters[2, s],\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        )\n      } else if (multiplicities[s] == 2) {\n        fitted_signals[s, ] = peakpvoigt(c(\n          signals_parameters[1, s],\n          (signals_parameters[2, s] - signals_parameters[5, s]/2),\n          signals_parameters[3, s],\n          signals_parameters[4, s]\n        ),\n          Xdata) + peakpvoigt(c(\n            signals_parameters[1, s],\n            (signals_parameters[2, s] + signals_parameters[5, s]/2),\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n            Xdata)\n      } else if (multiplicities[s] == 3) {\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s] / 2,\n            (signals_parameters[2, s] - signals_parameters[5, s]),\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        ) + peakpvoigt(\n          c(\n            signals_parameters[1, s],\n            signals_parameters[2, s],\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        ) + peakpvoigt(\n          c(\n            signals_parameters[1, s] / 2,\n            (signals_parameters[2, s] + signals_parameters[5, s]),\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        )\n      } else if (multiplicities[s] == 4) {\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s] / 3,\n            (signals_parameters[2, s] - 3 * signals_parameters[5, s]/2),\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        ) + peakpvoigt(c(\n          signals_parameters[1, s] ,\n          (signals_parameters[2, s] - signals_parameters[5, s]/2) ,\n          signals_parameters[3, s],\n          signals_parameters[4, s]\n        ),\n        Xdata) + peakpvoigt(c(\n          signals_parameters[1, s],\n          (signals_parameters[2, s] + signals_parameters[5, s]/2),\n          signals_parameters[3, s],\n          signals_parameters[4, s]\n        ),\n        Xdata) + peakpvoigt(\n          c(\n            signals_parameters[1, s] / 3,\n            (signals_parameters[2, s] + 3 * signals_parameters[5, s]/2) ,\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        )\n      }\n    } else if (roof_effect[s] < 0) {\n      if (multiplicities[s] == 1) {\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s],\n            signals_parameters[2, s],\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        )\n      } else if (multiplicities[s] == 2) {\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s],\n            (signals_parameters[2, s] - signals_parameters[5, s]/2),\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        ) + peakpvoigt(c(\n          signals_parameters[1, s] *\n            (1 - roof_effect[s]) ,\n          (signals_parameters[2, s] + signals_parameters[5, s]/2),\n          signals_parameters[3, s],\n          signals_parameters[4, s]\n        ),\n          Xdata)\n      } else if (multiplicities[s] == 3) {\n        y=1/(2 + roof_effect[s])\n        x= 1-y\n        fitted_signals[s, ] = peakpvoigt(\n          c(\n            signals_parameters[1, s]*x,\n            (signals_parameters[2, s] - signals_parameters[5, s]),\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        ) + peakpvoigt(\n          c(\n            signals_parameters[1, s],\n            signals_parameters[2, s],\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        ) + peakpvoigt(\n          c(\n            signals_parameters[1, s]*y,\n            (signals_parameters[2, s] + signals_parameters[5, s]) ,\n            signals_parameters[3, s],\n            signals_parameters[4, s]\n          ),\n          Xdata\n        )\n      } else if (multiplicities[s] == 4) {\n        # fitted_signals[s, ] = peakpvoigt(\n        #   c(\n        #     signals_parameters[1, s] / 3 ,\n        #     (signals_parameters[2, s] - 3 * signals_parameters[5, s]),\n        #     signals_parameters[3, s],\n        #     signals_parameters[4, s]\n        #   ),\n        #   Xdata\n        # ) + peakpvoigt(c(\n        #   signals_parameters[1, s],\n        #   (signals_parameters[2, s] - signals_parameters[5, s]),\n        #   signals_parameters[3, s],\n        #   signals_parameters[4, s]\n        # ),\n        # Xdata) + peakpvoigt(c(\n        #   signals_parameters[1, s],\n        #   (signals_parameters[2, s] + signals_parameters[5, s]),\n        #   signals_parameters[3, s],\n        #   signals_parameters[4, s]\n        # ),\n        # Xdata) + peakpvoigt(\n        #   c(\n        #     signals_parameters[1, s] / 3,\n        #     (signals_parameters[2, s] + 3 * signals_parameters[5, s]),\n        #     signals_parameters[3, s],\n        #     signals_parameters[4, s]\n        #   ),\n        #   Xdata\n        # )\n      }\n    }\n  }\n\n\n  return(fitted_signals)\n\n\n}\n",
    "created" : 1493450676586.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "295706663",
    "id" : "7B0385FB",
    "lastKnownWriteTime" : 1493450708,
    "last_content_update" : 1493450708006,
    "path" : "~/GitHub/rDolphin/R/signal_fitting.R",
    "project_path" : "R/signal_fitting.R",
    "properties" : {
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}