{
    "collab_server" : "",
    "contents" : "fittingloop_bg = function(FeaturesMatrix, Xdata, Ydata, program_parameters) {\n\n  residFun <-\n    function(par, observed, xx,multiplicities,roof_effect,freq)\n      observed - colSums(signal_fitting(par, xx,multiplicities,roof_effect,observed,freq))\n\n  # Loop to control if additional signals are incorporated, until a maximum of iterations specified bt fitting_maxiterrep.\n  # If at the last fitting the improvement was lesser than 25% respective to the previous fitting,\n  # iterrep becomes equal to fitting_maxiterrep and the loop is stooped\n  lb = as.vector(t(FeaturesMatrix[, seq(1, 9, 2), drop = F]))\n  ub = as.vector(t(FeaturesMatrix[, seq(2, 10, 2), drop = F]))\n  multiplicities=FeaturesMatrix[,11]\n  roof_effect=FeaturesMatrix[,12]\n\n  s0 = lb + (ub - lb) * runif(length(ub))\n\n  nls.out <-\n    nls.lm(\n      par = s0,\n      fn = residFun,\n      observed = Ydata,\n      xx = Xdata,\n      multiplicities=multiplicities,\n      roof_effect=roof_effect,\n      lower = lb,\n      upper = ub,\n      freq=program_parameters$freq,\n      control = nls.lm.control(\n        factor = program_parameters$factor,\n        maxiter = program_parameters$nls_lm_maxiter,\n        ftol = program_parameters$ftol,\n        ptol = program_parameters$ptol\n      )\n    )\n  dummy=list(BG_intensities = coef(nls.out)[which(seq(length(coef(nls.out)))%%5==1)],baseline=Ydata-nls.out$fvec)\n  return(dummy)\n}\n",
    "created" : 1493373462192.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3242930714",
    "id" : "6E940F02",
    "lastKnownWriteTime" : 1493364110,
    "last_content_update" : 1493364110,
    "path" : "~/GitHub/rDolphin/R/fittingloop_bg.R",
    "project_path" : "R/fittingloop_bg.R",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}