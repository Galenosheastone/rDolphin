{
    "collab_server" : "",
    "contents" : "#' Univariate analysis\n#'\n#' @param dataset dataset of bins or quantifications.\n#' @param metadata Metadata to be used during the univariate analysis.\n#'\n#' @return p values from dataset of bins or quantificaitons\n#' @export p_values\n#'\n#' @examples\n#' setwd(paste(system.file(package = \"rDolphin\"),\"extdata\",sep='/'))\n#' imported_data=import_data(\"Parameters_MTBLS242_15spectra_5groups.csv\")\n#' pval=p_values(imported_data$dataset,imported_data$Metadata)\n\n\np_values=function(dataset,metadata) {\n  # print ('Preparing an univariate analysis.')\n\n\ntypes=unique(unlist(metadata[,-1]))[which(unique(unlist(metadata[,-1]))>=0)]\nif (length(types)==1) {\np_value_final  =rep(1,ncol(dataset))\nnames(p_value_final)=colnames(dataset)\n  return(p_value_final)\n  }\n\ntypes2=abs(unique(unlist(metadata[,-1]))[which(unique(unlist(metadata[,-1]))<0)])\ndatasetlist=list()\npaireddata=F\nif (identical(types,types2)) {\n  # print ('Analysis of differences')\n\n\nfor (i in seq_along(types)) {\nind1=which(metadata[,-1] ==types[i])%%nrow(metadata)\nind2=which(metadata[,-1] ==-types[i])%%nrow(metadata)\nind1[ind1==0]=ind2[ind2==0]=nrow(metadata)\ndatasetlist[[i]]=dataset[ind2,,drop=F]-dataset[ind1,,drop=F]\n# if (all(metadata[ind1,1]==metadata[ind2,1])==F)   paireddata=F\npaireddata=F\n\n}\n} else {\n  # print ('Analysis of groups')\n  paireddata=T\n  lal=metadata[which(metadata[,-1] ==types[1])%%nrow(metadata),1]\n  for (i in 1:length(types)) {\n  ind1=which(metadata[,-1] ==types[i])%%nrow(metadata)\n  ind1[ind1==0]=nrow(metadata)\n  if (!identical(metadata[ind1,1],lal)) paireddata=F\n  datasetlist[[i]]=dataset[ind1,,drop=F]\n  lal=metadata[ind1,1]\n  }\n}\nif (paireddata==F) {\n  # print('Unpaired data')\n} else {\n  # print('Paired data')\n}\n\nif (length(datasetlist)==2) {\ntt=matrix(NA,length(datasetlist),dim(dataset)[2])\nfor (ind in 1:length(datasetlist)) {\n  for (k in 1:dim(dataset)[2]) {\n    tt[ind,k]=tryCatch(shapiro.test(datasetlist[[ind]][,k])$p.value,error=function(e) NA)\n  }\n\n}\np_value=rep(NA,dim(dataset)[2])\nfor (k in 1:dim(dataset)[2]) {\n  # if (!any(is.na(dataset[,k]))) {\n  if (!any(tt[,k]<0.05,na.rm=T)) {\n\n    p_value[k]=tryCatch(wilcox.test(datasetlist[[1]][,k],datasetlist[[2]][,k],paired=paireddata)$p.value,error=function(e) NA)\n  } else {\n    p_value[k]=tryCatch(t.test(datasetlist[[1]][,k],datasetlist[[2]][,k],paired=paireddata,var.equal=F)$p.value,error=function(e) NA)\n  }\n\n  # }\n}\n\n} else {\n\n  # datasetlist=array(unlist(datasetlist), dim = c(nrow(datasetlist[[1]]), ncol(datasetlist[[1]]), length(datasetlist)))\n  # tt=rep(NA,dim(dataset)[2])\n  #   for (k in 1:dim(dataset)[2]) {\n  #     fa=tryCatch(bartlett.test(as.data.frame(datasetlist[,k,]))$p.value,error=function(e) NA)\n  #     fa2=tryCatch(fligner.test(as.data.frame(datasetlist[,k,]))$p.value,error=function(e) NA)\n  #     tt[k]=suppressWarnings(min(c(fa,fa2),na.rm=T))\n  #   }\n  tt=rep(NA,dim(dataset)[2])\n  for (k in 1:dim(dataset)[2]) {\n    # fa=tryCatch(bartlett.test(as.data.frame(datasetlist[,k,]))$p.value,error=function(e) NA)\n\n    tt[k]=tryCatch(fligner.test(dataset[,k],metadata[,2])$p.value,error=function(e) 0)\n    #     tt[k]=suppressWarnings(min(c(fa,fa2),na.rm=T))\n  }\n  tt[is.na(tt)]=0\n  p_value=rep(NA,dim(dataset)[2])\n  for (k in 1:dim(dataset)[2]) {\n    # if (!any(is.na(dataset[,k]))) {\n    if (tt[k]<0.05) {\n\n      # if (paireddata==T) {\n      #   p_value[k]=withCallingHandlers({ friedman.test(datasetlist[,k,])$p.value}, warning = function(w) {})\n      # } else {\n      # p_value[k]=withCallingHandlers({ kruskal.test(as.data.frame(datasetlist[,k,]))$p.value}, warning = function(w) {})\n      p_value[k]=tryCatch(kruskal.test(dataset[,k] ~ metadata[,2])$p.value,error=function(e) NA)\n      # }\n    } else {\n      if (paireddata==T) {\n        # no=stack(as.data.frame(datasetlist[,k,]))\n        # no$subject = rep(rownames(as.data.frame(datasetlist[,k,])), length(types))\n        # p_value[k]=tryCatch(summary(aov(values ~ ind + Error(subject/ind), data=no))[[2]][[1]][1,5],error=function(e) NA)\n        p_value[k]=tryCatch(summary(aov(dataset[,k] ~ metadata[,2]+ Error(metadata[,1]/metadata[,2])))[[3]][[1]]$`Pr(>F)`[1],error=function(e) NA)\n\n\n      } else {\n        p_value[k]=tryCatch(summary(aov(dataset[,k] ~ metadata[,2]))[[1]]$`Pr(>F)`[1],error=function(e) NA)\n      # no=data.frame(y=as.vector(as.matrix(datasetlist[,k,])),group=sort(rep(1:dim(datasetlist)[3],dim(datasetlist)[1])))\n      # p_value[k]=tryCatch(anova(lm(y ~ group,no))[1,5],error=function(e) NA)\n\n        }\n    }\n\n    # }\n  }\n\n}\np_value_final=rep(1,length(p_value))\np_value_final[which(!is.na(p_value))]=round(t(as.matrix(p.adjust(p_value[which(!is.na(p_value))],method=\"none\"))),3)\nnames(p_value_final)=colnames(dataset)\n# print ('Done!')\n\nreturn(p_value_final)\n\n}\n",
    "created" : 1493370398001.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2142960677",
    "id" : "AF4EE44F",
    "lastKnownWriteTime" : 1493370436,
    "last_content_update" : 1493370436654,
    "path" : "~/GitHub/rDolphin/R/p_values.R",
    "project_path" : "R/p_values.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}