{
    "collab_server" : "",
    "contents" : "server = function(input, output,session) {\n\n  #Increase of maximum memory size that can be uploaded\n  options(shiny.maxRequestSize=1000*1024^2)\n  options(warn =-1)\n   session$onSessionEnded(stopApp)\n\n  #Setting of reactive parameters in the Shiny GUI\n  reactiveROItestingdata <- reactiveValues(signpar = matrix(NA,2,7,dimnames = list(seq(2),c(\"intensity\",\t\"chemical shift\",\t\"half bandwidth\",\t\"gaussian %\",\t\"J coupling\",\t\"multiplicities\",\t\"roof effect\"))),qualitypar = matrix(NA,2,3,dimnames=list(seq(2),c('Quantification','fitting_error','signal/total area ratio'))))\n  reactivequantdata <- reactiveValues(method1=NA)\n reactiveprogramdata <- reactiveValues(ROIdata_subset=NA,ind=NA,beginning=FALSE,dataset=NA,final_output=list(),useful_data=list(),imported_data=NA,p_value_final=NA,ROI_data=NA,ROI_data_check=NA,info=c(),select_options=NA,new_roi_profile=NA,p=NA,bgColScales=NA,autorun_plot=NA,ROI_names=NA,clusterplot=NA,medianplot=NA,jres_plot=NA)\nreac=reactiveValues(cho=NA)\n  ## FIRST TAB REACTIVE OUTPUTS\n observe({\n   dummy=ifelse(reactiveprogramdata$beginning ==F,0,1)\n\n      toggle(condition = dummy, selector = \"#mynavlist li a[data-value=tab2]\")\n      toggle(condition = dummy, selector = \"#mynavlist li a[data-value=tab3]\")\n      toggle(condition = dummy, selector = \"#mynavlist li a[data-value=tab4]\")\n      # toggle(condition = dummy, selector = \"#mynavlist li a[data-value=tab5]\")\n      toggle(condition = dummy, selector = \"#mynavlist li a[data-value=tab6]\")\n })\n\n\n  #Read of input provided by user\n  observeEvent(input$file1, {\n    reactiveprogramdata$inFile <- input$file1\n    if (is.null(reactiveprogramdata$inFile)) {\n      return(NULL)\n    }\n\n\n\ttryCatch({\n\treactiveprogramdata$imported_data = tryCatch({suppressWarnings(import_data(reactiveprogramdata$inFile$datapath))}, error = function(e) {\n\t  print('Import of data not posible with current input')\n\t  return(NULL)\n\t})\n\treset(\"file1\")\n\n  reactiveprogramdata$final_output=reactiveprogramdata$imported_data$final_output\n\treactiveprogramdata$useful_data=reactiveprogramdata$imported_data$useful_data\n\treactiveprogramdata$ROI_data=reactiveprogramdata$ROI_data_check=reactiveprogramdata$imported_data$ROI_data\n\treactiveprogramdata$list=seq(nrow(reactiveprogramdata$ROI_data))\n\treactiveprogramdata$imported_data$final_output=reactiveprogramdata$imported_data$useful_data=reactiveprogramdata$imported_data$ROI_data=NULL\n\tcolnames(reactiveprogramdata$ROI_data)=c(\"ROI left edge\",\"ROI right edge\",\"Quantification Mode\",\"Metabolite\",\"Quantification Signal\",\"Chemical shift\",\"Chemical shift tolerance\",\"Half bandwidth\",\"Multiplicity\",\"J coupling\",\"Roof effect\")\n\treactiveprogramdata$validation_data=list(alarmmatrix=reactiveprogramdata$final_output)\n\treactiveprogramdata$validation_data=validation(reactiveprogramdata$final_output,reactiveprogramdata$validation_data$alarmmatrix,1)\n\tdummy=tryCatch({profile_model_spectrum(reactiveprogramdata$imported_data,reactiveprogramdata$ROI_data)}, error = function(e) {\n\tprint('Automatic quantification of model spectrum not possible.')\n\t})\n\treactiveprogramdata$autorun_plot=dummy$p\n\treactiveprogramdata$total_signals_parameters=dummy$total_signals_parameters\n\t# dummy$indicators=dummy2$indicators\n\n\tprint('Generating additional information...')\n\n\t#plots of representative spectra and median spectra per group to help setting the right ROI parameters\n\n    reactiveprogramdata$clusterplot=tryCatch({clustspectraplot(reactiveprogramdata$imported_data)  }, error = function(e) {\n\tprint('Generation of subsets or representative spectra not possible.')\n\t})\n    reactiveprogramdata$medianplot=tryCatch({medianplot(reactiveprogramdata$imported_data)\n\t  }, error = function(e) {\n\tprint('Generation of median spectra not possible.')\n\t})\n\n    #Subsetting of ROIs is prepared\n    #Names of ROIS and cluster and median spectra are prepared\n\tdummy=NULL\n\tdummy=tryCatch({roifunc(reactiveprogramdata$ROI_data,reactiveprogramdata$imported_data$Metadata,reactiveprogramdata$imported_data$Experiments)\n  }, error = function(e) {\n\tprint('Generation of Regions of Interest not possible. Please explain the issue in the Github page.')\n\treturn(NULL)\n\t})\n\tif (!is.null(dummy)) {\n\treactiveprogramdata$select_options=dummy$select_options\n\treactiveprogramdata$spectra=dummy$spectra\n\treactiveprogramdata$beginning =TRUE\n\n\treactiveprogramdata$jres_plot=tryCatch(twod_data(reactiveprogramdata$imported_data$jres_path), error = function(e) NA)\n\n\t# if (dummy$beginning==TRUE) {\n\t  # plo=names(sapply(dummy, names))\n\t  # for (i in 1:length(plo)) reactiveprogramdata[[plo[i]]]=dummy[[plo[i]]]\n\n\t #Variables that can change during the use of the GUI are separated from 'imported_data'.\n\toutput$moreControls <- renderUI({\n\t  if (reactiveprogramdata$beginning==T) selectInput(\"select\",label=NULL,choices = reactiveprogramdata$select_options,selected = 1)\n\t})\n\tshinyjs::show('autorun')\n\tshinyjs::show('alignment')\n\tshinyjs::show('model_spectrum')\n\t#When the session is prepared, the tabs and some inputs become active\n\tprint('Done!')\n\n\n\t}}, error = function(e) {\n\t  print('Error. Please explain the issue in the Github page.')\n\t  reactiveprogramdata$imported_data=NA\n\t  return(reactiveprogramdata$imported_data)\n\t})\n\n\t})\n\n\n\n  #Loading of previous session\n\n    #Read of input provided by user\n  observeEvent(input$file2, {\n    reactiveprogramdata$inFile2 <- input$file2\n    if (is.null(reactiveprogramdata$inFile2))\n      return(NULL)\n    print(\"Uploading saved session.\")\n    #Session is loaded in 'savedreactiveddata' variable and passed to 'reactiveprogramdata'.\n    tryCatch({\n\n      load(reactiveprogramdata$inFile2$datapath)\n      plo=names(sapply(savedreactivedata, names))\n      for (i in 1:length(plo)) reactiveprogramdata[[plo[i]]]=savedreactivedata[[plo[i]]]\n      p=plot_ly(x=reactiveprogramdata$imported_data$ppm,y=reactiveprogramdata$dataset)\n      reactiveprogramdata$plot$dependencies=reactiveprogramdata$autorun_plot$dependencies=reactiveprogramdata$clusterplot$dependencies=reactiveprogramdata$medianplot$dependencies=p$dependencies\n      reactiveprogramdata$validation_data=validation(reactiveprogramdata$final_output,reactiveprogramdata$validation_data$alarmmatrix,1)\n\n      rm(savedreactivedata)\nreset(\"file2\")\n}, error = function(e) {\n      print('Not possible to load the session. Please revise your choice.')\n      return(NULL)\n    })\n    colnames(reactiveprogramdata$ROI_data)=c(\"ROI left edge\",\"ROI right edge\",\"Quantification Mode\",\"Metabolite\",\"Quantification Signal\",\"Chemical shift\",\"Chemical shift tolerance\",\"Half bandwidth\",\"Multiplicity\",\"J coupling\",\"Roof effect\")\nif (is.null(reactiveprogramdata$validation_data)) reactiveprogramdata$validation_data=validation(reactiveprogramdata$final_output,reactiveprogramdata$validation_data$alarmmatrix,input$select_validation)\n\n    reactiveprogramdata$ROI_data_check=reactiveprogramdata$ROI_data\n    reactiveprogramdata$list=seq(nrow(reactiveprogramdata$ROI_data))\n\n    #Names of ROIS are prepared\n# \tdummy=tryCatch({roifunc(reactiveprogramdata$ROI_data,reactiveprogramdata$imported_data$Metadata,reactiveprogramdata$imported_data$Experiments)\n#   }, error = function(e) {\n# \tprint('Generation of Regions of Interest not possible. Please explain the issue in the Github page.')\n# \treturn(dummy=NULL)\n# \t})\n    dummy=NULL\n\tdummy=roifunc(reactiveprogramdata$ROI_data,reactiveprogramdata$imported_data$Metadata,reactiveprogramdata$imported_data$Experiments)\n\n\tif (!is.null(dummy)) {\n\treactiveprogramdata$select_options=dummy$select_options\n\treactiveprogramdata$spectra=dummy$spectra\n\tshinyjs::show('autorun')\n\tshinyjs::show('alignment')\n\tshinyjs::show('model_spectrum')\n\n\treactiveprogramdata$beginning =TRUE\n\toutput$moreControls <- renderUI({\n\t  if (reactiveprogramdata$beginning==T)  {\n\t    print(\"Done!\")\n\t    selectInput(\"select\",label=NULL,choices = reactiveprogramdata$select_options,selected = 1)\n\t  }\n\t})\n\n\t}\n  })\n\n\n\n\n  #Choice and storage of data associated to session\n  observeEvent(input$save, {\n    tryCatch({\n      print('Saving information...')\n    savedreactivedata=isolate(reactiveValuesToList(reactiveprogramdata))\n    save(savedreactivedata, file=paste(input$caption,\".RData\",sep=''))\n      write_info(input$caption, reactiveprogramdata$final_output, reactiveprogramdata$ROI_data)\n      print('Done!')\n    },error=function(e) {print('Not possible to generate the output the session files. Please revise the path given.')})\n  })\n\nobserveEvent(input$folder, {\n  tryCatch({\n    write_plots(input$caption,reactiveprogramdata$final_output,reactiveprogramdata$imported_data,reactiveprogramdata$useful_data)},\n    error= function(e) {       print('Not possible to generate the plot folder. Please check that you have permissions for the path specified.')\n\n})})\n\n\n\n    output$sp = DT::renderDataTable(\n    reactiveprogramdata$total_signals_parameters , selection = list(selected = NULL),server = TRUE)\n\n\n   #Automatic quantification of all ROIs in all spectra\n  observeEvent(input$autorun, {\n    tryCatch({\n    quantification_variables = autorun(reactiveprogramdata$imported_data, reactiveprogramdata$final_output,reactiveprogramdata$useful_data,reactiveprogramdata$ROI_data)\n    reactiveprogramdata$final_output=quantification_variables$final_output\n    reactiveprogramdata$useful_data=quantification_variables$useful_data\n    reactiveprogramdata$validation_data=validation(reactiveprogramdata$final_output,reactiveprogramdata$validation_data$alarmmatrix,input$select_validation)\n\n    },\n    error = function(e) {\n      print('Error. Please explain the issue in the Github page if necessary.')\n      quantification_variables=NA\n      return(quantification_variables)\n    })\n  })\n  #Alignment of signals\n  tryCatch({observeEvent(input$alignment, {\n    reactiveprogramdata$imported_data$dataset= alignment(reactiveprogramdata$imported_data$dataset,reactiveprogramdata$imported_data$buck_step)\n      reactiveprogramdata$clusterplot=clustspectraplot(reactiveprogramdata$imported_data)\n      reactiveprogramdata$medianplot=medianplot(reactiveprogramdata$imported_data)\n      }\t)}, error = function(e) {\n\tprint('Error during alignment. Please explain the issue in the Github page if necessary.')\n\treturn(NULL)\n\n  })\n   #Automatic quantification of all ROIs in all spectra\n  observeEvent(input$model_spectrum, {\n    tryCatch({\n    dummy=profile_model_spectrum(reactiveprogramdata$imported_data,reactiveprogramdata$ROI_data)\n    reactiveprogramdata$autorun_plot=dummy$p\n    reactiveprogramdata$total_signals_parameters=dummy$total_signals_parameters\n    }, error = function(e) {\n      print('Automatic quantification of model spectrum not possible.')\n    })\n  })\n\n  #Peak analysis. UNSTABLE!!!\n  # observeEvent(input$peak_analysis, {\n  #   if (is.null(reactiveprogramdata$alignment_check)) {\n  #     print('Before analysing peaks, I have to align them. Then I\\'ll analyze them')\n  #     dummy=alignment(reactiveprogramdata$imported_data$dataset,reactiveprogramdata$imported_data$buck_step)\n  #     peak_analysis(dummy,reactiveprogramdata$imported_data$ppm,reactiveprogramdata$imported_data$freq,reactiveprogramdata$imported_data$export_path,reactiveprogramdata$imported_data$Metadata,reactiveprogramdata$imported_data$repository,reactiveprogramdata$originaldataset)\n  #   } else {\n  #     peak_analysis(reactiveprogramdata$imported_data$dataset,reactiveprogramdata$imported_data$ppm,reactiveprogramdata$imported_data$freq,reactiveprogramdata$imported_data$export_path,reactiveprogramdata$imported_data$Metadata,reactiveprogramdata$imported_data$repository,reactiveprogramdata$originaldataset)\n  #   }\n  # })\n\n  #Plot where quantification of model spectrum amnd p values for every bucket are stored\n  output$autorun_plot <- renderPlotly({\n    if (reactiveprogramdata$beginning==FALSE) return()\n    reactiveprogramdata$autorun_plot\n  })\n\n\n\n  ## SECOND TAB REACTIVE OUTPUTS\n\n  #Selection of ROI\n\n\n  # ROI parameters are loaded when a ROI is selected\n  observeEvent(input$select, {\n    if (reactiveprogramdata$beginning==FALSE) return()\n\t#Splitting of ROI data into individual ROIs to be quantified\n    tryCatch({\n      reac$cho=NA\n    dummy = which(is.na(reactiveprogramdata$ROI_data[, 1]))\n    if (length(dummy)==0) dummy=dim(reactiveprogramdata$ROI_data)[1]+1\n    lal=which(duplicated(reactiveprogramdata$ROI_data[-dummy,1:2])==FALSE)\n    ROI_separator = cbind(lal, c(lal[-1] - 1, dim(reactiveprogramdata$ROI_data[-dummy,])[1]))\n      reactiveprogramdata$ROIdata_subset=reactiveprogramdata$ROI_data[ROI_separator[as.numeric(input$select), 1]:ROI_separator[as.numeric(input$select), 2],]\n    reactiveROItestingdata$signpar <- rbind(rep(NA,7),rep(NA,7))\n    colnames(reactiveROItestingdata$signpar)=c(\"intensity\",\t\"chemical shift\",\t\"half bandwidth\",\t\"gaussian %\",\t\"J coupling\",\t\"multiplicities\",\t\"roof effect\")\n    reactiveROItestingdata$qualitypar <- rbind(rep(NA,3),rep(NA,3))\n    rownames(reactiveROItestingdata$qualitypar)=NULL\n    colnames(reactiveROItestingdata$qualitypar)=c('Quantification','fitting_error','signal/total area ratio')\n\n    # Plot is prepared\n    ROI_limits=c(reactiveprogramdata$imported_data$ppm[which.min(abs(reactiveprogramdata$imported_data$ppm-reactiveprogramdata$ROIdata_subset[1,1]))],reactiveprogramdata$imported_data$ppm[which.min(abs(reactiveprogramdata$imported_data$ppm-reactiveprogramdata$ROIdata_subset[1,2]))])\n    ind=ifelse(is.null(input$x1_rows_selected),1,input$x1_rows_selected)\n    dummy=type_plot(reactiveprogramdata$imported_data,ROI_limits,ind,reactiveprogramdata$medianplot,reactiveprogramdata$clusterplot)\n    if (!is.null(dummy)) reactiveprogramdata$plot=dummy\n    }, error = function(e) {\n      print('Error. Please explain the issue on Github website.')\n      return()\n    })\n\t#Setting of reactivity to edition of parameters prepared. Probably improvable, but it is a delicate matter. Now that I can debug it easily, it can be 'cleaned' in the future.\n    reactiveprogramdata$info=c()\n\n\n\t#Analysis of ROI edition. If edition is not correct (for example, there are characters in a numeric input), the edition is rejected and shown with red colour. If correct, the change is accepted with green colour.\n\t#TODO: it seems sometiems the edition fails if the change was too quick. Revise possible ways to control it.\n    output$ROIdata <-   DT::renderDataTable(  reactiveprogramdata$ROIdata_subset, selection = 'none', rownames = FALSE)\n\n    proxy_ROIdata = dataTableProxy('ROIdata')\n\n    observeEvent(input$ROIdata_cell_edit, {\n      info2 = input$ROIdata_cell_edit\n      i2 = info2$row\n      j2 = info2$col + 1\n      v2 = info2$value\n      if (!is.na(reac$cho)) {\n        reactiveprogramdata$ROIdata_subset[i2, j2] <<- DT:::coerceValue(v2, reactiveprogramdata$ROIdata_subset[i2, j2])\n      replaceData(proxy_ROIdata, reactiveprogramdata$ROIdata_subset, resetPaging = FALSE, rownames = FALSE)\n      }\n      reac$cho=1\n      })\n  })\n\n  #Selection of spectra, or of cluster or median plots\n  observeEvent(input$x1_rows_selected, {\n    if (reactiveprogramdata$beginning==FALSE) return()\n    tryCatch({\n      reset(\"fit_selection_cell_clicked\")\n\n    if (reactiveprogramdata$beginning ==TRUE) {\n\tdummy = which(is.na(reactiveprogramdata$ROI_data[, 1]))\n    if (length(dummy)==0) dummy=dim(reactiveprogramdata$ROI_data)[1]+1\n    lal=which(duplicated(reactiveprogramdata$ROI_data[-dummy,1:2])==FALSE)\n    ROI_separator = cbind(lal, c(lal[-1] - 1, dim(reactiveprogramdata$ROI_data[-dummy,])[1]))\n\n      if (input$select==\"\") {\n       print(\"Please load the session again and wait until all the loading process is finished\")\n        return()\n        }\n\n  reactiveprogramdata$ROIdata_subset=reactiveprogramdata$ROI_data[ROI_separator[as.numeric(input$select), 1]:ROI_separator[as.numeric(input$select), 2],]\n    }\n\t#Reset of parameters\n    reactiveprogramdata$stop=reactiveprogramdata$stop2=0\n\n    reactiveprogramdata$info=c()\n    reactiveROItestingdata$signpar <- rbind(rep(NA,7),rep(NA,7))\n    colnames(reactiveROItestingdata$signpar)=c(\"intensity\",\t\"shift\",\t\"half_band_width\",\t\"gaussian\",\t\"J_coupling\",\t\"multiplicities\",\t\"roof_effect\")\n    reactiveROItestingdata$qualitypar <- rbind(rep(NA,3),rep(NA,3))\n    rownames(reactiveROItestingdata$qualitypar)=NULL\n\n    colnames(reactiveROItestingdata$qualitypar)=c('Quantification','fitting_error','signal/total area ratio')\n    ROI_limits=c(reactiveprogramdata$imported_data$ppm[which.min(abs(reactiveprogramdata$imported_data$ppm-reactiveprogramdata$ROIdata_subset[1,1]))],reactiveprogramdata$imported_data$ppm[which.min(abs(reactiveprogramdata$imported_data$ppm-reactiveprogramdata$ROIdata_subset[1,2]))])\n\n\t#Generation of plot\n    dummy=type_plot(reactiveprogramdata$imported_data,ROI_limits,input$x1_rows_selected,reactiveprogramdata$medianplot,reactiveprogramdata$clusterplot)\n    if (!is.null(dummy)) reactiveprogramdata$plot=dummy\n    },error=function(e) {\n      print(\"Problem. Please explain the issue in the Github page\")\n    })\n\n     })\n\n  #Individual quantification\n  observeEvent(input$action, {\n    tryCatch({\n\t#Only when there is a spectrum selected and with number >2 (to avoid cluster and median plot) the quantifications is performed, with prior adaptation to row of dataset\n    if(length(reactiveprogramdata$info)==0) reactiveprogramdata$ind=input$x1_rows_selected-2\n    if (length(reactiveprogramdata$ind)!=1|reactiveprogramdata$ind<1) {\n      print('Select one valid spectrum')\n      return(NULL)\n    }\n\n\t#The automatic quantification\n    reactivequantdata$method1 <- tryCatch({not_automatic_quant(reactiveprogramdata$imported_data, reactiveprogramdata$final_output, reactiveprogramdata$ind,reactiveprogramdata$ROIdata_subset,reactiveprogramdata$useful_data,interface=TRUE)}, warning = function(w) {},error=function(e) {\n      print(\"There was a problem. Check the compatibility between the ROI to fit and the current ROI profiles.\")\n      return(NULL)\n      })\n\n\t#Update of tables of tab\n    if (!is.null(reactivequantdata$method1$results_to_save)) {\n      reactiveprogramdata$plot=reactivequantdata$method1$p\n      #reactivequantdata$stop3=1\n      reactiveROItestingdata$qualitypar=cbind(reactivequantdata$method1$results_to_save$quantification,reactivequantdata$method1$results_to_save$fitting_error,reactivequantdata$method1$results_to_save$signal_area_ratio)\n      colnames(reactiveROItestingdata$qualitypar)=c('Quantification','Fitting Error','Signal/total area ratio')\n      ind=which(reactiveprogramdata$ROIdata_subset[,5]==1)+3\n\n      rownames(reactiveROItestingdata$qualitypar)=rownames(reactivequantdata$method1$plot_data)[ind]\n      if (!is.null(reactivequantdata$method1$signals_parameters)) reactiveROItestingdata$signpar <- t(reactivequantdata$method1$signals_parameters)\n      reactiveprogramdata$stop=0\n         # reactiveprogramdata$roi=1\n    }\n    },error=function(e) {\n      print(\"Problem. Please explain the issue in the Github page\")\n    })\n  })\n\n\n\n  #Quantification of all spectra in the ROI:\n  observeEvent(input$autorun_signal, {\n    tryCatch({\n    dummy <- not_automatic_quant(reactiveprogramdata$imported_data, reactiveprogramdata$final_output, seq(nrow(reactiveprogramdata$imported_data$dataset)),reactiveprogramdata$ROIdata_subset,reactiveprogramdata$useful_data,interface=TRUE)\n    reactiveprogramdata$final_output=dummy$final_output\n    reactiveprogramdata$useful_data=dummy$useful_data\n    reactiveprogramdata$validation_data=validation(reactiveprogramdata$final_output,reactiveprogramdata$validation_data$alarmmatrix,input$select_validation)\n\n    },error=function(e) {print('Error. Please explain the issue on the Github website')})\n    })\n\n\n\n  #Remove quantification or save quantification or ROI profile edited\n  observeEvent(input$remove_q, {\n    tryCatch({\n    if (!is.null(reactiveprogramdata$imported_data$signals_names[reactiveprogramdata$info$col])) {\n      ind=which(reactiveprogramdata$ROI_data[,4]==reactiveprogramdata$imported_data$signals_names[reactiveprogramdata$info$col])\n    } else {\n      ind=as.numeric(input$select)\n    }\n    reactiveprogramdata$final_output <- remove_quant(reactiveprogramdata$info,reactiveprogramdata$imported_data, reactiveprogramdata$final_output)\n    },error=function(e) {print('Error. Please explain the issue on the Github website')})\n\n    })\n\n  observeEvent(input$save_results, {\n    tryCatch({\n    if (is.null(reactivequantdata$method1$Ydata)) return(NULL)\n\n    dummy=save_roi_testing(reactivequantdata$method1,reactiveprogramdata$imported_data, reactiveprogramdata$final_output,reactiveprogramdata$useful_data)\n    reactiveprogramdata$final_output=dummy$final_output\n    reactiveprogramdata$useful_data=dummy$useful_data\n    reactiveprogramdata$validation_data=validation(reactiveprogramdata$final_output,reactiveprogramdata$validation_data$alarmmatrix,input$select_validation)\n\n    },error=function(e) {print('Error. Please explain the issue on the Github website')})\n      })\n\n\n\n    #Save edition of ROI profile\n  observeEvent(input$save_profile, {\n    tryCatch({\n  dummy = which(is.na(reactiveprogramdata$ROI_data[, 1]))\n    if (length(dummy)==0) dummy=dim(reactiveprogramdata$ROI_data)[1]+1\n    lal=which(duplicated(reactiveprogramdata$ROI_data[-dummy,1:2])==FALSE)\n    ROI_separator = cbind(lal, c(lal[-1] - 1, dim(reactiveprogramdata$ROI_data[-dummy,])[1]))\n    if (length(reactiveprogramdata$info$col)>0) {\n\n      ind=which(ROI_separator[,2]-reactiveprogramdata$info$col>=0)[1]\n    } else {\n      ind=as.numeric(input$select)\n    }\n\n    reactiveprogramdata$ROI_data[ROI_separator[ind, 1]:ROI_separator[ind, 2],]=reactiveprogramdata$ROI_data_check[ROI_separator[ind, 1]:ROI_separator[ind, 2],]=reactiveprogramdata$ROIdata_subset\n    ROI_names=paste(reactiveprogramdata$ROI_data[ROI_separator[, 1],1],reactiveprogramdata$ROI_data[ROI_separator[, 1],2])\n    names(reactiveprogramdata$select_options)=ROI_names\n    },error=function(e) {print('Error. Please explain the issue on the Github website')})\n    })\n\n\n\n  #Spectra table.\n    output$x1 = tryCatch({DT::renderDataTable(reactiveprogramdata$spectra , selection = list(mode = 'multiple', selected = 1),server = TRUE)},error=function(e){})\n    # proxy = dataTableProxy('x1')\n\n\n\n\t#Plotly figure where to analyze peak shape fitting\n  output$plot <- renderPlotly({\n    if (reactiveprogramdata$beginning==FALSE) return()\n    if (reactiveprogramdata$beginning==T) reactiveprogramdata$plot\n  })\n\n\n\n  #Table where to analyze quantifications\n  output$qualitypar = DT::renderDataTable(reactiveROItestingdata$qualitypar)\n\n\n  #Repository table\n  observe({\n    suppressWarnings(\n    if (!is.na(reactiveprogramdata$imported_data))  {\n  output$repository = DT::renderDataTable(\n    reactiveprogramdata$imported_data$repository[which(reactiveprogramdata$imported_data$repository[,3]>reactiveprogramdata$ROIdata_subset[1,2]&reactiveprogramdata$imported_data$repository[,3]<reactiveprogramdata$ROIdata_subset[1,1]),] , server = TRUE)\n    })\n  })\n  observe({\n    suppressWarnings(\n      if (!is.na(reactiveprogramdata$imported_data))  {\n        output$repository2 = DT::renderDataTable(\n      reactiveprogramdata$imported_data$repository , selection = list(mode = 'single', selected = NULL),filter='top', server = TRUE)\n      })\n  })\n\n\n  #Direct edition of parameters before quantification\n  output$directedition <-   DT::renderDataTable(reactiveROItestingdata$signpar, selection = 'none', rownames = T)\n\n  proxy_directedition = dataTableProxy('directedition')\n\n  observeEvent(input$directedition_cell_edit, {\n    info = input$directedition_cell_edit\n    i = info$row\n    j = info$col\n    v = info$value\n    reactiveROItestingdata$signpar[i, j] <<- DT:::coerceValue(v, reactiveROItestingdata$signpar[i, j])\n    replaceData(proxy_directedition, reactiveROItestingdata$signpar, resetPaging = FALSE, rownames = FALSE)\n  })\n  #Quantification after direct edition of paramters\n  observeEvent(input$direct_edition, {\n    if (all(is.na(reactiveROItestingdata$signpar))) {\n      print(\"You can only perform direct edition of line shape fitted ROIs\")\n      return(NULL)\n    }\n    tryCatch({\n    reactivequantdata$method1=signals_int(reactiveprogramdata$imported_data, reactiveprogramdata$final_output,reactiveprogramdata$ind,reactiveROItestingdata$signpar,reactiveprogramdata$ROIdata_subset)\n    reactiveprogramdata$plot=reactivequantdata$method1$p\n    #reactivequantdata$stop3=1\n    reactiveROItestingdata$qualitypar=cbind(reactivequantdata$method1$results_to_save$quantification,reactivequantdata$method1$results_to_save$fitting_error,reactivequantdata$method1$results_to_save$signal_area_ratio)\n    colnames(reactiveROItestingdata$qualitypar)=c('Quantification','Fitting Error','Signal/total area ratio')\n    rownames(reactiveROItestingdata$qualitypar)=rownames(reactivequantdata$method1$plot_data)[4:(3+nrow(reactiveROItestingdata$qualitypar))]\n    # ind=which(rownames(reactiveROItestingdata$qualitypar)=='additional signal')\n    # reactiveprogramdata$bgColScales = rep(c(\"\",\"info\"),times=c(length(rownames(reactiveROItestingdata$qualitypar))-length(ind),length(ind)))\n    if (!is.null(reactivequantdata$method1$signals_parameters)) reactiveROItestingdata$signpar <- t(reactivequantdata$method1$signals_parameters)\n  },error=function(e) {\n    print(\"Prepare a valid input\")\n  })\n })\n\n\n\n  #2D plot\n  output$jres_plot <- renderUI({\n    if(is.na(reactiveprogramdata$jres_plot)) return()\n    plotlyOutput(\"jres_plot2\",height='250px')\n  })\n  output$jres_plot2 <- renderPlotly({\n    print(reactiveprogramdata$jres_plot)\n  })\n\n\n\n\n  ## THIRD TAB REACTIVE OUTPUTS\n\n  #Creation of table to check quantifications with the parameter chosen by the user\n  observeEvent(input$select_validation, {\n    if (reactiveprogramdata$beginning==FALSE) return()\n\tif (as.numeric(input$select_validation)>0) {\n    tryCatch({\n      reactiveprogramdata$validation_data=validation(reactiveprogramdata$final_output,reactiveprogramdata$validation_data$alarmmatrix,input$select_validation)\n    output$fit_selection = DT::renderDataTable({ datatable(round(reactiveprogramdata$validation_data$shownmatrix,4),selection = list(mode = 'single', target = 'cell')) %>% formatStyle(colnames(reactiveprogramdata$validation_data$shownmatrix), backgroundColor = styleInterval(reactiveprogramdata$validation_data$brks, reactiveprogramdata$validation_data$clrs))\n    })},error=function(e) {\n      print(\"Not enough data to model it.\")\n    })\n\t}\n  })\n\n  #Loading of quantification\n  observeEvent(input$fit_selection_cell_clicked, {\nif (length(input$fit_selection_cell_clicked)<1) return()\n    #Checks and setting of parameters\n    tryCatch({reactiveprogramdata$info=input$fit_selection_cell_clicked\n    reactiveprogramdata$ind=reactiveprogramdata$info$row\n    reac$cho=NA\n\n    updateSelectInput(session, \"select\",selected = NULL)\n\n    # if (length(reactiveprogramdata$info$row)!=1) return(NULL)\n\n    dummy=load_quantification(reactiveprogramdata$useful_data,reactiveprogramdata$imported_data,reactiveprogramdata$final_output,reactiveprogramdata$info,reactiveprogramdata$ROI_data)\n\n      reactiveprogramdata$plot=dummy$plot\n      reactiveROItestingdata$signpar=dummy$signpar\n      reactiveprogramdata$ROIdata_subset=dummy$ROIpar\n      reactiveROItestingdata$qualitypar=dummy$qualitypar\n\n    #Redirect to quantification tab\n    updateTabsetPanel(session, \"mynavlist\",selected = \"tab3\")\n    },error=function(e) {\n      print(\"Select a valid quantification.\")\n    })\n  })\n\n\n  ## FOURTH TAB REACTIVE OUTPUTS\n\n\n  observeEvent(input$roi_profile_option, {\n  tryCatch({\n      output$roi_profiles_plot=renderPlotly({\n        if (input$roi_profile_option==1) {\n          reactiveprogramdata$clusterplot\n          } else if (input$roi_profile_option==2) {\n            reactiveprogramdata$medianplot\n            }\n        })\n  },error=function(e) {print('Error. Please explain the issue on the Github website')})\n\n\n    })\n\n  #Add and remove signals and save changes\n  observeEvent(input$add_hmdb_signal, {\n    tryCatch({\n    dummy=reactiveprogramdata$imported_data$repository[input$repository2_rows_selected,]\n    dummy=c(dummy[,3]+0.02,dummy[,3]-0.02,'Baseline Fitting',dummy[,1],1,dummy[,3],median(reactiveprogramdata$ROI_data_check[,7]),median(reactiveprogramdata$ROI_data_check[,8]),dummy[,4],dummy[,5],0,dummy[,6])\n    if (dummy[9]=='d') {\n      dummy[9]=2\n    } else if (dummy[9]=='t') {\n      dummy[9]=3\n    } else {\n      dummy[9]=1\n    }\n\n    if (is.na(as.numeric(dummy[10])))  dummy[10]=0\n    dummy=as.list(dummy)\n    dummy[-c(3,4)]=as.numeric(dummy[-c(3,4)])\n\n    reactiveprogramdata$ROI_data_check=rbind(reactiveprogramdata$ROI_data_check,dummy)\n    }, error = function(e) {\n      print('Error. Please revise that you have chosen a signal.')\n    })\n  })\n  observeEvent(input$open_hmdb_url, {\n    tryCatch({\n      browseURL(paste(\"http://www.hmdb.ca/metabolites/\",reactiveprogramdata$imported_data$repository[input$repository2_rows_selected,2],\"#spectra\",sep=''))    }, error = function(e) {\n      print('Not possible to load HMDB url.')\n    })\n  })\n  observeEvent(input$add_signal, {\n    tryCatch({\n      dummy=c(rep(NA,4),apply(reactiveprogramdata$ROI_data_check[,5:11],2,function(x)median(x,na.rm=T)))\n      reactiveprogramdata$ROI_data_check=rbind(reactiveprogramdata$ROI_data_check,dummy)\n    }, error = function(e) {\n      print('Error. Please explain the issue in the Github page.')\n    })\n     })\n  observeEvent(input$remove_signal, {\n    tryCatch({\n    reactiveprogramdata$ROI_data_check=reactiveprogramdata$ROI_data_check[-input$roi_profiles_rows_selected,]\n    reactiveprogramdata$list=setdiff(reactiveprogramdata$list,input$roi_profiles_rows_selected)\n    }, error = function(e) {\n      print('Error. Please explain the issue in the Github page.')\n    })\n     })\n  observeEvent(input$save_changes, {\n    tryCatch({\n      if (any(duplicated(reactiveprogramdata$ROI_data_check[,4:5])==T)) {\n        print(\"Revise duplicated names.\")\n        return(NULL)\n      }\n\n      trel=which(order(reactiveprogramdata$ROI_data_check[,1]) %in% seq(length(reactiveprogramdata$list))==T)\n      sA <- apply(reactiveprogramdata$ROI_data[reactiveprogramdata$list,4:5],1,paste,collapse=' ')\n      sB <- apply(reactiveprogramdata$ROI_data_check[seq(length(reactiveprogramdata$list)),4:5],1,paste,collapse=' ')\n      knoc=reactiveprogramdata$ROI_data[which((sB %in% sA)==F),4:5]\n      knoc2=reactiveprogramdata$ROI_data_check[which((sA %in% sB)==F),4:5]\n      reactiveprogramdata$ROI_data_check=reactiveprogramdata$ROI_data_check[order(reactiveprogramdata$ROI_data_check[,1]),]\n\n\n      new_validation_data=rep(list(matrix(NA,nrow(reactiveprogramdata$final_output$signal_area_ratio),nrow(reactiveprogramdata$ROI_data_check),dimnames=list(reactiveprogramdata$imported_data$Experiments,paste(reactiveprogramdata$ROI_data_check[,4],reactiveprogramdata$ROI_data_check[,5],sep='_')))), length(reactiveprogramdata$validation_data$alarmmatrix))\n      names(new_validation_data)=names(reactiveprogramdata$validation_data$alarmmatrix)\n      new_shown_matrix=new_fitting_error=new_intensity=new_signal_area_ratio=new_shift=new_width=new_Area=matrix(NA,nrow(reactiveprogramdata$final_output$signal_area_ratio),nrow(reactiveprogramdata$ROI_data_check),dimnames=list(reactiveprogramdata$imported_data$Experiments,paste(reactiveprogramdata$ROI_data_check[,4],reactiveprogramdata$ROI_data_check[,5],sep='_')))\n      new_useful_data=reactiveprogramdata$useful_data\n      for (i in 1:length(new_useful_data)) new_useful_data[[i]]=vector(\"list\", nrow(reactiveprogramdata$ROI_data_check))\n      for (i in seq_along(new_useful_data)) {\n        for (j in seq_along(new_useful_data[[i]])) {\n          new_useful_data[[i]][[j]]=list(Ydata=NULL,Xdata=NULL,ROI_profile=reactiveprogramdata$ROI_data_check[j,],program_parameters=NULL,plot_data=NULL,FeaturesMatrix=NULL,signals_parameters=NULL,results_to_save=NULL,error1=1000000)\n        }}\n      new_fitting_error[,trel]=reactiveprogramdata$final_output$fitting_error[,reactiveprogramdata$list]\n      new_intensity[,trel]=reactiveprogramdata$final_output$intensity[,reactiveprogramdata$list]\n      new_signal_area_ratio[,trel]=reactiveprogramdata$final_output$signal_area_ratio[,reactiveprogramdata$list]\n      new_shift[,trel]=reactiveprogramdata$final_output$shift[,reactiveprogramdata$list]\n      new_width[,trel]=reactiveprogramdata$final_output$half_band_width[,reactiveprogramdata$list]\n      new_Area[,trel]=reactiveprogramdata$final_output$quantification[,reactiveprogramdata$list]\n      new_shown_matrix[,trel]=reactiveprogramdata$validation_data$shownmatrix[,reactiveprogramdata$list]\n      for (j in 1:length(new_validation_data)) new_validation_data[[j]][,trel]=reactiveprogramdata$validation_data$alarmmatrix[[j]][,reactiveprogramdata$list]\n      for (j in 1:length(new_useful_data)) new_useful_data[[j]][trel]=reactiveprogramdata$useful_data[[j]][reactiveprogramdata$list]\n      # for (j in 1:length(new_useful_data)) new_useful_data[[j]][setdiff(seq(nrow(reactiveprogramdata$ROI_data_check)),trel)]=list(Ydata=NA,Xdata=NA,ROI_profile=NA,program_parameters=NA,plot_data=NA,FeaturesMatrix=NA,signals_parameters=NA,results_to_save=NA,error1=1000000)\n\n      inde=c()\n      for (j in seq(nrow(knoc))) {\n        for (k in 1) {\n          for (l in trel) {\n            dsd=any(apply(new_useful_data[[k]][[l]]$ROI_profile[,4:5],1,function(x)identical(paste(x,collapse='_'),paste(knoc[j,],collapse='_')))  ==T)\n            dsd2=length(grep(paste(knoc[j,],collapse='_'),rownames(new_useful_data[[k]][[l]]$plot_data))>0)==T\n            if (dsd==T||dsd2==T) inde=c(inde,l)\n          }\n        }\n      }\n      for (j in seq(nrow(knoc))) {\n        for (k in 1:length(new_useful_data)) {\n          for (l in seq_along(inde)) {\n            new_useful_data[[k]][[inde[l]]]$ROI_profile[apply(new_useful_data[[k]][[inde[l]]]$ROI_profile[,4:5],1,function(x)identical(paste(x,collapse='_'),paste(knoc[j,],collapse='_'))),4:5]=knoc2[j,]\n            rownames(new_useful_data[[k]][[inde[l]]]$plot_data)=gsub(paste(knoc[j,],collapse='_'),paste(knoc2[j,],collapse='_'),rownames(new_useful_data[[k]][[inde[l]]]$plot_data))\n          }\n        }\n      }\n\n\n\n      reactiveprogramdata$final_output$fitting_error=new_fitting_error\n      reactiveprogramdata$final_output$intensity=new_intensity\n      reactiveprogramdata$final_output$signal_area_ratio=new_signal_area_ratio\n      reactiveprogramdata$final_output$shift=new_shift\n      reactiveprogramdata$final_output$half_band_width=new_width\n      reactiveprogramdata$final_output$quantification=new_Area\n      reactiveprogramdata$useful_data=new_useful_data\n      reactiveprogramdata$ROI_data=reactiveprogramdata$ROI_data_check\n      reactiveprogramdata$list=seq(nrow(reactiveprogramdata$ROI_data))\n      reactiveprogramdata$imported_data$signals_codes=seq(nrow(reactiveprogramdata$ROI_data))\n      reactiveprogramdata$imported_data$signals_names=paste(reactiveprogramdata$ROI_data[,4],reactiveprogramdata$ROI_data[,5],sep='_')\n      reactiveprogramdata$validation_data$alarmmatrix=new_validation_data\n      reactiveprogramdata$validation_data$shownmatrix=new_shown_matrix\n\n      dummy = which(is.na(reactiveprogramdata$ROI_data[, 1]))\n      if (length(dummy)==0) dummy=dim(reactiveprogramdata$ROI_data)[1]+1\n      lal=which(duplicated(reactiveprogramdata$ROI_data[-dummy,1:2])==FALSE)\n      ROI_separator = cbind(lal, c(lal[-1] - 1, dim(reactiveprogramdata$ROI_data[-dummy,])[1]))\n      ROI_names=paste(reactiveprogramdata$ROI_data[ROI_separator[, 1],1],reactiveprogramdata$ROI_data[ROI_separator[, 1],2])\n      reactiveprogramdata$select_options=1:length(ROI_names)\n      names(reactiveprogramdata$select_options)=ROI_names\n\n    updateSelectInput(session, \"select\",\n      choices = reactiveprogramdata$select_options,selected = input$x1_rows_selected\n    )\n    }, error = function(e) {\n      print('Problem during update of data. Please explain the issue in the Github page.')\n})\n  })\n\n  #ROI Profiles table\n  output$roi_profiles  = DT::renderDataTable(reactiveprogramdata$ROI_data_check, selection = 'multiple', rownames = FALSE,options=list(pageLength = 100,\n                                             lengthMenu = c(50,100)))\n\n  proxy_roi_profiles = dataTableProxy('roi_profiles')\n\n  observeEvent(input$roi_profiles_cell_edit, {\n    info = input$roi_profiles_cell_edit\n    i = info$row\n    j = info$col + 1\n    v = info$value\n    reactiveprogramdata$ROI_data_check[i, j] <<- DT:::coerceValue(v, reactiveprogramdata$ROI_data_check[i, j])\n    replaceData(proxy_roi_profiles, reactiveprogramdata$ROI_data_check, resetPaging = FALSE, rownames = FALSE)\n  })\n#\n#   ## FIFTH TAB REACTIVE OUTPUTS\n#\n#   #Boxplot plot\n#   output$plot_p_value_2 <- renderPlotly({\n#     if(all(is.na(reactiveprogramdata$final_output$quantification))) return()\n#     tryCatch({type_analysis_plot(reactiveprogramdata$final_output$quantification,reactiveprogramdata$final_output,reactiveprogramdata$imported_data,type='boxplot')\n#     }, error = function(e) {\n#       print('Error. Please explain the issue in the Github page.')\n#       return(NULL)\n#     })\n#   })\n#   #PCA plot\n#   output$pcascores <- renderPlotly({\n#     if(all(is.na(reactiveprogramdata$final_output$quantification))) return()\n#\n#     tryCatch({type_analysis_plot(reactiveprogramdata$final_output$quantification,reactiveprogramdata$final_output,reactiveprogramdata$imported_data,type='pca')\n#   }, error = function(e) {\n#     print('Generation of Regions of Interest not possible. Please explain the issue in the Github page.')\n#     return(NULL)\n#   })\n#   })\n\n  ## SIXTH TAB REACTIVE OUTPUTS\n\n# STOCSY generation\n  observeEvent(input$stocsy, {\n  tryCatch({\n    left_ppm <- renderText({ input$left_ppm })\n    right_ppm <- renderText({ input$right_ppm })\n      output$stocsy_plot=renderPlotly({\n        if (input$stocsy==1) {\n          reactiveprogramdata$clusterplot\n          } else {\n        STOCSY(reactiveprogramdata$imported_data$dataset,reactiveprogramdata$imported_data$ppm,c(input$left_ppm,input$right_ppm),input$correlation_method)\n          }\n        })\n  },error=function(e) {return(NULL) })\n    })\n\n\n\n  #Dengrogran heatmaps for quantification and chemical shift\n  tryCatch(output$dendheatmapareadata <- renderPlotly({\n    if(all(is.na(reactiveprogramdata$final_output$quantification))) return()\n\n    tryCatch({suppressWarnings(suppressMessages(type_analysis_plot(reactiveprogramdata$final_output$quantification,reactiveprogramdata$final_output,reactiveprogramdata$imported_data,type='dendrogram_heatmap')))\n  }, error = function(e) {\n    print('Error. Please explain the issue in the Github page.')\n    return(NULL)\n  })\n  }))\n\n  tryCatch(output$dendheatmapshiftdata <- renderPlotly({\n    if(all(is.na(reactiveprogramdata$final_output$quantification))) return()\n\n    tryCatch({suppressWarnings(suppressMessages(type_analysis_plot(reactiveprogramdata$final_output$shift,reactiveprogramdata$final_output,reactiveprogramdata$imported_data,type='dendrogram_heatmap')))\n  }, error = function(e) {\n    print('Error. Please explain the issue in the Github page.')\n    return(NULL)\n  })\n}))\n\n\n\n}\n",
    "created" : 1504718345280.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3682389003",
    "id" : "1B26B636",
    "lastKnownWriteTime" : 1504718725,
    "last_content_update" : 1504718725371,
    "path" : "~/R/win-library/3.4/rDolphin/app/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}