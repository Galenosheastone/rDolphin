{
    "collab_server" : "",
    "contents" : "# fitting_error_before_sd=apply(profiling_names_corrected$final_output$fitting_error,2,function(x)median(x,na.rm=T))\n# fitting_error_after_sd=apply(millorat_coward_2$final_output$fitting_error,2,function(x)median(x,na.rm=T))\n\nload(\"C:/Bruker/TopSpin3.2/data/MNavarro_femtes_IRSI/data_analysis/resultats_paper.RData\")\n\nsapply(list.files('C:/Users/Usuario/Downloads/prediction_code',full.names=T),source)\nsapply(list.files('C:/Users/Usuario/Documents/GitHub/rDolphin/R',full.names=T),source)\n\n\n\nll=ll2=ll3=rep(NA,ncol(profiling_names_corrected$final_output$shift))\npredicted_width=as.matrix(prediction_ranger_weights_selective(profiling_names_corrected$final_output$half_band_width,profiling_names_corrected$final_output$fitting_error))\nfor (i in which(!is.na(predicted_width[1,])))   ll3[i] = boxplot.stats(abs((predicted_width[,i]/profiling_names_corrected$final_output$half_band_width[,i])-1))$stats[5]\nmedian(ll3,na.rm=T)\nmm3=apply((profiling_names_corrected$final_output$half_band_width/t(replicate(nrow(predicted_width),initial_corrected$ROI_data[,8])))[,initial_corrected$ROI_data[,5]>0],2,function(x)diff(quantile(x,c(0.05,0.95),na.rm=T)))\nmedian(mm3,na.rm=T)\nmedian(ll[-grep('Sum',initial_corrected$ROI_data[,3])],na.rm=T)/median(initial_corrected$ROI_data[,7][-grep('Sum',initial_corrected$ROI_data[,3])])\n\n\n\npredicted_shift=as.matrix(prediction_ranger_weights_selective(profiling_names_corrected$final_output$shift,profiling_names_corrected$final_output$fitting_error))\nfor (i in which(!is.na(predicted_shift[1,])))   ll[i] = boxplot.stats(abs(predicted_shift[,i]-profiling_names_corrected$final_output$shift[,i]))$stats[5]\nmedian(ll,na.rm=T)\nmm=apply(profiling_names_corrected$final_output$shift[,initial_corrected$ROI_data[,5]>0],2,function(x)diff(quantile(x,c(0.05,0.95),na.rm=T)))\nmedian(mm,na.rm=T)\nmedian(ll[-grep('Sum',initial_corrected$ROI_data[,3])],na.rm=T)/median(initial_corrected$ROI_data[,7][-grep('Sum',initial_corrected$ROI_data[,3])])\n\n\npredicted_intensity=as.matrix(prediction_ranger_weights_coward_selective(profiling_names_corrected$final_output$intensity,initial_corrected$ROI_data[,4],profiling_names_corrected$final_output$fitting_error))\nfor (i in which(!is.na(predicted_intensity[1,])))   ll2[i] = boxplot.stats(abs(predicted_intensity[,i]-profiling_names_corrected$final_output$intensity[,i]))$stats[5]\n\nYdatamatrix=matrix(NA,nrow(predicted_intensity),ncol(predicted_intensity))\nfor (i in seq(nrow(predicted_intensity))) {\n  for (j in seq(ncol(predicted_intensity))) {\n    Ydatamatrix[i,j]=max(profiling_names_corrected$useful_data[[i]][[j]]$Ydata)\n  }}\nmm2=apply(Ydatamatrix,2,median)\nmedian(ll2/mm2,na.rm=T)\n\n\ni=1;j=26\nFeaturesMatrix=profiling_names_corrected$useful_data[[i]][[j]]$FeaturesMatrix\nXdata_2=profiling_names_corrected$useful_data[[i]][[j]]$Xdata\nXdata_2=seq(max(Xdata_2),min(Xdata_2),-0.00001)\nprogram_parameters=profiling_names_corrected$useful_data[[i]][[j]]$program_parameters\n\nmultiplicities=FeaturesMatrix[1,11]\nroof_effect=FeaturesMatrix[1,12]\n\n\n\nfitted_signals=matrix(NA,6,length(Xdata_2))\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[c(1,2)]=c(signals_parameters[1]*2,signals_parameters[2]+0.005)\n\nfitted_signals[1,] = signal_fitting(signals_parameters,\n                                Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nfitted_signals[2,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[2]=signals_parameters[2]+0.003\nfitted_signals[3,] = signal_fitting(signals_parameters,\n                                Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[2]=signals_parameters[2]-0.003\nfitted_signals[4,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[2]=signals_parameters[2]+0.0006\nfitted_signals[5,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[2]=signals_parameters[2]-0.0006\nfitted_signals[6,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\n\ndata=data.frame(y=t(fitted_signals[-1,]),x=Xdata_2-median(Xdata_2))\ndata=reshape2::melt(data, id.var=\"x\")\ndata3=data.frame(x=Xdata_2-median(Xdata_2),y=colSums(fitted_signals[1:2,]))\nlibrary(ggplot2)\nab=ggplot() +\n  geom_line(aes(x, value), colour='black', data=data[1:1981,]) +\n  geom_line(aes(x, value), colour='blue',alpha=0.5, data=data[1982:3962,]) +\n  geom_line(aes(x, value), colour='blue',alpha=0.5, data=data[3963:5943,]) +\n  geom_line(aes(x, value), colour='red', alpha=0.5,data=data[5944:7924,]) +\n  geom_line(aes(x, value), colour='red',alpha=0.5, data=data[7925:9905,]) +\n  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +\n  scale_x_reverse()+ labs(x = \"ppm\",y='Intensity',title = \"Chemical shift\") +\n  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n                     panel.grid.minor = element_blank(), axis.line = element_line(colour = \"black\"))\n\n\nfitted_signals=matrix(NA,6,length(Xdata_2))\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[c(1,2)]=c(signals_parameters[1]*2,signals_parameters[2]+0.005)\n\nfitted_signals[1,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nfitted_signals[2,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[3]=signals_parameters[3]*(1+0.25)\nfitted_signals[3,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[3]=signals_parameters[3]*(1-0.25)\nfitted_signals[4,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[3]=signals_parameters[3]*(1+0.0806)\nfitted_signals[5,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[3]=signals_parameters[3]*(1-0.0806)\nfitted_signals[6,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\n\ndata=data.frame(x=Xdata_2-median(Xdata_2),twox=fitted_signals[4,],x2=fitted_signals[3,])\ndata2=data.frame(x=Xdata_2-median(Xdata_2),twox=fitted_signals[6,],x2=fitted_signals[5,])\ndata4=data.frame(x=Xdata_2-median(Xdata_2),y=fitted_signals[2,])\ndata3=data.frame(x=Xdata_2-median(Xdata_2),y=colSums(fitted_signals[1:2,]))\n\nlibrary(ggplot2)\nab2=ggplot(data, aes(x=x, y=twox)) +\n  geom_ribbon(data=data,aes(ymin=twox,ymax=x2), fill=\"blue\", alpha=\"0.5\") +\n  geom_ribbon(data=data2,aes(ymin=twox,ymax=x2), fill=\"red\", alpha=\"0.5\") +\ngeom_line(data=data4,aes(x,y),colour='black') +\n  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +\n  scale_x_reverse()+ labs(x = \"ppm\",y='Intensity',title = \"Half bandwidth\") +\n  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n                     panel.grid.minor = element_blank(), axis.line = element_line(colour = \"black\"))\n\n\n\n\nfitted_signals=matrix(NA,6,length(Xdata_2))\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[c(1,2)]=c(signals_parameters[1]*2,signals_parameters[2]+0.005)\nfitted_signals[1,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nfitted_signals[2,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\n\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[1]=0\nfitted_signals[3,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[1]=max(colSums(fitted_signals[1:2,]))\nfitted_signals[4,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[1]=signals_parameters[1]*(1+0.1603)\nfitted_signals[5,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\nsignals_parameters=profiling_names_corrected$useful_data[[i]][[j]]$signals_parameters[1:5]\nsignals_parameters[1]=signals_parameters[1]*(1-0.1603)\nfitted_signals[6,] = signal_fitting(signals_parameters,\n                                    Xdata_2,multiplicities,roof_effect,program_parameters$freq)\n\ndata=data.frame(x=Xdata_2-median(Xdata_2),twox=fitted_signals[4,],x2=fitted_signals[3,])\ndata2=data.frame(x=Xdata_2-median(Xdata_2),twox=fitted_signals[6,],x2=fitted_signals[5,])\ndata3=data.frame(x=Xdata_2-median(Xdata_2),y=colSums(fitted_signals[1:2,]))\ndata4=data.frame(x=Xdata_2-median(Xdata_2),y=fitted_signals[2,])\n\nlibrary(ggplot2)\nab3=ggplot(data, aes(x=x, y=twox)) +\n  geom_ribbon(data=data,aes(ymin=twox,ymax=x2), fill=\"blue\", alpha=\"0.5\") +\n  geom_ribbon(data=data2,aes(ymin=twox,ymax=x2), fill=\"red\", alpha=\"0.5\") +\n  geom_line(data=data3,aes(x,y),colour='black',linetype='dashed') +\n  geom_line(data=data4,aes(x,y),colour='black') +\n  scale_x_reverse()+ labs(x = \"ppm\",y='Intensity',title = \"Intensity\") +\n  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n                     panel.grid.minor = element_blank(), axis.line = element_line(colour = \"black\"))\np12 <- grid.arrange(arrangeGrob(ab ,ab2,ab3 ,nrow=3))\n\n####\n\n\nindicators_width=matrix(NA,4,ncol(predicted_width))\n\ndiff_width=matrix(NA,nrow(predicted_width),ncol(predicted_width))\nfor (i in which(initial_corrected$ROI_data[,5]>0))  {\n  ind=abs((predicted_width[,i]/profiling_names_corrected$final_output$half_band_width[,i])-1) %in% boxplot.stats(abs((predicted_width[,i]/profiling_names_corrected$final_output$half_band_width[,i])-1))$out\n  if (all(ind==F)) {\n    indicators_width[2,i]=median(profiling_names_corrected$final_output$fitting_error[,i])\n    indicators_width[4,i]=0\n    next\n  }\n  indicators_width[4,i]=length(which(ind==T))\n  pva=rep(1,nrow(predicted_shift))\n  pva[ind]=2\n  indicators_width[1:3,i]=c(median(profiling_names_corrected$final_output$fitting_error[ind,i,drop=F]),median(profiling_names_corrected$final_output$fitting_error[!ind,i]),\n                            p_values(profiling_names_corrected$final_output$fitting_error[,i,drop=F],cbind(seq(nrow(predicted_shift)),pva)))\n}\n\nindicators_shift=matrix(NA,4,ncol(predicted_width))\ndiff_shift=matrix(NA,nrow(predicted_shift),ncol(predicted_shift))\nfor (i in which(initial_corrected$ROI_data[,5]>0))  {\n  ind=abs(predicted_shift[,i]-profiling_names_corrected$final_output$shift[,i]) %in% boxplot.stats(abs(predicted_shift[,i]-profiling_names_corrected$final_output$shift[,i]))$out\n  if (all(ind==F)) {\n    indicators_shift[2,i]=median(profiling_names_corrected$final_output$fitting_error[,i])\n    indicators_shift[4,i]=0\n    next\n  }\n  indicators_shift[4,i]=length(which(ind==T))\n  pva=rep(1,nrow(predicted_shift))\n  pva[ind]=2\n  indicators_shift[1:3,i]=c(median(profiling_names_corrected$final_output$fitting_error[ind,i,drop=F]),median(profiling_names_corrected$final_output$fitting_error[!ind,i]),\n                            p_values(profiling_names_corrected$final_output$fitting_error[,i,drop=F],cbind(seq(nrow(predicted_shift)),pva)))\n}\n\n\nindicators_intensity=matrix(NA,4,ncol(predicted_width))\ndiff_intensity=matrix(NA,nrow(predicted_intensity),ncol(predicted_intensity))\nfor (i in which(!is.na(predicted_intensity[1,])))  {\n  ind=abs(predicted_intensity[,i]-profiling_names_corrected$final_output$intensity[,i]) %in% boxplot.stats(abs(predicted_intensity[,i]-profiling_names_corrected$final_output$intensity[,i]))$out\n  if (all(ind==F)) {\n    indicators_intensity[2,i]=median(profiling_names_corrected$final_output$fitting_error[,i])\n    indicators_intensity[4,i]=0\n    next\n  }\n  indicators_intensity[4,i]=length(which(ind==T))\n  pva=rep(1,nrow(predicted_shift))\n  pva[ind]=2\n  indicators_intensity[1:3,i]=c(median(profiling_names_corrected$final_output$fitting_error[ind,i,drop=F]),median(profiling_names_corrected$final_output$fitting_error[!ind,i]),\n                                p_values(profiling_names_corrected$final_output$fitting_error[,i,drop=F],cbind(seq(nrow(predicted_shift)),pva)))\n}\n\n\nlol=c(median(indicators_intensity[1,]/indicators_intensity[2,],na.rm=T),\nmedian(indicators_shift[1,]/indicators_shift[2,],na.rm=T),\nmedian(indicators_width[1,]/indicators_width[2,],na.rm=T))\n\n\nmatr=matrix(NA,3,4)\nmatr[1,1:2]=c(length(which(indicators_shift[3,]<0.05)),length(which(!is.na(indicators_shift[3,]))))\nmatr[2,1:2]=c(length(which(indicators_width[3,]<0.05)),length(which(!is.na(indicators_width[3,]))))\nmatr[3,1:2]=c(length(which(indicators_intensity[3,]<0.05)),length(which(!is.na(indicators_intensity[3,]))))\n\ndata=data.frame(shift=c(indicators_shift[1,],indicators_shift[2,],\n                        indicators_width[1,],indicators_width[2,],\n                        indicators_intensity[1,],indicators_intensity[2,]),\n                Group=factor(c(rep('Outliers',ncol(indicators_shift)),\n                                        rep('Non-outliers',ncol(indicators_shift)),\n                                        rep('Outliers',ncol(indicators_shift)),\n                                        rep('Non-outliers',ncol(indicators_shift)),\n                                        rep('Outliers',ncol(indicators_shift)),\n                                        rep('Non-outliers',ncol(indicators_shift)))),\n                metabolite=factor(c(rep(\"Chemical shift\",2*ncol(indicators_shift)),\n                                  rep(\"Half bandwidth\",2*ncol(indicators_shift)),\n                                  rep(\"Intensity\",2*ncol(indicators_shift))))\n                  )\np10 <- ggplot(data, aes(x = metabolite, y = shift, fill = Group)) +\n  geom_boxplot(alpha=0.7,outlier.shape=NA) +scale_y_continuous(limits=c(0,0.125))+\n  labs(x=\"Signal parameter\",y= \"Median fitting error\") +\n\n  theme_bw() +\n  theme(legend.position=\"bottom\",plot.title = element_text(size = 14, family = \"Tahoma\", face = \"bold\"),\n        text = element_text(size = 12, family = \"Tahoma\"),\n        axis.title = element_text(face=\"bold\"),\n        axis.text.x=element_text(size = 9)) +\n  scale_fill_brewer(palette = \"Accent\")\np10\n\nindicators_width=matrix(NA,4,ncol(predicted_width))\n\ndiff_width=matrix(NA,nrow(predicted_width),ncol(predicted_width))\nfor (i in which(initial_corrected$ROI_data[,5]>0))  {\n  ind=abs((predicted_width[,i]/profiling_names_corrected$final_output$half_band_width[,i])-1) %in% boxplot.stats(abs((predicted_width[,i]/profiling_names_corrected$final_output$half_band_width[,i])-1))$out\n  if (all(ind==F)) {\n    indicators_width[2,i]=median(profiling_names_corrected$final_output$signal_area_ratio[,i])\n    indicators_width[4,i]=0\n    next\n  }\n  indicators_width[4,i]=length(which(ind==T))\n  pva=rep(1,nrow(predicted_shift))\n  pva[ind]=2\n  indicators_width[1:3,i]=c(median(profiling_names_corrected$final_output$signal_area_ratio[ind,i,drop=F]),median(profiling_names_corrected$final_output$signal_area_ratio[!ind,i]),\n                            p_values(profiling_names_corrected$final_output$signal_area_ratio[,i,drop=F],cbind(seq(nrow(predicted_shift)),pva)))\n}\n\nindicators_shift=matrix(NA,4,ncol(predicted_width))\ndiff_shift=matrix(NA,nrow(predicted_shift),ncol(predicted_shift))\nfor (i in which(initial_corrected$ROI_data[,5]>0))  {\n  ind=abs(predicted_shift[,i]-profiling_names_corrected$final_output$shift[,i]) %in% boxplot.stats(abs(predicted_shift[,i]-profiling_names_corrected$final_output$shift[,i]))$out\n  if (all(ind==F)) {\n    indicators_shift[2,i]=median(profiling_names_corrected$final_output$signal_area_ratio[,i])\n    indicators_shift[4,i]=0\n    next\n  }\n  indicators_shift[4,i]=length(which(ind==T))\n  pva=rep(1,nrow(predicted_shift))\n  pva[ind]=2\n  indicators_shift[1:3,i]=c(median(profiling_names_corrected$final_output$signal_area_ratio[ind,i,drop=F]),median(profiling_names_corrected$final_output$signal_area_ratio[!ind,i]),\n                            p_values(profiling_names_corrected$final_output$signal_area_ratio[,i,drop=F],cbind(seq(nrow(predicted_shift)),pva)))\n}\n\n\nindicators_intensity=matrix(NA,4,ncol(predicted_width))\ndiff_intensity=matrix(NA,nrow(predicted_intensity),ncol(predicted_intensity))\nfor (i in which(!is.na(predicted_intensity[1,])))  {\n  ind=abs(predicted_intensity[,i]-profiling_names_corrected$final_output$intensity[,i]) %in% boxplot.stats(abs(predicted_intensity[,i]-profiling_names_corrected$final_output$intensity[,i]))$out\n  if (all(ind==F)) {\n    indicators_intensity[2,i]=median(profiling_names_corrected$final_output$signal_area_ratio[,i])\n    indicators_intensity[4,i]=0\n    next\n  }\n  indicators_intensity[4,i]=length(which(ind==T))\n  pva=rep(1,nrow(predicted_shift))\n  pva[ind]=2\n  indicators_intensity[1:3,i]=c(median(profiling_names_corrected$final_output$signal_area_ratio[ind,i,drop=F]),median(profiling_names_corrected$final_output$signal_area_ratio[!ind,i]),\n                                p_values(profiling_names_corrected$final_output$signal_area_ratio[,i,drop=F],cbind(seq(nrow(predicted_shift)),pva)))\n}\n\n\nlol2=c(median(indicators_intensity[1,]/indicators_intensity[2,],na.rm=T),\nmedian(indicators_shift[1,]/indicators_shift[2,],na.rm=T),\nmedian(indicators_width[1,]/indicators_width[2,],na.rm=T))\n\nmatr[1,3:4]=c(length(which(indicators_shift[3,]<0.05)),length(which(!is.na(indicators_shift[3,]))))\nmatr[2,3:4]=c(length(which(indicators_width[3,]<0.05)),length(which(!is.na(indicators_width[3,]))))\nmatr[3,3:4]=c(length(which(indicators_intensity[3,]<0.05)),length(which(!is.na(indicators_intensity[3,]))))\n\ndata=data.frame(shift=c(indicators_shift[1,],indicators_shift[2,],\n                        indicators_width[1,],indicators_width[2,],\n                        indicators_intensity[1,],indicators_intensity[2,]),\n                Group=factor(c(rep('Outliers',ncol(indicators_shift)),\n                               rep('Non-outliers',ncol(indicators_shift)),\n                               rep('Outliers',ncol(indicators_shift)),\n                               rep('Non-outliers',ncol(indicators_shift)),\n                               rep('Outliers',ncol(indicators_shift)),\n                               rep('Non-outliers',ncol(indicators_shift)))),\n                metabolite=factor(c(rep(\"Chemical shift\",2*ncol(indicators_shift)),\n                                    rep(\"Half bandwidth\",2*ncol(indicators_shift)),\n                                    rep(\"Intensity\",2*ncol(indicators_shift))))\n)\np11 <- ggplot(data, aes(x = metabolite, y = shift, fill = Group)) +\n  geom_boxplot(alpha=0.7,outlier.shape=NA) +\n  labs(x=\"Signal parameter\",y= \"Median SATAR\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, family = \"Tahoma\", face = \"bold\"),\n        text = element_text(size = 12, family = \"Tahoma\"),\n        axis.title = element_text(face=\"bold\"),\n        axis.text.x=element_text(size = 9)) +\n  scale_fill_brewer(palette = \"Accent\")\np11\n\ng_legend=function(a.gplot){\n  tmp = ggplot_gtable(ggplot_build(a.gplot))\n  leg = which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")\n  legend = tmp$grobs[[leg]]\n  return(legend)}\nmylegend=g_legend(p10)\np12 <- grid.arrange(arrangeGrob(p10 + theme(legend.position=\"none\") ,\n                                p11 + theme(legend.position=\"none\") ,\n                                top=textGrob('Boxplots for outliers and non outliers\nof outputted value / predicted value',gp=gpar(fontface='bold',fontsize=14)),nrow=1),\n        mylegend, nrow=2,heights=c(10, 1))\n\n\nasd=order(apply(profiling_names_corrected$final_output$fitting_error[,initial_corrected$ROI_data[,5]>0],2,function(x)median(x,na.rm=T)),na.last=NA)\nasd2=order(apply(millorat_coward$final_output$fitting_error[,initial_corrected$ROI_data[,5]>0],2,function(x) median(x,na.rm=T)),na.last=NA)\nasd=asd[asd %in% asd2]\n\ndades=100*(sort(apply(millorat_coward$final_output$fitting_error[,asd],2,median))/\n             sort(apply(profiling_names_corrected$final_output$fitting_error[,asd],2,median))-1)\nab=ggplot() +\n  geom_line(aes(x=seq_along(dades),y=dades), colour='black') +\n  labs(x = \"Metabolite signals sorted by median fitting error\",y='% variation of median fitting error',title = \"% variation in median fitting error after prediction of \\n signal parameter values\") +\n  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n                     plot.title = element_text(size = 14, family = \"Tahoma\", face = \"bold\"),\n                     text = element_text(size = 12, family = \"Tahoma\"),\n                     axis.title = element_text(face=\"bold\"),\n                     axis.text.x=element_text(size = 11),panel.grid.minor = element_blank(), axis.line = element_line(colour = \"black\"))\n\n\n\nasd=order(apply(profiling_names_corrected$final_output$quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))\n# asd2=order(apply(millorat_coward$final_output$quantification,2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))\nasd=asd[asd %in% which(initial_corrected$ROI_data[,5]>0)]\ndades=100*(sort(apply(millorat_coward$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))/\n             sort(apply(profiling_names_corrected$final_output$quantification[,asd],2,function(x)sd(x,na.rm=T)/mean(x,na.rm=T)))-1)\nab=ggplot() +\n  geom_line(aes(x=seq_along(dades),y=dades), colour='black') +\n  labs(x = \"Metabolite signals sorted by CV\",y='% variation of CV',title = \"% variation in CV after prediction of signal parameter values\") +\n  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n                     plot.title = element_text(size = 14, family = \"Tahoma\", face = \"bold\"),\n                     text = element_text(size = 12, family = \"Tahoma\"),\n                     axis.title = element_text(face=\"bold\"),\n                     axis.text.x=element_text(size = 11),\n                     panel.grid.minor = element_blank(), axis.line = element_line(colour = \"black\"))\n\n\nTIC_normalization <- as.data.frame(readr::read_csv(\"C:/Users/Usuario/Downloads/TIC.normalization.csv\"))\nTIC_normalization2=t(TIC_normalization[,-c(1:6,141:165)])\ncolnames(TIC_normalization2)=TIC_normalization[,2]\n\ntoc=cor(millorat_coward$final_output$quantification,TIC_normalization2 ,method='spearman')\n\nind=c(58,21,13,14,36,110,98,68,69,6,38,20,57,92,60,33,51)\nind2=c(21,1,4,2,10,17,18,24,26,29,37,40,48,49,53,62,59)\ntoc2=diag(cor(millorat_coward$final_output$quantification[,ind],TIC_normalization2[,ind2] ,method='spearman'))\ntoc3=diag(cor(profiling_names_corrected$final_output$quantification[,ind],TIC_normalization2[,ind2] ,method='spearman'))\n\nmetadata=factor(rep(c(\"Before prediction\",\"After prediction\"),c(length(toc2),length(toc3))),levels =c(\"Before prediction\",\"After prediction\") )\ndata=data.frame(shift=c(toc3,toc2),metadata=metadata)\np10 <- ggplot(data, aes(x = metadata, y = shift, fill = metadata)) +\n  geom_boxplot(alpha=0.7,outlier.shape=NA) +\n  labs(title='Spearman correlation between quantifications \\n of metabolites in MS and NMR data',\n       y=\"Spearman's rho\",x='') +\n  theme_bw() +\n  theme(legend.position=\"none\",\n        plot.title = element_text(size = 14, family = \"Tahoma\", face = \"bold\"),\n        text = element_text(size = 12, family = \"Tahoma\"),\n        axis.title = element_text(face=\"bold\"),\n        axis.text.x=element_text(size = 11)) +\n  scale_fill_brewer(palette = \"Accent\")\np10\n",
    "created" : 1506174389281.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3842928035",
    "id" : "EFEB2BC5",
    "lastKnownWriteTime" : 1505312763,
    "last_content_update" : 1505312763,
    "path" : "C:/Users/Usuario/Downloads/code_results_prediction.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}