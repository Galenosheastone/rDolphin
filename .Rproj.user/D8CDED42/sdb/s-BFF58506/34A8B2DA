{
    "collab_server" : "",
    "contents" : "library(readr)\nlibrary(data.table)\nlibrary(mlbench)\nlibrary(caret)\nlibrary(readxl)\nlibrary(missForest)\nlibrary(pROC)\nctrl <- trainControl(method = \"repeatedcv\",\n                     repeats = 20,\n                     classProbs = TRUE)\n\n\n###WORKFLOW FOR MTBLS374 DATASET\n\nset.seed(1)\n\n#Reading outputted profiling information (quantification quantification, chemical shift and quality indicators) of MTBLS374 dataset\nchemical_shift <- data.matrix(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/shift.csv\")[,-1])\nfitting_error <- data.matrix(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/fitting_error.csv\")[,-1])\nsignal_area_ratio <- data.matrix(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/signal_area_ratio.csv\")[,-1])\nquantification=data.matrix(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/quantification.csv\")[,-1])\n\n#Removing all NA columns and converting quantifications with suboptimal quality indicatiors into NA values.\nind=which(is.na(colSums(fitting_error)))\nquantification[signal_area_ratio<3]=NA\nquantification[,-ind][fitting_error[,-ind]>0.15]=NA\nchemical_shift[signal_area_ratio<3]=NA\nchemical_shift[,-ind][fitting_error[,-ind]>0.15]=NA\nchemical_shift[chemical_shift==Inf]=NA\n\n#Reading metadata extracted from MTBLS374 website and converting into factor associated with MTBLS profiling dataset\nmetadata=fread(\"C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt\")\nmetadata=metadata[which(!is.na(metadata$`Factor Value[smoking status]`)),]\nmetadata=factor(metadata$`Factor Value[smoking status]`)\n\n#Converting outliers for each signal for every group (smoker vs non-smoker) into NA\nfor (j in unique(metadata)) {\n  for (i in seq(ncol(quantification))) {\n    quantification[(quantification[which(metadata==j),i] %in% boxplot.stats(quantification[which(metadata==j),i])$out),i]=NA\n  }\nfor (i in seq(ncol(chemical_shift))) {\n  chemical_shift[(chemical_shift[which(metadata==j),i] %in% boxplot.stats(chemical_shift[which(metadata==j),i])$out),i]=NA\n}\n}\n\n#Remvoving signals with too many NA values\nind=apply(quantification,2,function(x)length(which(is.na(x))))\nquantification_clean=quantification[,ind<30]\nind=apply(chemical_shift,2,function(x)length(which(is.na(x))))\nchemical_shift_clean=chemical_shift[,ind<30]\n\n\n#Preparing specific colnames for signal chemical shifts \ncolnames_chemical_shift_part1=sapply(colnames(chemical_shift_clean),function(x)substr(x,1,nchar(x)-2))\ncolnames_chemical_shift_part2=round(colMeans(chemical_shift_clean,na.rm=T),3)\ncolnames_chemical_shift=paste(colnames_chemical_shift_part1,' - chemical shift (',colnames_chemical_shift_part2,' ppm)',sep='')\ncolnames(chemical_shift_clean)=colnames_chemical_shift\n\n#Choosing for every metabolite the signal with lowest number of NAs, and removing the TSP quntification \nind=c()\ndef=sapply(colnames(quantification_clean),function(x)substr(x,1,nchar(x)-2))\ndef2=which(duplicated(def)==F)\ndef4=apply(quantification_clean,2,function(x)length(which(is.na(x))))\nfor (i in def2) {\n  def3=which(def==def[i])\n  ind=c(ind,def3[which.min(def4[def3])])\n}\nquantification_clean=quantification_clean[,ind]\nquantification_clean=quantification_clean[,-1]\n\n#Preparing specific colnames for metabolite quantifications \ncolnames_quantification=sapply(colnames(quantification_clean),function(x)substr(x,1,nchar(x)-2))\ncolnames_quantification=paste(colnames_quantification,'quantification',sep=' - ')\ncolnames(quantification_clean)=colnames_quantification\n\n#Merging both quantification and  chemical shift datasets \ncombined_mtbls374=as.data.frame(cbind(quantification_clean,chemical_shift_clean))\n#Imputing NAs, centering, scaling and converting to data frame\nset.seed(1);combined_mtbls374=missForest(data.matrix(combined_mtbls374))$ximp\ncombined_mtbls374=as.data.frame(scale(combined_mtbls374,center=T,scale=T))\n\n#Choose trianing and testing samples\nset.seed(1);samples <- sample(nrow(combined_mtbls374), nrow(combined_mtbls374) * .5)\n\n\nclassification_data=matrix(NA,3,3)\ncolnames(classification_data)=c(\"Both kinds of information\",\"Quantification information\",\"Chemical shift information\")\nrownames(classification_data)=c(\"Accuracy\", \"kappa\", \"AUROC\")\nvariable_importance=as.data.frame(matrix(NA,25,4))\n\nset.seed(1)\n\n\n#Both kinds of information\ndataset <- combined_mtbls374\ndataset$sample_type=factor(make.names(metadata))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[,1]=c(confusionMatrix$overall[1:2],result.roc1[1])\n#Variable importance information\nvariable_importance_subset=data.frame(round(varImp(plsFit)$importance,3))\nvariable_importance_subset=variable_importance_subset[order(abs(variable_importance_subset[,1]),decreasing=T)[1:25],1,drop=F]\nvariable_importance[,1:2]=cbind(rownames(variable_importance_subset),variable_importance_subset)\n\n#Only quantification information\ndataset <- combined_mtbls374[,1:ncol(quantification_clean)]\ndataset$sample_type=factor(make.names(metadata))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[,2]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Only chemical shift information\ndataset <- combined_mtbls374[,(ncol(quantification_clean)+1):ncol(combined_mtbls374)]\ndataset$sample_type=factor(make.names(metadata))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[,3]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\nwrite.csv(round(classification_data,3),file=\"classification_data_mtbls374.csv\")\n\n\n#Quantification information and three most important variables\ndataset <- combined_mtbls374[,c(1:ncol(quantification_clean),ncol(quantification_clean)+ order(varImp(plsFit)$importance,decreasing=T)[1:3])]\ndataset$sample_type=factor(make.names(metadata))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nc(confusionMatrix$overall[1:2],result.roc1[1])\n#Variable importance information\nvariable_importance_subset=data.frame(round(varImp(plsFit)$importance,3))\nvariable_importance_subset=variable_importance_subset[order(abs(variable_importance_subset[,1]),decreasing=T)[1:25],1,drop=F]\nvariable_importance[,3:4]=cbind(rownames(variable_importance_subset),variable_importance_subset)\nvariable_importance[,c(2,4)]=round(variable_importance[,c(2,4)],3)\nwrite.csv(variable_importance,file=\"variable_importance_mtbls374.csv\")\n\n\n###WORKFLOW FOR MTBLS237 DATASET\nset.seed(1)\n\n#Reading outputted profiling information (quantification quantification, chemical shift and quality indicators) of MTBLS374 dataset\nchemical_shift <- data.matrix(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS237/data_analysis/MTBLS237_example/shift.csv\")[,-1])\nfitting_error <- data.matrix(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS237/data_analysis/MTBLS237_example/fitting_error.csv\")[,-1])\nsignal_area_ratio <- data.matrix(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS237/data_analysis/MTBLS237_example/signal_area_ratio.csv\")[,-1])\nquantification=data.matrix(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS237/data_analysis/MTBLS237_example/quantification.csv\")[,-1])\n\n\n#Removing all NA columns and converting quantifications with suboptimal quality indicatiors into NA values.\nind=which(is.na(colSums(fitting_error)))\nquantification[signal_area_ratio<3]=NA\nquantification[,-ind][fitting_error[,-ind]>0.15]=NA\nchemical_shift[signal_area_ratio<3]=NA\nchemical_shift[,-ind][fitting_error[,-ind]>0.15]=NA\nchemical_shift[chemical_shift==Inf]=NA\n\n#Reading metadata\nmetadata <- factor(as.vector(as.data.frame(read_csv(\"C:/Bruker/TopSpin3.2/data/MTBLS237/data_analysis/Metadata.csv\"))[,3]))\n\n#Converting outliers for each signal for every group (smoker vs non-smoker) into NA\nfor (j in unique(metadata)) {\n  for (i in seq(ncol(quantification))) {\n    quantification[(quantification[which(metadata==j),i] %in% boxplot.stats(quantification[which(metadata==j),i])$out),i]=NA\n  }\n  for (i in seq(ncol(chemical_shift))) {\n    chemical_shift[(chemical_shift[which(metadata==j),i] %in% boxplot.stats(chemical_shift[which(metadata==j),i])$out),i]=NA\n  }\n}\n\n#Remvoving signals with too many NA values\nind=apply(quantification,2,function(x)length(which(is.na(x))))\nquantification_clean=quantification[,ind<30]\nind=apply(chemical_shift,2,function(x)length(which(is.na(x))))\nchemical_shift_clean=chemical_shift[,ind<30]\n\n#Preparing specific colnames for signal chemical shifts \ncolnames_chemical_shift_part1=sapply(colnames(chemical_shift_clean),function(x)substr(x,1,nchar(x)-2))\ncolnames_chemical_shift_part2=round(colMeans(chemical_shift_clean,na.rm=T),3)\ncolnames_chemical_shift=paste(colnames_chemical_shift_part1,' - chemical shift (',colnames_chemical_shift_part2,' ppm)',sep='')\ncolnames(chemical_shift_clean)=colnames_chemical_shift\n\n#Choosing for every metabolite the signal with lowest number of NAs, and removing the TSP quntification \nind=c()\ndef=sapply(colnames(quantification_clean),function(x)substr(x,1,nchar(x)-2))\ndef2=which(duplicated(def)==F)\ndef4=apply(quantification_clean,2,function(x)length(which(is.na(x))))\nfor (i in def2) {\n  def3=which(def==def[i])\n  ind=c(ind,def3[which.min(def4[def3])])\n}\nquantification_clean=quantification_clean[,ind]\nquantification_clean=quantification_clean[,-1]\n\n#Preparing specific colnames for metabolite quantifications \ncolnames_quantification=sapply(colnames(quantification_clean),function(x)substr(x,1,nchar(x)-2))\ncolnames_quantification=paste(colnames_quantification,'quantification',sep=' - ')\ncolnames(quantification_clean)=colnames_quantification\n\n#Merging both quantification and  chemical shift datasets \ncombined_mtbls237=as.data.frame(cbind(quantification_clean,chemical_shift_clean))\n\n#Imputing NAs, centering, scaling and converting to data frame\nset.seed(1);combined_mtbls237=missForest(data.matrix(combined_mtbls237))$ximp\ncombined_mtbls237=as.data.frame(scale(combined_mtbls237,center=T,scale=T))\n\n#Cleaning of data and of metadata of two indeterminate samples\ncombined_mtbls237=combined_mtbls237[-which(metadata==4),]\nmetadata=droplevels(metadata[-which(metadata==4)])\n\n#Prepare classification information and variable importance matrix\nclassification_data=matrix(NA,9,3)\ncolnames(classification_data)=c(\"Both kinds of information\",\"Quantification information\",\"Chemical shift information\")\nrownames(classification_data)=rep(c(\"Accuracy\", \"kappa\", \"AUROC\"),3)\nvariable_importance=as.data.frame(matrix(NA,25,6))\n\nset.seed(1)\n\n#Selection of only control and UC samples and subset in training and testing samples\nselected_kinds_samples=which(metadata!=3)\nset.seed(1);samples <- sample(length(selected_kinds_samples), length(selected_kinds_samples) * .5)\n\n#Both kinds of information\ndataset <- combined_mtbls237[selected_kinds_samples,]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[1:3,1]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Variable importance information\nvariable_importance_subset=data.frame(round(varImp(plsFit)$importance,3))\nvariable_importance_subset=variable_importance_subset[order(abs(variable_importance_subset[,1]),decreasing=T)[1:25],1,drop=F]\nvariable_importance[,1:2]=cbind(rownames(variable_importance_subset),variable_importance_subset)\n\n#Only quantification information\ndataset <- combined_mtbls237[selected_kinds_samples,1:ncol(quantification_clean)]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[1:3,2]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Only chemical shift information\ndataset <- combined_mtbls237[selected_kinds_samples,(ncol(quantification_clean)+1):ncol(combined_mtbls237)]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[1:3,3]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Selection of only UC and CD samples and subset in training and testing samples\nselected_kinds_samples=which(metadata!=2)\nsamples <- sample(length(selected_kinds_samples), length(selected_kinds_samples) * .5)\n\n#Both kinds of information\ndataset <- combined_mtbls237[selected_kinds_samples,]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[4:6,1]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Variable importance information\nvariable_importance_subset=data.frame(round(varImp(plsFit)$importance,3))\nvariable_importance_subset=variable_importance_subset[order(abs(variable_importance_subset[,1]),decreasing=T)[1:25],1,drop=F]\nvariable_importance[,3:4]=cbind(rownames(variable_importance_subset),variable_importance_subset)\n\n#Only quantification information\ndataset <- combined_mtbls237[selected_kinds_samples,1:ncol(quantification_clean)]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[4:6,2]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Only chemical shift information\ndataset <- combined_mtbls237[selected_kinds_samples,(ncol(quantification_clean)+1):ncol(combined_mtbls237)]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[4:6,3]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Selection of only UC and CD samples and subset in training and testing samples\nselected_kinds_samples=which(metadata!=1)\nsamples <- sample(length(selected_kinds_samples), length(selected_kinds_samples) * .5)\n\n#Both kinds of information\ndataset <- combined_mtbls237[selected_kinds_samples,]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[7:9,1]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Variable importance information\nvariable_importance_subset=data.frame(round(varImp(plsFit)$importance,3))\nvariable_importance_subset=variable_importance_subset[order(abs(variable_importance_subset[,1]),decreasing=T)[1:25],1,drop=F]\nvariable_importance[,5:6]=cbind(rownames(variable_importance_subset),variable_importance_subset)\n\n#Only quantification information\ndataset <- combined_mtbls237[selected_kinds_samples,1:ncol(quantification_clean)]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[7:9,2]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n#Only chemical shift information\ndataset <- combined_mtbls237[selected_kinds_samples,(ncol(quantification_clean)+1):ncol(combined_mtbls237)]\ndataset$sample_type=factor(make.names(metadata[selected_kinds_samples]))\nset.seed(1);plsFit <- train(sample_type ~ .,data = dataset[samples,],method = \"pls\",tuneLength = 4,trControl = ctrl)\nset.seed(1);result.roc1=apply(predict(plsFit, dataset[-samples,],type=\"prob\"),2,function(x)roc(dataset$sample_type[-samples], x)$auc)\nset.seed(1);confusionMatrix=confusionMatrix(predict(plsFit, dataset[-samples,]), dataset$sample_type[-samples])\nclassification_data[7:9,3]=c(confusionMatrix$overall[1:2],result.roc1[1])\n\n\n\n\nwrite.csv(round(classification_data,3),file=\"classification_data_mtbls237.csv\")\n\nvariable_importance[,c(2,4,6)]=round(variable_importance[,c(2,4,6)],3)\nwrite.csv(variable_importance,file=\"variable_importance_mtbls237.csv\")\n",
    "created" : 1506238993753.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2703607020",
    "id" : "34A8B2DA",
    "lastKnownWriteTime" : 1504628421,
    "last_content_update" : 1504628421,
    "path" : "C:/Users/Usuario/Downloads/chemical_shift_classification_workflow.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 17,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}