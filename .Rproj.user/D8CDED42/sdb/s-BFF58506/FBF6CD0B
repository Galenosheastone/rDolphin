{
    "collab_server" : "",
    "contents" : "library(keras)\nmnist <- dataset_mnist()\nx_train <- mnist$train$x\ny_train <- mnist$train$y\nx_test <- mnist$test$x\ny_test <- mnist$test$y\n\n  # reshape\n  dim(x_train) <- c(nrow(x_train), 784)\ndim(x_test) <- c(nrow(x_test), 784)\n# rescale\nx_train <- x_train / 255\nx_test <- x_test / 255\n\n  y_train <- to_categorical(y_train, 10)\ny_test <- to_categorical(y_test, 10)\n\n  model <- keras_model_sequential()\nmodel %>%\n  layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%\n  layer_dropout(rate = 0.4) %>%\n  layer_dense(units = 128, activation = 'relu') %>%\n  layer_dropout(rate = 0.3) %>%\n  layer_dense(units = 10, activation = 'softmax')\n\n  summary(model)\n\n  model %>% compile(\n    loss = 'categorical_crossentropy',\n    optimizer = optimizer_rmsprop(),\n    metrics = c('accuracy')\n  )\n\n    history <- model %>% fit(\n      x_train, y_train,\n      epochs = 30, batch_size = 128,\n      validation_split = 0.2\n    )\n\n    plot(history)\n\n\n\n    library(tsne)\n\n\n    ## Not run:\n    colors = rainbow(length(unique(iris$Species)))\n    names(colors) = unique(iris$Species)\n    ecb = function(x,y){ plot(x,t='n'); text(x,labels=iris$Species, col=colors[iris$Species]) }\n    tsne_iris = tsne(iris[,1:4], epoch_callback = ecb, perplexity=50)\n\n    # compare to PCA\n    dev.new()\n    pca_iris = princomp(iris[,1:4])$scores[,1:2]\n    plot(pca_iris, t='n')\n    text(pca_iris, labels=iris$Species,col=colors[iris$Species])\n\n    ## End(Not run)\n    ADG_transformed_data <- read_excel(\"C:/Bruker/TopSpin3.2/data/MTBLS1/ADG_transformed_data.xlsx\")\n   ADG_transformed_data$`Primary ID`=NULL\n    ADG_transformed_data$Species=factor(rep(c(1,2),c(48,84)))\n    ## Not run:\n    colors = rainbow(length(unique(ADG_transformed_data$Species)))\n    names(colors) = unique(ADG_transformed_data$Species)\n    ecb = function(x,y){ plot(x,t='n'); text(x,labels=ADG_transformed_data$Species, col=colors[ADG_transformed_data$Species]) }\n    tsne_ADG_transformed_data = tsne(ADG_transformed_data[,-189], epoch_callback = ecb, perplexity=50)\n\n    # compare to PCA\n    dev.new()\n    pca_ADG_transformed_data = prcomp(ADG_transformed_data[,-189])$x[,1:2]\n    plot(pca_ADG_transformed_data, t='n')\n    text(pca_ADG_transformed_data, labels=ADG_transformed_data$Species,col=colors[ADG_transformed_data$Species])\n\n    ## End(Not run)\n    shift3=data.frame(y=ADG_transformed_data$Species,tsne_ADG_transformed_data)\n    ranger::ranger(y~.,data=shift3)\n\n    shift3=data.frame(y=ADG_transformed_data$Species,pca_ADG_transformed_data)\n    ranger::ranger(y~.,data=shift3)\n\n    #####\n\n\n    ## Not run:\n    # quantification_clean=quantification_clean[-which(metadata==4),]\n    # metadata=droplevels(metadata[-which(metadata==4)])\n    #\n    quantification_clean=scale(missForest::missForest(quantification_clean)$ximp)\n\n    colors = rainbow(length(unique(metadata)))\n    names(colors) = unique(metadata)\n    ecb = function(x,y){ plot(x,t='n'); text(x,labels=metadata, col=colors[metadata]) }\n    tsne_ADG_transformed_data = tsne(quantification_clean, epoch_callback = ecb, perplexity=50)\n\n    # compare to PCA\n    dev.new()\n    pca_ADG_transformed_data = prcomp(quantification_clean)$x[,1:2]\n    plot(pca_ADG_transformed_data, t='n')\n    text(pca_ADG_transformed_data, labels=metadata,col=colors[metadata])\n\n    ## End(Not run)\n    shift3=data.frame(y=metadata,tsne_ADG_transformed_data)\n    ranger::ranger(y~.,data=shift3)\n\n    shift3=data.frame(y=metadata,pca_ADG_transformed_data)\n    ranger::ranger(y~.,data=shift3)\n\n\n\n\n\n\n    datas=as.matrix(ADG_transformed_data[,-189]/max(ADG_transformed_data[,-189]))\n    y_train <- to_categorical(rep(c(0,1),c(48,84)), 2)\n\n    model <- keras_model_sequential()\n    model %>%\n      layer_dense(units = 40, activation = 'relu', input_shape = c(188)) %>%\n      layer_dropout(rate = 0.4) %>%\n      layer_dense(units = 20, activation = 'relu') %>%\n      layer_dropout(rate = 0.3) %>%\n      layer_dense(units = 2, activation = 'softmax')\n\n    summary(model)\n\n    model %>% compile(\n      loss = 'categorical_crossentropy',\n      optimizer = optimizer_rmsprop(),\n      metrics = c('accuracy')\n    )\n\n    history <- model %>% fit(\n      datas,y_train,\n      epochs = 30, batch_size = 40,\n      validation_split = 0.2\n    )\n\n    plot(history)\nsamples=sample(132,66)\n    shift3=data.frame(y=factor(rep(c(0,1),c(48,84))),datas)\n    ranger::ranger(y~.,data=shift3[-samples,])\n    ab=predict(ranger::ranger(y~.,data=shift3[-samples,]),shift3[samples,])\n\n",
    "created" : 1506237638143.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1874884280",
    "id" : "FBF6CD0B",
    "lastKnownWriteTime" : 1505918993,
    "last_content_update" : 1505918993,
    "path" : "C:/Users/Usuario/Downloads/tnse_blog_idea.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 13,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}