miss=missForest(data.matrix(combined_mtbls237))$ximp
lel=which(metadata!=2)
samples <- sample(length(lel), length(lel) * .5)
# samples=lel[dum]
confdata=matrix(NA,3,3)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
lal=confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
confdata[1,]=c(lal$overall[1:2],result.roc1[1])
lal
lel=which(metadata!=2)
miss2=scale(cbind(aa$dataset[,-2138]),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
lel=which(metadata!=2)
miss2=scale(cbind(aa$dataset[,-2138],love),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
plot(aa$dataset[1,])
aa$ppm[500:600]
aa=import_data("C:\\Bruker\\TopSpin3.2\\data\\MTBLS237\\data_analysis\\Parameters_MTBLS237_fingerprinting.csv")
plot(aa$dataset[1,])
lel=which(metadata!=2)
miss2=scale(cbind(aa$dataset[,-ncol(aa$dataset)]),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
lel=which(metadata!=2)
miss2=scale(cbind(aa$dataset[,-ncol(aa$dataset)],love),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
ncol(aa$dataset)
ncol(miss2)
varImp(plsFitIris)
varImp(plsFitIris)$importance
order(abs(tel[,1]),decreasing=T)[1:25]
tel=data.frame(round(varImp(plsFitIris)$importance,3))
order(abs(tel[,1]),decreasing=T)[1:25]
cal=order(abs(tel[,1]),decreasing=T)[1:25]
lel=which(metadata!=2)
miss2=scale(cbind(aa$dataset[,cal],love),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
lel=which(metadata!=2)
miss2=scale(cbind(aa$dataset[,cal]),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
lel=which(metadata!=2)
miss2=scale(cbind(aa$dataset[,cal],love),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
lel=which(metadata!=2)
miss2=scale(cbind(love),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
lel=which(metadata!=3)
miss2=scale(cbind(aa$dataset[,-ncol(aa$dataset)],love),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
lel=which(metadata!=3)
miss2=scale(cbind(aa$dataset[,-ncol(aa$dataset)]),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
tel=data.frame(round(varImp(plsFitIris)$importance,3))
cal=order(abs(tel[,1]),decreasing=T)[1:25]
lel=which(metadata!=3)
miss2=scale(cbind(aa$dataset[,cal],love),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
lel=which(metadata!=3)
miss2=scale(cbind(aa$dataset[,-ncol(aa$dataset)],love),center=T,scale=T)
iris <- as.data.frame(miss2[lel,])
iris$Species=factor(make.names(metadata[lel]))
plsFitIris <- train(Species ~ .,data = iris[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
result.roc1=apply(predict(plsFitIris, iris[-samples,],type="prob"),2,function(x)roc(iris$Species[-samples], x)$auc)
confusionMatrix(predict(plsFitIris, iris[-samples,]), iris$Species[-samples])
tel=data.frame(round(varImp(plsFitIris)$importance,3))
tel
varImp(plsFitIris)
load("C:/Bruker/TopSpin3.2/data/MTBLS1/data analysis/MTBLS1_paper.RData")
View(cor(savedreactivedata$final_output$quantification,use='pairwise.complete.obs',method='spearman'))
library(rDolphin)
aa=import_data("C:\\Bruker\\TopSpin3.2\\data\\MTBLS237\\data_analysis\\Parameters_MTBLS237_fingerprinting.csv")
aa=import_data("C:\\Bruker\\TopSpin3.2\\data\\MTBLS237\\data_analysis\\Parameters_MTBLS237_fingerprinting.csv")
repository=data.frame(data.table::fread(file.path(system.file(package = "rDolphin"),"extdata","HMDB_Repository.csv")))
library(rDolphin)
aa=import_data("C:\\Bruker\\TopSpin3.2\\data\\MTBLS237\\data_analysis\\Parameters_MTBLS237_fingerprinting.csv")
aa=import_data("C:\\Bruker\\TopSpin3.2\\data\\MTBLS237\\data_analysis\\Parameters_MTBLS237_fingerprinting.csv")
biofluid_column=which(gsub(' conc.','',colnames(repository))==biofluid)
colnames(repository)
library(rDolphin)
aa=import_data("C:\\Bruker\\TopSpin3.2\\data\\MTBLS237\\data_analysis\\Parameters_MTBLS237_fingerprinting.csv")
View(repository)
library(XML)
ab=readLines("C:/Users/Usuario/Downloads/hmdb_metabolites/hmdb_metabolites.xml")
library(XML)
ab=readLines("C:/Users/Usuario/Downloads/hmdb_metabolites/hmdb_metabolites.xml")
end=which(ab=="</metabolite>")
beg=which(ab=="<metabolite>")
schei=c('Blood','Urine','Feces','Saliva','Cerebrospinal Fluid (CSF)','Amniotic Fluid','Aqueous Humour','Ascites Fluid','Breast Milk','Lymph','Sweat','Tears')
sequence=c(seq(1,length(beg),100),length(beg)+1)
tt=ttt=matrix(0,0,12)
name=c()
for (jj in seq((length(sequence)-1))) {
ac=ab[c(1,2,beg[sequence[jj]]:end[sequence[(jj+1)]-1],length(ab))]
tree <- xmlTreeParse(ac)
root <- xmlRoot(tree)
acquisition <- xmlElementsByTagName(root, "metabolite", recursive = TRUE)
for (i in 1:50) {
name=c(name,xmlValue(xmlElementsByTagName(acquisition[[i]], "accession")[[1]]))
acquisition2 <- xmlElementsByTagName(acquisition[[i]], "normal_concentrations")
acq=sapply(xmlElementsByTagName(acquisition2[[1]], "biofluid",recursive = T),xmlValue)
acq2=sapply(xmlElementsByTagName(acquisition2[[1]], "concentration_value",recursive = T),xmlValue)
acq2=as.numeric(sapply(acq2,function(x) tryCatch(strsplit(x, "[^0-9|.]+")[[1]][1],error=function(e) NA)))
# acq3=sapply(xmlElementsByTagName(acquisition2[[1]], "subject_age",recursive = T),xmlValue)
# acq4=sapply(xmlElementsByTagName(acquisition2[[1]], "subject_sex",recursive = T),xmlValue)
# which(acq3=='Adult (>18 years old)')
# which(acq4=='Both)
tt=rbind(tt,rep(0,12))
ttt=rbind(ttt,rep(0,12))
lol=which(schei %in% unique(acq)==T)
for (iii in lol) {
tt[nrow(tt),iii]=mean(acq2[which(acq==schei[iii])],na.rm=T)
ttt[nrow(ttt),iii]=length(which(acq==schei[iii]))
}}
}
View(ttt)
View(tt)
View(ttt)
Repository_29112016 <- as.data.frame(read_csv("~/Repository/Repository_29112016.csv"))
Repository=cbind(Repository_29112016,matrix(NA,nrow(Repository_29112016),12))
colnames(Repository)[13:24]=c('Blood conc.','Urine conc.','Feces conc.','Saliva conc.','Cerebrospinal Fluid (CSF) conc.','Amniotic Fluid conc.','Aqueous Humour conc.','Ascites Fluid conc.','Breast Milk conc.','Lymph conc.','Sweat conc.','Tears conc.')
colnames(Repository)[25:36]=c('Blood times','Urine times','Feces times','Saliva times','Cerebrospinal Fluid (CSF) times','Amniotic Fluid times','Aqueous Humour times','Ascites Fluid times','Breast Milk times','Lymph times','Sweat times','Tears times')
library(readr)
Repository_29112016 <- as.data.frame(read_csv("~/Repository/Repository_29112016.csv"))
Repository=cbind(Repository_29112016,matrix(NA,nrow(Repository_29112016),12))
colnames(Repository)[13:24]=c('Blood conc.','Urine conc.','Feces conc.','Saliva conc.','Cerebrospinal Fluid (CSF) conc.','Amniotic Fluid conc.','Aqueous Humour conc.','Ascites Fluid conc.','Breast Milk conc.','Lymph conc.','Sweat conc.','Tears conc.')
colnames(Repository)[25:36]=c('Blood times','Urine times','Feces times','Saliva times','Cerebrospinal Fluid (CSF) times','Amniotic Fluid times','Aqueous Humour times','Ascites Fluid times','Breast Milk times','Lymph times','Sweat times','Tears times')
for (i in seq_along(name)) {
ind=which(Repository[,2]==name[i])
Repository[ind,13:36]=c(tt[i,],ttt[i,])
}
View(Repository)
ind
c(tt[i,],ttt[i,])
Repository[ind,13:36]=c(tt[i,],ttt[i,])
View(Repository_29112016)
i=1
c(tt[i,],ttt[i,])
ind
t(replicate(length(ind),c(tt[i,],ttt[i,]))
t(replicate(length(ind),c(tt[i,],ttt[i,])))
t(replicate(4,c(tt[i,],ttt[i,])))
library(MALDIquant)
data("fiedler2009subset", package="MALDIquant")
b <- removeBaseline(fiedler2009subset)
calibrateIntensity(b, method="TIC")
calibrateIntensity(b, method="TIC", range=c(3000, 5000))
library("MALDIquant")
## create a MassSpectrum object by default constructor
s <- createMassSpectrum(mass=1:100, intensity=rnorm(100)^2,
metaData=list(name="example"))
## show some details
s
## plot spectrum
plot(s)
## get TIC
totalIonCurrent(s)
## modify intensity and metaData
intensity(s)[1:50] <- 0
metaData(s) <- list(name="modified example")
## plot again
plot(s)
sum(s@intensity)
library("MALDIquant")
## create a MassSpectrum object by default constructor
s <- createMassSpectrum(mass=1:100, intensity=rnorm(100)^2,
metaData=list(name="example"))
## show some details
s
## plot spectrum
plot(s)
## get TIC
sum(s)
library("MALDIquant")
## create a MassSpectrum object by default constructor
s <- createMassSpectrum(mass=1:100, intensity=rnorm(100)^2,
metaData=list(name="example"))
## show some details
sum(s)
## plot spectrum
plot(s)
## get TIC
sum(s)
library("MALDIquant")
## create a MassSpectrum object by default constructor
s <- createMassSpectrum(mass=1:100, intensity=rnorm(100)^2,
metaData=list(name="example"))
## show some details
sum(s@intensity)
## plot spectrum
plot(s)
## get TIC
sum(s)
library("MALDIquant")
## create a MassSpectrum object by default constructor
s <- createMassSpectrum(mass=1:100, intensity=rnorm(100)^2,
metaData=list(name="example"))
## show some details
sum(s@intensity)
totalIonCurrent(s)
library("devtools")
install_github("sgibb/MALDIquantExamples")
data(fiedler2009subset)
spectra <- transformIntensity(fiedler2009subset, method="sqrt")
spectra <- smoothIntensity(spectra, method="SavitzkyGolay",halfWindowSize=10)
baseline <- estimateBaseline(spectra[[16]], method="SNIP",iterations=100)
spectra <- removeBaseline(spectra, method="SNIP",iterations=100)
spectra <- calibrateIntensity(spectra, method="TIC")
spectra <- alignSpectra(spectra,halfWindowSize=20,SNR=2,tolerance=0.002,warpingMethod="lowess")
samples <- factor(sapply(spectra,function(x)metaData(x)$sampleName))
avgSpectra <- averageMassSpectra(spectra, labels=samples,method="mean")
peaks <- detectPeaks(avgSpectra, method="MAD", halfWindowSize=20, SNR=2)
peaks <- binPeaks(peaks, tolerance=0.002)
peaks <- filterPeaks(peaks, minFrequency=0.25)
featureMatrix <- intensityMatrix(peaks, avgSpectra)
View(featureMatrix)
fivenum(apply(featureMatrix,2,function(x)sd(x)/mean(x)))
data(fiedler2009subset)
spectra <- transformIntensity(fiedler2009subset, method="sqrt")
spectra <- smoothIntensity(spectra, method="SavitzkyGolay",halfWindowSize=10)
baseline <- estimateBaseline(spectra[[16]], method="SNIP",iterations=100)
spectra <- removeBaseline(spectra, method="SNIP",iterations=100)
spectra <- calibrateIntensity(spectra, method="PQN")
spectra <- alignSpectra(spectra,halfWindowSize=20,SNR=2,tolerance=0.002,warpingMethod="lowess")
samples <- factor(sapply(spectra,function(x)metaData(x)$sampleName))
avgSpectra <- averageMassSpectra(spectra, labels=samples,method="mean")
peaks <- detectPeaks(avgSpectra, method="MAD", halfWindowSize=20, SNR=2)
peaks <- binPeaks(peaks, tolerance=0.002)
peaks <- filterPeaks(peaks, minFrequency=0.25)
featureMatrix <- intensityMatrix(peaks, avgSpectra)
fivenum(apply(featureMatrix,2,function(x)sd(x)/mean(x)))
plot(spectra[[1]])
hal=lapply(spectra)
hal=lapply(spectra,function(x)x)
hal=lapply(spectra,function(x)x@intensity)
hal=sapply(spectra,function(x)x@intensity)
plot(hal[,1])
plot(hal[,1],type='l')
plot(spectra[[1]])
apply(featureMatrix[,1:3],2,function(x)sd(x)/mean(x))
peaks <- detectPeaks(spectra, method="MAD", halfWindowSize=20, SNR=2)
peaks <- binPeaks(peaks, tolerance=0.002)
peaks <- filterPeaks(peaks, minFrequency=0.25)
intensityMatrix(peaks, spectra)
peaks <- detectPeaks(spectra, method="MAD", halfWindowSize=20, SNR=2)
peaks <- binPeaks(peaks, tolerance=0.002)
peaks <- filterPeaks(peaks, minFrequency=0.25)
dim(intensityMatrix(peaks, spectra))
peaks <- detectPeaks(spectra, method="MAD", halfWindowSize=20, SNR=2)
peaks <- binPeaks(peaks, tolerance=0.002)
peaks <- filterPeaks(peaks, minFrequency=0.25)
featureMatrix <- intensityMatrix(peaks, spectra)
fivenum(apply(featureMatrix,2,function(x)sd(x)/mean(x)))
fel2=hal
fel3=featureMatrix[,1]
fr3 <- function(x1) {   ## Rosenbrock Banana function
# cor(sort(abs(cor(fel2/x1,fel3/x1,use='pairwise.complete.obs',method='spearman'))),sort(abs(cor(fel2/x1,rnorm(146),method='spearman'))))
cor(sort(abs(cor(fel2/x1,fel3/x1))),sort(abs(cor(fel2/x1,rnorm(146)))))
}
tr3=optim(rep(1,nrow(fel2)), fr3,method="L-BFGS-B",lower=rep(0.8,nrow(fel2)),upper=rep(1.2,nrow(fel2)))
fel2=hal
fel3=featureMatrix[,1]
fr3 <- function(x1) {   ## Rosenbrock Banana function
# cor(sort(abs(cor(fel2/x1,fel3/x1,use='pairwise.complete.obs',method='spearman'))),sort(abs(cor(fel2/x1,rnorm(146),method='spearman'))))
cor(sort(abs(cor(fel2/x1,fel3/x1))),sort(abs(cor(fel2/x1,rnorm(16)))))
}
tr3=optim(rep(1,nrow(fel2)), fr3,method="L-BFGS-B",lower=rep(0.8,nrow(fel2)),upper=rep(1.2,nrow(fel2)))
cor(sort(abs(cor(fel2,fel3))),sort(abs(cor(fel2,rnorm(16)))))
fel2=t(hal)
fel3=featureMatrix[,1]
fr3 <- function(x1) {   ## Rosenbrock Banana function
# cor(sort(abs(cor(fel2/x1,fel3/x1,use='pairwise.complete.obs',method='spearman'))),sort(abs(cor(fel2/x1,rnorm(146),method='spearman'))))
cor(sort(abs(cor(fel2/x1,fel3/x1))),sort(abs(cor(fel2/x1,rnorm(16)))))
}
tr3=optim(rep(1,nrow(fel2)), fr3,method="L-BFGS-B",lower=rep(0.8,nrow(fel2)),upper=rep(1.2,nrow(fel2)))
tr3$par
fel2=t(hal[sample(42388,1000),])
fel3=featureMatrix[,1]
fr3 <- function(x1) {   ## Rosenbrock Banana function
# cor(sort(abs(cor(fel2/x1,fel3/x1,use='pairwise.complete.obs',method='spearman'))),sort(abs(cor(fel2/x1,rnorm(146),method='spearman'))))
cor(sort(abs(cor(fel2/x1,fel3/x1))),sort(abs(cor(fel2/x1,rnorm(16)))))
}
tr3=optim(rep(1,nrow(fel2)), fr3,method="L-BFGS-B",lower=rep(0.8,nrow(fel2)),upper=rep(1.2,nrow(fel2)))
tr3$par
tr3
fel2=t(hal[sample(42388,1000),])
fel3=featureMatrix[,1]
fr3 <- function(x1) {   ## Rosenbrock Banana function
# cor(sort(abs(cor(fel2/x1,fel3/x1,use='pairwise.complete.obs',method='spearman'))),sort(abs(cor(fel2/x1,rnorm(146),method='spearman'))))
cor(sort(abs(cor(fel2/x1,fel3/x1))),sort(abs(cor(fel2/x1,rnorm(16)))))
}
tr3=optim(rep(1,nrow(fel2)), fr3,method="L-BFGS-B",lower=rep(0.5,nrow(fel2)),upper=rep(2,nrow(fel2)))
tr3
fivenum(apply(featureMatrix,2,function(x)sd(x)/mean(x)))
fivenum(apply(featureMatrix/tr3$par,2,function(x)sd(x)/mean(x)))
library(MALDIquantExamples)
vignettes(MALDIquantexamples)
vignette(MALDIquantexamples)
vignette(MALDIquantExamples)
vignette("MALDIquantExamples")
spectra <- import(getPathFiedler2009()["spectra"],
verbose=FALSE)
spectra <- transformIntensity(spectra, method="sqrt")
spectra <- smoothIntensity(spectra, method="SavitzkyGolay",halfWindowSize=10)
baseline <- estimateBaseline(spectra[[16]], method="SNIP",iterations=100)
spectra <- removeBaseline(spectra, method="SNIP",iterations=100)
spectra <- calibrateIntensity(spectra, method="PQN")
spectra <- alignSpectra(spectra,halfWindowSize=20,SNR=2,tolerance=0.002,warpingMethod="lowess")
samples <- factor(sapply(spectra,function(x)metaData(x)$sampleName))
avgSpectra <- averageMassSpectra(spectra, labels=samples,method="mean")
peaks <- detectPeaks(avgSpectra, method="MAD", halfWindowSize=20, SNR=2)
peaks <- binPeaks(peaks, tolerance=0.002)
peaks <- filterPeaks(peaks, minFrequency=0.25)
featureMatrix <- intensityMatrix(peaks, avgSpectra)
fivenum(apply(featureMatrix,2,function(x)sd(x)/mean(x)))
fel2=t(sapply(spectra,function(x)x@intensity))
fel3=featureMatrix[,1]
fel2=sapply(spectra,function(x)x@intensity)
plot(x@intensity)
plot(spectra[[1]]@intensity)
fel2=lapply(spectra,function(x)x@intensity)
fel2=as.matrix(lapply(spectra,function(x)x@intensity))
dim(fel2)
class(fel2)
plot(fel2[,1])
plot(fel2[1,])
peaks <- detectPeaks(spectra, method="MAD", halfWindowSize=20, SNR=2)
peaks <- binPeaks(peaks, tolerance=0.002)
peaks <- filterPeaks(peaks, minFrequency=0.25)
featureMatrix <- intensityMatrix(peaks, spectra)
fivenum(apply(featureMatrix,2,function(x)sd(x)/mean(x)))
fel2=matrix(NA,length(spectra),length(spectra[[1]]@intensity))
for (i in 1:ncol(fel2))   fel2[i,] =     spectra[[i]]@intensity
length(spectra[[i]]@intensity)
length(spectra[[322]]@intensity)
length(spectra[[320]]@intensity)
fel2=matrix(NA,320,length(spectra[[1]]@intensity))
for (i in 1:ncol(fel2))   fel2[i,] =     spectra[[i]]@intensity
fel2=matrix(NA,320,length(spectra[[1]]@intensity))
for (i in 1:nrow(fel2))   fel2[i,] =     spectra[[i]]@intensity
fivenum(apply(featureMatrix,2,function(x)sd(x)/mean(x)))
peaks <- detectPeaks(spectra, method="MAD", halfWindowSize=20, SNR=2)
peaks <- binPeaks(peaks, tolerance=0.002)
peaks <- filterPeaks(peaks, minFrequency=0.25)
featureMatrix <- intensityMatrix(peaks, spectra)
fivenum(apply(featureMatrix,2,function(x)sd(x)/mean(x)))
dim(featureMatrix)
featureMatrix[1:320,1]
fel3=featureMatrix[1:320,1]
fr3 <- function(x1) {   ## Rosenbrock Banana function
# cor(sort(abs(cor(fel2/x1,fel3/x1,use='pairwise.complete.obs',method='spearman'))),sort(abs(cor(fel2/x1,rnorm(146),method='spearman'))))
cor(sort(abs(cor(fel2/x1,fel3/x1))),sort(abs(cor(fel2/x1,rnorm(16)))))
}
tr3=optim(rep(1,nrow(fel2)), fr3,method="L-BFGS-B",lower=rep(0.8,nrow(fel2)),upper=rep(1.2,nrow(fel2)))
toc=rnorm(240)
fr3 <- function(x1) {   ## Rosenbrock Banana function
# cor(sort(abs(cor(fel2/x1,fel3/x1,use='pairwise.complete.obs',method='spearman'))),sort(abs(cor(fel2/x1,rnorm(146),method='spearman'))))
cor(sort(abs(cor(fel2/x1,fel3/x1))),sort(abs(cor(fel2/x1,toc))))
}
tr3=optim(rep(1,nrow(fel2)), fr3,method="L-BFGS-B",lower=rep(0.8,nrow(fel2)),upper=rep(1.2,nrow(fel2)))
toc=rnorm(320)
fr3 <- function(x1) {   ## Rosenbrock Banana function
# cor(sort(abs(cor(fel2/x1,fel3/x1,use='pairwise.complete.obs',method='spearman'))),sort(abs(cor(fel2/x1,rnorm(146),method='spearman'))))
cor(sort(abs(cor(fel2/x1,fel3/x1))),sort(abs(cor(fel2/x1,toc))))
}
tr3=optim(rep(1,nrow(fel2)), fr3,method="L-BFGS-B",lower=rep(0.8,nrow(fel2)),upper=rep(1.2,nrow(fel2)))
install.packages("roxygen2")
install.packages("knitr")
install.packages("rmarkdown")
?interp2D
?interp2d
library(fields)
?interp.surface.grid
?mclust
remove.packages("mclust", lib="~/R/win-library/3.4")
devtools::install_github("danielcanueto/rDolphin", build_vignettes = TRUE)
devtools::install_github("danielcanueto/rDolphin", build_vignettes = TRUE,force=T)
install.packages("devtools"))
install.packages("devtools")
source("https://bioconductor.org/biocLite.R"); biocLite("MassSpecWavelet")
devtools::install_github("danielcanueto/rDolphin", build_vignettes = TRUE)
install.packages("roxygen2")
library(rDolphin)
rDolphin_GUI()
rDolphin_GUI()
library(rDolphin)
library(rDolphin)
rDolphin_GUI()
dummy=NULL
dummy=tryCatch({roifunc(reactiveprogramdata$ROI_data,reactiveprogramdata$imported_data$Metadata,reactiveprogramdata$imported_data$Experiments)
}, error = function(e) {
print('Generation of Regions of Interest not possible. Please explain the issue in the Github page.')
return(NULL)
})
reactiveprogramdata$ROI_data
reactiveprogramdata$imported_data$Metadata
reactiveprogramdata$imported_data$Experiments
roifunc(reactiveprogramdata$ROI_data,reactiveprogramdata$imported_data$Metadata,reactiveprogramdata$imported_data$Experiments)
library(rDolphin)
rDolphin_GUI()
setwd(file.path(system.file(package = "rDolphin"),"extdata"))
imported_data=import_data("Parameters_MTBLS242_15spectra_5groups.csv")
profile_model=profile_model_spectrum(imported_data,imported_data$ROI_data)
quantification_variables=autorun(imported_data,imported_data$final_output,imported_data$useful_data,imported_data$ROI_data)
write_info('output_info',quantification_variables$final_output,imported_data$ROI_data)
write_plots('',quantification_variables$final_output,imported_data,quantification_variables$useful_data)
validation_data=validation(quantification_variables$final_output,5,imported_data$ROI_data,imported_data$Metadata)
validation_data=validation(quantification_variables$final_output,quantification_variables$final_output,5)
validation_data=validation(quantification_variables$final_output,quantification_variables$alarmmatrix,5)
library(DT)
DT::datatable(round(validation_data$alarmmatrix,4),selection = list(mode = 'single', target = 'cell')) %>% formatStyle(colnames(validation_data$alarmmatrix), backgroundColor = styleInterval(validation_data$brks, validation_data$clrs))
library(DT)
DT::datatable(round(validation_data$shownmatrix,4),selection = list(mode = 'single', target = 'cell')) %>% formatStyle(colnames(validation_data$shownmatrix), backgroundColor = styleInterval(validation_data$brks, validation_data$clrs))
detach("package:DT", unload=TRUE)
DT::datatable(round(validation_data$shownmatrix,4),selection = list(mode = 'single', target = 'cell')) %>% formatStyle(colnames(validation_data$shownmatrix), backgroundColor = styleInterval(validation_data$brks, validation_data$clrs))
DT::datatable(round(validation_data$shownmatrix,4),selection = list(mode = 'single', target = 'cell')) %>% DT::formatStyle(colnames(validation_data$shownmatrix), backgroundColor = styleInterval(validation_data$brks, validation_data$clrs))
library(DT)
datatable(round(validation_data$shownmatrix,4),selection = list(mode = 'single', target = 'cell')) %>% formatStyle(colnames(validation_data$shownmatrix), backgroundColor = styleInterval(validation_data$brks, validation_data$clrs))
pval=p_values(imported_data$dataset,imported_data$Metadata)
pval=p_values(quantification_variables$final_output$quantification,imported_data$Metadata)
type_analysis_plot(quantification_variables$final_output$quantification,quantification_variables$final_output,imported_data,'boxplot')
type_analysis_plot(quantification_variables$final_output$quantification,quantification_variables$final_output,imported_data,'pca')
type_analysis_plot(quantification_variables$final_output$quantification,quantification_variables$final_output,imported_data,'dendrogram_heatmap')
type_analysis_plot(quantification_variables$final_output$shift,quantification_variables$final_output,imported_data,'dendrogram_heatmap')
rDolphin_GUI()
rDolphin_GUI()
devtools::install_github('rstudio/DT@feature/editor')
runApp('~/GitHub/rDolphin/inst/app')
rDolphin_GUI()
save.image("~/GitHub/rDolphin/inst/extdata/MTBLS242_subset_example.RData")
library(rDolphin)
aa=import_data("C:\\Bruker\\TopSpin3.2\\data\\MTBLS237\\data_analysis\\Parameters_MTBLS237.csv")
a=list.files('C:\\Users\\Usuario\\Downloads\\prediction_code',full.names=T)
sapply(list.files('C:\\Users\\Usuario\\Downloads\\prediction_code',full.names=T),source)
MTBLS237_profiling=autorun(aa,aa$final_output,aa$useful_data,aa$ROI_data)
rDolphin_GUI()
load("C:/Users/Usuario/Downloads/data_spectra/MTBLS237.RData")
millorat=autorun_shift_intensity_width(savedreactivedata$imported_data,savedreactivedata$final_output,savedreactivedata$useful_data,savedreactivedata$ROI_data)
library(rDolphin)
millorat=autorun_shift_intensity_width(savedreactivedata$imported_data,savedreactivedata$final_output,savedreactivedata$useful_data,savedreactivedata$ROI_data)
sapply(list.files('~/GitHub/rDolphin/R/',full.names=T),source)
millorat=autorun_shift_intensity_width(savedreactivedata$imported_data,savedreactivedata$final_output,savedreactivedata$useful_data,savedreactivedata$ROI_data)
millorat_trampa=millorat
for (i in millorat$useful_data) {
for (j in millorat$useful_data[[i]]) millorat_trampa$useful_data[[i]][[j]]$ROI_profile = savedreactivedata$useful_data[[i]][[j]]$ROI_profile
}
millorat$useful_data[[1]][[1]]
for (i in seq_along(millorat$useful_data)) {
for (j in seq_along(millorat$useful_data[[i]])) millorat_trampa$useful_data[[i]][[j]]$ROI_profile = savedreactivedata$useful_data[[i]][[j]]$ROI_profile
}
savedreactivedata$useful_data=millorat_trampa$useful_data
savedreactivedata$final_output=millorat_trampa$final_output
save(savedreactivedata,file="C:/Users/Usuario/Downloads/data_spectra/MTBLS1_trampa.RData")
save.image("C:/Users/Usuario/Downloads/data_spectra/rep_mtbls1_prediction.RData")
rDolphin_GUI()
millorat_imputation=autorun_shift_intensity_width_imputation(savedreactivedata$imported_data,savedreactivedata$final_output,savedreactivedata$useful_data,savedreactivedata$ROI_data)
View(cor(millorat_imputation$final_output$quantification,method='spearman'))
View(cor(millorat$final_output$quantification,method='spearman'))
View(cor(millorat$final_output$shift,method='spearman'))
View(cor(millorat_imputation$final_output$shift,method='spearman'))
apply(millorat$fitti)
apply(millorat$final_output$fitting_error,2,median)
View(rbind(apply(millorat$final_output$fitting_error,2,median),apply(millorat_imputation$final_output$fitting_error,2,median)))
runApp('~/GitHub/rDolphin/inst/app')
load("C:/Users/Usuario/Downloads/data_spectra/MTBLS1_trampa.RData")
load("C:/Users/Usuario/Downloads/data_spectra/MTBLS237_trampa.RData")
load("C:/Users/Usuario/Downloads/data_spectra/rep_mtbls1_prediction.RData")
