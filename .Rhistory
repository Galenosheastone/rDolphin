tbl()
})
}
)
)
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
?formatStyle
runApp(
list(
ui = fluidPage(
DT::dataTableOutput("test")
),
server = function(input, output, session) {
tbl <- reactive({
playernumber <- c(40,16,34,13,5,9,22,11)
athlete <- c("John Resetti","Tom Nook","K.K Slider","Tortimer Montcillo","Booker Wright","Gayle Puffpants","Wolfgang Puck","Agent S")
height <- c("5-11", "6-4","5-10","6-7","6-10","6-4","6-8","6-9")
position <- c("Guard","Forward","Forward","Guard","Center","Center","PG","PG")
status <- c("B","S","S","S","S","S","B","B")
roster <- data.frame(playernumber,athlete,height,position,status)
names(roster) <- c("Player Number","Athlete","Height","Position","Status")
# datatable
DT::datatable(roster) %>% formatStyle(1,target="row",color=styleEqual(2:3,c("red","red")))
})
output$test <- DT::renderDataTable({
tbl()
})
}
)
)
runApp('inst/app')
devtools::install_github("h2oai/h2o-3")
install.packages("h2o")
library(h2o)
h2o.init()
votes_path <- system.file("extdata", "housevotes.csv", package="h2o")
votes_hf <- h2o.uploadFile(path = votes_path, header = TRUE)
aml <- h2o.automl(y = "Class", training_frame = votes_hf, max_runtime_secs = 30)
repos <- c("https://h2o-release.s3.amazonaws.com/h2o/rel-turing/9/R", getOption("repos"))
install.packages("h2o", type="source", repos=repos)
repos <- c("https://h2o-release.s3.amazonaws.com/h2o/rel-turing/9/R", getOption("repos"))
install.packages("h2o", type="source", repos=repos)
library(h2o)
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
library(h2o)
install.packages("h2o")
library(h2o)
localH2O = h2o.init()
install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
library("h2o", lib.loc="~/R/win-library/3.4")
remove.packages("h2o", lib="~/R/win-library/3.4")
install.packages("h2o")
library(h2o)
localH2O = h2o.init()
library("h2o", lib.loc="~/R/win-library/3.4")
remove.packages("h2o", lib="~/R/win-library/3.4")
install.packages("h2o")
install.packages("h2o")
library(h2o)
localH2O = h2o.init()
demo(package = .packages(all.available = TRUE))
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("statmod","RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-vapnik/1/R")
library(h2o)
h2o.init()
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("statmod","RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-vapnik/1/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
train <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_train_10k.csv")
test <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_test_5k.csv")
# Identify predictors and response
y <- "response"
x <- setdiff(names(train), y)
# For binary classification, response should be a factor
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
# View the AutoML Leaderboard
lb <- aml@leaderboard
lb
?h2o.automl
votes_path <- system.file("extdata", "housevotes.csv", package="h2o")
votes_hf <- h2o.uploadFile(path = votes_path, header = TRUE)
aml <- h2o.automl(y = "Class", training_frame = votes_hf, max_runtime_secs = 30)
aml@leaderboard
ADG_transformed_data <- read_excel("C:/Bruker/TopSpin3.2/data/MTBLS1/ADG_transformed_data.xlsx")
ADG_transformed_data$`Primary ID`=NULL
library(readxl)
ADG_transformed_data <- read_excel("C:/Bruker/TopSpin3.2/data/MTBLS1/ADG_transformed_data.xlsx")
ADG_transformed_data$`Primary ID`=NULL
ADG_transformed_data$Species=factor(rep(c(1,2),c(48,84)))
samples=sample(132,66)
train <- ADG_transformed_data[samples,]
test <- ADG_transformed_data[-samples,]
# Identify predictors and response
y <- "Species"
x <- setdiff(names(ADG_transformed_data), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
train <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_train_10k.csv")
test <- h2o.importFile("https://s3.amazonaws.com/erin-data/higgs/higgs_test_5k.csv")
train <- as.h2o(ADG_transformed_data[samples,])
test <- as.h2o(ADG_transformed_data[-samples,])
y <- "Species"
x <- setdiff(names(ADG_transformed_data), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
aml@leaderboard
ADG_transformed_data <- read_excel("C:/Bruker/TopSpin3.2/data/MTBLS1/ADG_transformed_data.xlsx")
ADG_transformed_data$`Primary ID`=NULL
ADG_transformed_data=scale(ADG_transformed_data)
ADG_transformed_data$Species=factor(rep(c(1,2),c(48,84)))
samples=sample(132,66)
train <- as.h2o(ADG_transformed_data[samples,])
test <- as.h2o(ADG_transformed_data[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(ADG_transformed_data), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
ADG_transformed_data <- read_excel("C:/Bruker/TopSpin3.2/data/MTBLS1/ADG_transformed_data.xlsx")
ADG_transformed_data$`Primary ID`=NULL
ADG_transformed_data=scale(as.matrix(ADG_transformed_data))
ADG_transformed_data=as.data.frame(scale(as.matrix(ADG_transformed_data)))
ADG_transformed_data <- read_excel("C:/Bruker/TopSpin3.2/data/MTBLS1/ADG_transformed_data.xlsx")
ADG_transformed_data$`Primary ID`=NULL
ADG_transformed_data=as.data.frame(scale(as.matrix(ADG_transformed_data)))
ADG_transformed_data$Species=factor(rep(c(1,2),c(48,84)))
samples=sample(132,66)
train <- as.h2o(ADG_transformed_data[samples,])
test <- as.h2o(ADG_transformed_data[-samples,])
y <- "Species"
x <- setdiff(names(ADG_transformed_data), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
aml@leaderboard
iris.dl <- h2o.deeplearning(x =x, y = y,  training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
iris.dl <- h2o.deeplearning(x =x, y = y,  training_frame = train)
iris.dl
predictions <- h2o.predict(iris.dl, test)
predictions
View(cbind(test$Species,predictions[,1])
View(cbind(test$Species,predictions[,1]))
View(cbind(test$Species,predictions$predict))
predictions$predict
as.vector(predictions$predict)
test$Species
View(cbind(as.vector(test$Species),as.vector(predictions$predict)))
perf <- h2o.performance(iris.dl, test)
h2o.auc(perf)
#Reading outputted profiling information (quantification quantification, chemical shift and quality indicators) of MTBLS374 dataset
chemical_shift <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/shift.csv")[,-1])
fitting_error <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/fitting_error.csv")[,-1])
signal_area_ratio <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/signal_area_ratio.csv")[,-1])
quantification=data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/quantification.csv")[,-1])
#Removing all NA columns and converting quantifications with suboptimal quality indicatiors into NA values.
ind=which(is.na(colSums(fitting_error)))
quantification[signal_area_ratio<3]=NA
quantification[,-ind][fitting_error[,-ind]>0.15]=NA
chemical_shift[signal_area_ratio<3]=NA
chemical_shift[,-ind][fitting_error[,-ind]>0.15]=NA
chemical_shift[chemical_shift==Inf]=NA
#Reading metadata extracted from MTBLS374 website and converting into factor associated with MTBLS profiling dataset
metadata=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
metadata=metadata[which(!is.na(metadata$`Factor Value[smoking status]`)),]
metadata=factor(metadata$`Factor Value[smoking status]`)
#Converting outliers for each signal for every group (smoker vs non-smoker) into NA
for (j in unique(metadata)) {
for (i in seq(ncol(quantification))) {
quantification[(quantification[which(metadata==j),i] %in% boxplot.stats(quantification[which(metadata==j),i])$out),i]=NA
}
for (i in seq(ncol(chemical_shift))) {
chemical_shift[(chemical_shift[which(metadata==j),i] %in% boxplot.stats(chemical_shift[which(metadata==j),i])$out),i]=NA
}
}
#Remvoving signals with too many NA values
ind=apply(quantification,2,function(x)length(which(is.na(x))))
quantification_clean=quantification[,ind<30]
ind=apply(chemical_shift,2,function(x)length(which(is.na(x))))
chemical_shift_clean=chemical_shift[,ind<30]
#Preparing specific colnames for signal chemical shifts
colnames_chemical_shift_part1=sapply(colnames(chemical_shift_clean),function(x)substr(x,1,nchar(x)-2))
colnames_chemical_shift_part2=round(colMeans(chemical_shift_clean,na.rm=T),3)
colnames_chemical_shift=paste(colnames_chemical_shift_part1,' - chemical shift (',colnames_chemical_shift_part2,' ppm)',sep='')
colnames(chemical_shift_clean)=colnames_chemical_shift
#Choosing for every metabolite the signal with lowest number of NAs, and removing the TSP quntification
ind=c()
def=sapply(colnames(quantification_clean),function(x)substr(x,1,nchar(x)-2))
def2=which(duplicated(def)==F)
def4=apply(quantification_clean,2,function(x)length(which(is.na(x))))
for (i in def2) {
def3=which(def==def[i])
ind=c(ind,def3[which.min(def4[def3])])
}
quantification_clean=quantification_clean[,ind]
quantification_clean=quantification_clean[,-1]
#Preparing specific colnames for metabolite quantifications
colnames_quantification=sapply(colnames(quantification_clean),function(x)substr(x,1,nchar(x)-2))
colnames_quantification=paste(colnames_quantification,'quantification',sep=' - ')
colnames(quantification_clean)=colnames_quantification
#Merging both quantification and  chemical shift datasets
combined_mtbls374=as.data.frame(cbind(quantification_clean,chemical_shift_clean))
#Imputing NAs, centering, scaling and converting to data frame
set.seed(1);combined_mtbls374=missForest(data.matrix(combined_mtbls374))$ximp
combined_mtbls374=as.data.frame(scale(combined_mtbls374,center=T,scale=T))
#Choose trianing and testing samples
set.seed(1);samples <- sample(nrow(combined_mtbls374), nrow(combined_mtbls374) * .5)
classification_data=matrix(NA,3,3)
colnames(classification_data)=c("Both kinds of information","Quantification information","Chemical shift information")
rownames(classification_data)=c("Accuracy", "kappa", "AUROC")
variable_importance=as.data.frame(matrix(NA,25,4))
set.seed(1)
#Both kinds of information
library(readr)
library(data.table)
library(mlbench)
library(caret)
library(readxl)
library(missForest)
library(pROC)
ctrl <- trainControl(method = "repeatedcv",
repeats = 20,
classProbs = TRUE)
set.seed(1)
#Reading outputted profiling information (quantification quantification, chemical shift and quality indicators) of MTBLS374 dataset
chemical_shift <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/shift.csv")[,-1])
fitting_error <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/fitting_error.csv")[,-1])
signal_area_ratio <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/signal_area_ratio.csv")[,-1])
quantification=data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/MTBLS374_corregit_4/quantification.csv")[,-1])
#Removing all NA columns and converting quantifications with suboptimal quality indicatiors into NA values.
ind=which(is.na(colSums(fitting_error)))
quantification[signal_area_ratio<3]=NA
quantification[,-ind][fitting_error[,-ind]>0.15]=NA
chemical_shift[signal_area_ratio<3]=NA
chemical_shift[,-ind][fitting_error[,-ind]>0.15]=NA
chemical_shift[chemical_shift==Inf]=NA
#Reading metadata extracted from MTBLS374 website and converting into factor associated with MTBLS profiling dataset
metadata=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
metadata=metadata[which(!is.na(metadata$`Factor Value[smoking status]`)),]
metadata=factor(metadata$`Factor Value[smoking status]`)
#Converting outliers for each signal for every group (smoker vs non-smoker) into NA
for (j in unique(metadata)) {
for (i in seq(ncol(quantification))) {
quantification[(quantification[which(metadata==j),i] %in% boxplot.stats(quantification[which(metadata==j),i])$out),i]=NA
}
for (i in seq(ncol(chemical_shift))) {
chemical_shift[(chemical_shift[which(metadata==j),i] %in% boxplot.stats(chemical_shift[which(metadata==j),i])$out),i]=NA
}
}
#Remvoving signals with too many NA values
ind=apply(quantification,2,function(x)length(which(is.na(x))))
quantification_clean=quantification[,ind<30]
ind=apply(chemical_shift,2,function(x)length(which(is.na(x))))
chemical_shift_clean=chemical_shift[,ind<30]
#Preparing specific colnames for signal chemical shifts
colnames_chemical_shift_part1=sapply(colnames(chemical_shift_clean),function(x)substr(x,1,nchar(x)-2))
colnames_chemical_shift_part2=round(colMeans(chemical_shift_clean,na.rm=T),3)
colnames_chemical_shift=paste(colnames_chemical_shift_part1,' - chemical shift (',colnames_chemical_shift_part2,' ppm)',sep='')
colnames(chemical_shift_clean)=colnames_chemical_shift
#Choosing for every metabolite the signal with lowest number of NAs, and removing the TSP quntification
ind=c()
def=sapply(colnames(quantification_clean),function(x)substr(x,1,nchar(x)-2))
def2=which(duplicated(def)==F)
def4=apply(quantification_clean,2,function(x)length(which(is.na(x))))
for (i in def2) {
def3=which(def==def[i])
ind=c(ind,def3[which.min(def4[def3])])
}
quantification_clean=quantification_clean[,ind]
quantification_clean=quantification_clean[,-1]
#Preparing specific colnames for metabolite quantifications
colnames_quantification=sapply(colnames(quantification_clean),function(x)substr(x,1,nchar(x)-2))
colnames_quantification=paste(colnames_quantification,'quantification',sep=' - ')
colnames(quantification_clean)=colnames_quantification
#Merging both quantification and  chemical shift datasets
combined_mtbls374=as.data.frame(cbind(quantification_clean,chemical_shift_clean))
#Imputing NAs, centering, scaling and converting to data frame
set.seed(1);combined_mtbls374=missForest(data.matrix(combined_mtbls374))$ximp
combined_mtbls374=as.data.frame(scale(combined_mtbls374,center=T,scale=T))
#Choose trianing and testing samples
set.seed(1);samples <- sample(nrow(combined_mtbls374), nrow(combined_mtbls374) * .5)
classification_data=matrix(NA,3,3)
colnames(classification_data)=c("Both kinds of information","Quantification information","Chemical shift information")
rownames(classification_data)=c("Accuracy", "kappa", "AUROC")
variable_importance=as.data.frame(matrix(NA,25,4))
set.seed(1)
dataset <- combined_mtbls374
dataset$sample_type=factor(make.names(metadata))
train <- as.h2o(dataset[samples,])
test <- as.h2o(dataset[-samples,])
y <- "sample_type"
x <- setdiff(names(dataset), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
aml@leaderboard
iris.dl <- h2o.deeplearning(x =x, y = y,  training_frame = train)
perf <- h2o.performance(iris.dl, test)
h2o.auc(perf)
aml@leader
dataset <- combined_mtbls374[,1:ncol(quantification_clean)]
dataset$sample_type=factor(make.names(metadata))
train <- as.h2o(dataset[samples,])
test <- as.h2o(dataset[-samples,])
y <- "sample_type"
x <- setdiff(names(dataset), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
aml@leaderboard
iris.dl <- h2o.deeplearning(x =x, y = y,  training_frame = train)
perf <- h2o.performance(iris.dl, test)
h2o.auc(perf)
set.seed(1);samples <- sample(nrow(combined_mtbls374), nrow(combined_mtbls374) * .5)
#Both kinds of information
dataset <- combined_mtbls374[,1:ncol(quantification_clean)]
dataset$sample_type=factor(make.names(metadata))
train <- as.h2o(dataset[samples,])
test <- as.h2o(dataset[-samples,])
y <- "sample_type"
x <- setdiff(names(dataset), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
aml@leaderboard
iris.dl <- h2o.deeplearning(x =x, y = y,  training_frame = train)
perf <- h2o.performance(iris.dl, test)
h2o.auc(perf)
samples=sample(132,66)
set.seed(1);plsFit <- train(Species ~ .,data = ADG_transformed_data[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
ADG_transformed_data$Species=make.names(factor(rep(c(1,2),c(48,84))))
set.seed(1);plsFit <- train(Species ~ .,data = ADG_transformed_data[samples,],method = "pls",tuneLength = 4,trControl = ctrl)
set.seed(1);result.roc1=apply(predict(plsFit, ADG_transformed_data[-samples,],type="prob"),2,function(x)roc(ADG_transformed_data$Species[-samples], x)$auc)
result.roc1
library(readr)
Mothers_quantification <- read_csv("C:/Bruker/TopSpin3.2/data/RuiSimoes/data_analysis/Mothers_quantification.csv")[,-1]
Mothers_quantification <- read_csv("C:/Bruker/TopSpin3.2/data/RuiSimoes/data_analysis/Mothers_quantification.csv")[,-1]
Mothers_quantification=as.data.frame(scale(as.matrix(Mothers_quantification)))
Mothers_quantification$Species=make.names(factor(rep(c(1,2,3),c(28,25,26))))
samples=sample(132,66)
train <- as.h2o(Mothers_quantification[samples,])
test <- as.h2o(Mothers_quantification[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(Mothers_quantification), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
Mothers_quantification <- read_csv("C:/Bruker/TopSpin3.2/data/RuiSimoes/data_analysis/Mothers_quantification.csv")[,-1]
Mothers_quantification=as.data.frame(scale(as.matrix(Mothers_quantification)))
Mothers_quantification$Species=make.names(factor(rep(c(1,2,3),c(28,25,26))))
samples=sample(79,50)
train <- as.h2o(Mothers_quantification[samples,])
test <- as.h2o(Mothers_quantification[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(Mothers_quantification), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
aml@leaderboard
iris.dl <- h2o.deeplearning(x =x, y = y,  training_frame = train)
perf <- h2o.performance(iris.dl, test)
h2o.auc(perf)
Mothers_quantification <- read_csv("C:/Bruker/TopSpin3.2/data/RuiSimoes/data_analysis/Mothers_quantification.csv")[,-1]
Mothers_quantification=as.data.frame(scale(as.matrix(Mothers_quantification)))
Mothers_quantification$Species=make.names(factor(rep(c(1,2,3),c(28,25,26))))
samples=sample(79,50)
train <- as.h2o(Mothers_quantification[samples,])
test <- as.h2o(Mothers_quantification[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(Mothers_quantification), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
iris.dl <- h2o.deeplearning(x =x, y = y,  training_frame = train)
Mothers_quantification=missFOrest(Mothers_quantification)$ximp
samples=sample(79,50)
train <- as.h2o(Mothers_quantification[samples,])
test <- as.h2o(Mothers_quantification[-samples,])
Mothers_quantification=missForest(Mothers_quantification)$ximp
Mothers_quantification <- read_csv("C:/Bruker/TopSpin3.2/data/RuiSimoes/data_analysis/Mothers_quantification.csv")[,-1]
Mothers_quantification=as.data.frame(scale(as.matrix(Mothers_quantification)))
Mothers_quantification=missForest(Mothers_quantification)$ximp
Mothers_quantification$Species=make.names(factor(rep(c(1,2,3),c(28,25,26))))
samples=sample(79,50)
train <- as.h2o(Mothers_quantification[samples,])
test <- as.h2o(Mothers_quantification[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(Mothers_quantification), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
ADG_transformed_data <- read_excel("C:/Bruker/TopSpin3.2/data/MTBLS1/ADG_transformed_data.xlsx")
ADG_transformed_data$`Primary ID`=NULL
ADG_transformed_data=as.data.frame(scale(as.matrix(ADG_transformed_data)))
ADG_transformed_data$Species=make.names(factor(rep(c(1,2),c(48,84))))
samples=sample(132,66)
train <- as.h2o(ADG_transformed_data[samples,])
test <- as.h2o(ADG_transformed_data[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(ADG_transformed_data), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
library(h2o)
h20.init()
h2o.init()
Mothers_quantification <- read_csv("C:/Bruker/TopSpin3.2/data/RuiSimoes/data_analysis/Mothers_quantification.csv")[,-1]
Mothers_quantification=as.data.frame(scale(as.matrix(Mothers_quantification)))
Mothers_quantification=missForest(Mothers_quantification)$ximp
Mothers_quantification$Species=make.names(factor(rep(c(1,2,3),c(28,25,26))))
samples=sample(79,50)
train <- as.h2o(Mothers_quantification[samples,])
test <- as.h2o(Mothers_quantification[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(Mothers_quantification), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
aml@leaderboard
h2o.shutdown()
Mothers_quantification <- read_csv("C:/Bruker/TopSpin3.2/data/RuiSimoes/data_analysis/Mothers_quantification.csv")[,-1]
Mothers_quantification=as.data.frame(scale(as.matrix(Mothers_quantification)))
Mothers_quantification=missForest(Mothers_quantification)$ximp
Mothers_quantification$Species=make.names(factor(rep(c(1,2,3),c(28,25,26))))
samples=sample(79,50)
train <- as.h2o(Mothers_quantification[samples,])
test <- as.h2o(Mothers_quantification[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(Mothers_quantification), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
aml@leaderboard
iris.dl <- h2o.deeplearning(x =x, y = y,  training_frame = train)
ADG_transformed_data <- read_excel("C:/Bruker/TopSpin3.2/data/MTBLS1/ADG_transformed_data.xlsx")
ADG_transformed_data$`Primary ID`=NULL
ADG_transformed_data=as.data.frame(scale(as.matrix(ADG_transformed_data)))
ADG_transformed_data$Species=make.names(factor(rep(c(1,2),c(48,84))))
samples=sample(132,66)
train <- as.h2o(ADG_transformed_data[samples,])
test <- as.h2o(ADG_transformed_data[-samples,])
# Identify predictors and response
y <- "Species"
x <- setdiff(names(ADG_transformed_data), y)
aml <- h2o.automl(x = x, y = y,
training_frame = train,
leaderboard_frame = test,
max_runtime_secs = 30)
