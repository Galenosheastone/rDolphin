title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",list(range = c(0, 8))
)
p <- plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,10,1), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,0.5,0.05), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
p
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 8)
)
p <- plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,10,1), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,0.5,0.05), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
p
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 12)
)
p <- plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,10,1), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,0.5,0.05), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
p
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 12)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,10,1), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 20)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,10,1), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 20)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,20,2), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 30)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,30,2), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 30)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,30,3), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 20)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,20,2), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 5)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,5,0.5), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 5)
)
az = list(
title = "first y axis",range = c(-1, 5)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,5,0.5), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis=ax, yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 5)
)
az = list(
title = "first y axis",range = c(-1, 5)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,5,0.5), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis=az, yaxis2 = ay,
xaxis = list(title="x")
)
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis",range = c(0, 6)
)
az = list(
title = "first y axis",range = c(-1, 5)
)
plot_ly() %>%
add_lines(x = ~1:11, y = ~seq(0,5,0.5), name = "slope of 10") %>%
add_lines(x = ~1:11, y = ~seq(0,1,0.1), name = "slope of 1", yaxis = "y2") %>%
layout(
title = "Double Y Axis", yaxis=az, yaxis2 = ay,
xaxis = list(title="x")
)
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
undebug(helperimport)
undebug(import_data)
library(rDolphin)
library(rDolphin)
rDolphin_GUI()
ROI_buckets = which.min(abs(as.numeric(limits[1])-ppm)):which.min(abs(as.numeric(limits[2])-ppm))
if (ROI_buckets[1]<ROI_buckets[2]) {
cor_values=cor(rowSums(dataset[,ROI_buckets]),dataset,method=method)
} else {
cor_values=rep(0,length(ppm))
}
dim(dataset)
length(cor_values)
p
plot(cor_values)
head(cor_values)
cor_values=cor(as.matrix(rowSums(dataset[,ROI_buckets])),dataset,method=method)
Q
sdf=matrix(rnorm(12),3,4)
cor(sdf[,1],sdf)
cor(sdf[,2],sdf)
as.vector(cor(sdf[,2],sdf))
library(rDolphin)
rDolphin_GUI()
runApp('inst/app')
runApp('inst/app')
library(rDolphin)
rDolphin_GUI()
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
rDolphin_GUI()
program_parameters$spectrum_borders
params
program_parameters
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
library(rDolphin)
rDolphin_GUI()
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
repository=as.data.frame(rio::import(file.path(system.file(package = "rDolphin"),"extdata","HMDB_Repository")))
repository=as.data.frame(rio::import(file.path(system.file(package = "rDolphin"),"extdata","HMDB_Repository.csv")))
library(rDolphin)
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
library(shiny)
runGitHub("romunov/shinyapps", subdir = "breaker")
library(rDolphin)
rDolphin_GUI()
shiny::runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
library(rDolphin)
rDolphin_GUI()
runApp('inst/app')
runApp('inst/app')
reactivequantdata$method1
reactivequantdata$method1$p
!is.null(reactivequantdata$method1$plot_data)
reactivequantdata$method1$plot_data
library(rDolphin)
runApp('inst/app')
!is.null(reactivequantdata$method1$results_to_save)
runApp('inst/app')
runApp('inst/app')
colSums(signal_fitting(par, xx,multiplicities,roof_effect,observed,freq)
)
coef(nls.out)
library(rDolphin)
runApp('inst/app')
undebug(fittingloop)
runApp('inst/app')
library(rDolphin)
runApp('inst/app')
runApp('inst/app')
ts=signal_fitting(par, xx,multiplicities,roof_effect,observed,freq)
ts=signal_fitting(s0, Xdata,multiplicities,roof_effect,Ydata,program_parameters$freq)
nls.out <-
nls.lm(
par = s0,
fn = residFun,
observed = Ydata,
xx = Xdata,
multiplicities=multiplicities,
roof_effect=roof_effect,
freq=program_parameters$freq,
lower = lb,
upper = ub,
control = nls.lm.control(
factor = program_parameters$factor,
maxiter = program_parameters$nls_lm_maxiter,
ftol = program_parameters$ftol,
ptol = program_parameters$ptol
)
)
coef(nls.out)
residFun <-
function(par, observed, xx,multiplicities,roof_effect,freq)
observed - colSums(signal_fitting(par, xx,multiplicities,roof_effect,observed,freq))
ts=signal_fitting(paramprov, Xdata,multiplicities,roof_effect,Ydata,program_parameters$freq)
plot(ts[1,])
plot(ts[2,])
paramprov
cumulative_area = cumsum(colSums(ts[1:2,])) / sum(colSums(ts[1:2,]))
if (all(is.na(cumulative_area))) {
p1=1
p2=length(cumulative_area)
} else {
p1 = which(cumulative_area< 0.05)[length(which(cumulative_area< 0.05))]
p2 = which(cumulative_area > 0.95)[1]
}
p1
which(cumulative_area< 0.05)[length(which(cumulative_area< 0.05))]
residFun <-
function(par, observed, xx,multiplicities,roof_effect,freq)
observed[p1:p2] - colSums(signal_fitting(par, xx,multiplicities,roof_effect,observed,freq))[p1:p2]
nls.out <-
nls.lm(
par = s0,
fn = residFun,
observed = Ydata,
xx = Xdata,
multiplicities=multiplicities,
roof_effect=roof_effect,
freq=program_parameters$freq,
lower = lb,
upper = ub,
control = nls.lm.control(
factor = program_parameters$factor,
maxiter = program_parameters$nls_lm_maxiter,
ftol = program_parameters$ftol,
ptol = program_parameters$ptol
)
)
coef(nls.out)
reactiveROItestingdata$signpar
runApp('inst/app')
runApp('inst/app')
Xdata= as.numeric(imported_data$ppm[ROI_buckets])
Ydata = as.numeric(imported_data$dataset[spectrum_index, ROI_buckets])
program_parameters=imported_data$program_parameters
program_parameters$freq = imported_data$freq
program_parameters$ROI_buckets = ROI_buckets
program_parameters$buck_step = imported_data$buck_step
signals_to_quantify = which(ROI_profile[, 5] >0)
signals_codes = replicate(length(signals_to_quantify), NA)
signals_names = replicate(length(signals_to_quantify), NA)
j = 1
for (i in signals_to_quantify) {
k = which(imported_data$signals_names == paste(ROI_profile[i,
4],ROI_profile[i,5],sep='_'))
signals_codes[j] = imported_data$signals_codes[k]
signals_names[j] = as.character(imported_data$signals_names[k])
j = j + 1
}
# program_parameters$clean_fit = clean_fit
experiment_name = imported_data$Experiments[[spectrum_index]]
fitting_type=ROI_profile[1,3]
#Fitting of the signals
multiplicities=signals_introduce[,6]
roof_effect=signals_introduce[,7]
signals_parameters=as.vector(t(signals_introduce[,1:5]))
Xdata_2=imported_data$ppm
Ydata_2 = as.numeric(imported_data$dataset[spectrum_index, ])
program_parameters$freq=imported_data$freq
fitted_signals = signal_fitting(signals_parameters,
Xdata_2,multiplicities,roof_effect,Ydata,program_parameters$freq)
dim(signals_parameters) = c(5, length(signals_parameters)/5)
rownames(signals_parameters) = c(
'intensity',
'shift',
'half_band_width',
'gaussian',
'J_coupling'
)
program_parameters$signals_to_quantify=signals_to_quantify
#Generation of output data about the fitting and of the necessary variables for the generation ofa figure
dummy = output_generator(
signals_to_quantify,
fitted_signals,
Ydata_2,
Xdata_2,
signals_parameters,multiplicities
)
output_data=dummy$output_data
error1=dummy$error1
output_data$intensity=signals_parameters[1, signals_to_quantify]
output_data$half_band_width=signals_parameters[3, signals_to_quantify]
#Generation of the dataframe with the final output variables
results_to_save = data.frame(
shift = output_data$shift,
quantification = output_data$quantification,
signal_area_ratio = output_data$signal_area_ratio,
fitting_error = output_data$fitting_error,
intensity = output_data$intensity,
half_band_width = output_data$half_band_width
)
#Adaptation of the quantification to de-scaled Ydata
#Generation of the figure when the conditions specified in the Parameters file are accomplished
plot_data = rbind(
output_data$signals_sum,
output_data$baseline_sum,
output_data$fitted_sum,
output_data$signals
)
rownames(plot_data) = c("signals_sum",
"baseline_sum",
"fitted_sum",
as.character(paste(ROI_profile[,4],ROI_profile[,5],sep='_')),rep('additional signal',dim(plot_data)[1]-length(ROI_profile[,4])-3))
plotdata2 = data.frame(Xdata=Xdata_2,
Ydata=Ydata_2,
plot_data[3, ],
plot_data[2, ] )
plotdata3 <- melt(plotdata2, id = "Xdata")
plotdata3$variable = c(
rep('Original Spectrum', length(Ydata_2)),
rep('Generated Spectrum', length(Ydata_2)),
rep('Generated Background', length(Ydata_2))
)
# plotdata4 = data.frame(Xdata=Xdata_2, (t(plot_data[-c(1, 2, 3), , drop = F]) ))
# plotdata5 = melt(plotdata4, id = "Xdata")
colors=c('red','blue','black','brown','cyan','green','yellow')
# plotdata = data.frame(Xdata=Xdata_2, signals = plot_data[1, ] )
p=plot_ly(plotdata3,x=~Xdata,y=~value,color=~variable,type='scatter',mode='lines',fill=NULL) %>% layout(xaxis = list(range=c(Xdata[1],Xdata[length(Xdata)]),title = 'ppm'), yaxis = list(range=c(0,max(Ydata)),title = 'Intensity'))
for (i in 4:nrow(plot_data)) {
plotdata5 =  data.frame(Xdata=Xdata_2, variable=rownames(plot_data)[i] ,value=plot_data[i,])
p=p %>%add_trace(data=plotdata5,x=~Xdata,y=~value,name=~variable,type='scatter',mode='lines',fill='tozeroy',fillcolor=colors[i-3])
}
# final_output = save_output(
#   spectrum_index,
#   signals_codes,
#   results_to_save,
#   imported_data$buck_step,
#   final_output)
provisional_data=list()
provisional_data$signals_parameters=signals_parameters
provisional_data$program_parameters=program_parameters
provisional_data$p=p
# provisional_data$p2=p2
provisional_data$Xdata=Xdata
provisional_data$Ydata=Ydata
# provisional_data$final_output=final_output
provisional_data$results_to_save=results_to_save
provisional_data$error1=error1
# provisional_data$FeaturesMatrix=FeaturesMatrix
# provisional_data$fitted_signals=fitted_signals[,ROI_buckets]
provisional_data$spectrum_index=spectrum_index
provisional_data$signals_codes=signals_codes
provisional_data$signals_names=signals_names
provisional_data$fitting_type=fitting_type
provisional_data$ROI_profile=ROI_profile
provisional_data$final_output=final_output
provisional_data$plot_data=plot_data[,ROI_buckets]
ROI_buckets = which.min(abs(as.numeric(ROI_profile[1, 1])-imported_data$ppm)):which.min(abs(as.numeric(ROI_profile[1, 2])-imported_data$ppm))
Xdata= as.numeric(imported_data$ppm[ROI_buckets])
Ydata = as.numeric(imported_data$dataset[spectrum_index, ROI_buckets])
program_parameters=imported_data$program_parameters
program_parameters$freq = imported_data$freq
program_parameters$ROI_buckets = ROI_buckets
program_parameters$buck_step = imported_data$buck_step
signals_to_quantify = which(ROI_profile[, 5] >0)
signals_codes = replicate(length(signals_to_quantify), NA)
signals_names = replicate(length(signals_to_quantify), NA)
j = 1
for (i in signals_to_quantify) {
k = which(imported_data$signals_names == paste(ROI_profile[i,
4],ROI_profile[i,5],sep='_'))
signals_codes[j] = imported_data$signals_codes[k]
signals_names[j] = as.character(imported_data$signals_names[k])
j = j + 1
}
signals_to_quantify = which(ROI_profile[, 5] >0)
signals_codes = replicate(length(signals_to_quantify), NA)
signals_names = replicate(length(signals_to_quantify), NA)
j = 1
for (i in signals_to_quantify) {
k = which(imported_data$signals_names == paste(ROI_profile[i,
4],ROI_profile[i,5],sep='_'))
signals_codes[j] = imported_data$signals_codes[k]
signals_names[j] = as.character(imported_data$signals_names[k])
j = j + 1
}
runApp('inst/app')
signals_parameters=rbind(signals_parameters,multiplicities,roof_effect)
library(rDolphin)
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
paste('baseline_signal',seq(3))
library(rDolphin)
runApp('inst/app')
signals_names
paste('baseline_signal',seq(nrow(signals_parameters)-length(signals_names)),sep='_')
library(rDolphin)
runApp('inst/app')
der=matrix(NA,2,7)
all(is.na(der))
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
