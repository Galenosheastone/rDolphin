signal_area_ratio <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/signal_area_ratio.csv")[,-1])
w=data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
w[signal_area_ratio<5]=NA
w[fitting_error>0.15]=NA
ind=apply(w,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
w_clean=w[,ind<40]
shift[signal_area_ratio<5]=NA
shift[fitting_error>0.15]=NA
ind=apply(shift,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
shift_clean=shift[,ind<40]
colnames(shift_clean)=paste(colnames(w_clean),'shift',sep='_')
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
aa=aa[which(!is.na(aa$`Factor Value[smoking status]`)),]
metadata=aa$`Factor Value[smoking status]`
combined_mtbls374=as.data.frame(cbind(metadata,w_clean[as.numeric(as.matrix(aa[,1])),],shift_clean[as.numeric(as.matrix(aa[,1])),]))
# asd=apply(w_clean,2,function(x) wilcox.test(x[which(metadata[,1]=='Never Smoker')],x[which(metadata[,1]=='Smoker')])$p.value)
combined_mtbls374=as.data.frame(cbind(w_clean[as.numeric(as.matrix(aa[,1])),],shift_clean[as.numeric(as.matrix(aa[,1])),]))
metadata=factor(aa$`Factor Value[smoking status]`)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
library(readxl)
# combined_mtbls374 <- as.data.frame(read_excel("~/combined_mtbls374.xlsx"))
library(missForest)
miss=missForest(data.matrix(combined_mtbls374))$ximp
miss2=scale(miss,center=T,scale=T)
results <- rfe(miss2, metadata, sizes=seq(5,50,5), rfeControl=control)
print(results)
# list the chosen features
predictors(results)
results2 <- rfe(miss2[,1:(ncol(miss2)/2)], metadata, sizes=seq(5,ncol(miss2)/2,5), rfeControl=control)
print(results2)
print(results3)
results3 <- rfe(miss2[,(ncol(miss2)/2+1):(ncol(miss2))], metadata, sizes=seq(5,ncol(miss2)/2,5), rfeControl=control)
print(results3)
results <- rfe(miss2, metadata, sizes=seq(5,50,5), rfeControl=control)
print(results)
# list the chosen features
predictors(results)
# plot the results
results2 <- rfe(miss2[,1:(ncol(miss2)/2)], metadata, sizes=seq(5,ncol(miss2)/2,5), rfeControl=control)
print(results2)
# list the chosen features
# plot the results
results3 <- rfe(miss2[,(ncol(miss2)/2+1):(ncol(miss2))], metadata, sizes=seq(5,ncol(miss2)/2,5), rfeControl=control)
print(results3)
as.numeric(as.matrix(aa[,1]))
load("C:/Users/Usuario/Downloads/joj3.RData")
all4=t(as.data.frame(lapply(savedreactivedata$useful_data,function(x)x[[11]]$plot_data[1,])))
ind=which.max(colSums(cor(t(all4))))
spectra_lag=rep(NA,dim(all4)[1])
for (i in 1:dim(all4)[1]) {
d <-
ccf(all4[i, ],
apply(all4, 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))
all5=all4
for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]
sorted_bins=sort(all4[ind,]/sum(all4[ind,]),decreasing=T,index.return=T)
if(length(sorted_bins$x)>0) {
bins= sorted_bins$ix[1:which.min(abs(cumsum(sorted_bins$x)-0.9))]
} else {
bins=seq_along(all4[ind,])
}
ple=apply(all4[,bins],1,function(x)summary(lm(all4[ind,bins]~x))$sigma/max(all4[ind,bins]))
all=unlist(lapply(savedreactivedata$useful_data,function(x)x[[11]]$results_to_save$fitting_error))
matplot(t(all4),type='l')
load("C:/Bruker/TopSpin3.2/data/MTBLS1/MTBLS1_example.RData")
savedreactivedata$ROI_data
all4=t(as.data.frame(lapply(savedreactivedata$useful_data,function(x)x[[15]]$plot_data[1,])))
ind=which.max(colSums(cor(t(all4))))
spectra_lag=rep(NA,dim(all4)[1])
for (i in 1:dim(all4)[1]) {
d <-
ccf(all4[i, ],
apply(all4, 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))
all5=all4
for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]
sorted_bins=sort(all4[ind,]/sum(all4[ind,]),decreasing=T,index.return=T)
if(length(sorted_bins$x)>0) {
bins= sorted_bins$ix[1:which.min(abs(cumsum(sorted_bins$x)-0.9))]
} else {
bins=seq_along(all4[ind,])
}
ple=apply(all4[,bins],1,function(x)summary(lm(all4[ind,bins]~x))$sigma/max(all4[ind,bins]))
all=unlist(lapply(savedreactivedata$useful_data,function(x)x[[15]]$results_to_save$fitting_error))
matplot(t(all4),type='l')
plot(sort(ple))
lines(sort(all))
ple2=apply(all4[,bins],1,function(x)summary(lm(apply(all4[,bins],2,median)~x))$sigma/max(all4[ind,bins]))
lines(sort(ple2))
tre=cor(t(all4))
View(tre)
View(tre[ind,])
tre[ind,]
cor(tre[ind,],ple)
cor(tre[ind,],ple,method='spearman')
cor(tre[ind,],all,method='spearman')
all4=t(as.data.frame(lapply(savedreactivedata$useful_data,function(x)x[[10]]$plot_data[1,])))
ind=which.max(colSums(cor(t(all4))))
spectra_lag=rep(NA,dim(all4)[1])
for (i in 1:dim(all4)[1]) {
d <-
ccf(all4[i, ],
apply(all4, 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))
all5=all4
for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]
sorted_bins=sort(all4[ind,]/sum(all4[ind,]),decreasing=T,index.return=T)
if(length(sorted_bins$x)>0) {
bins= sorted_bins$ix[1:which.min(abs(cumsum(sorted_bins$x)-0.9))]
} else {
bins=seq_along(all4[ind,])
}
ple=apply(all4[,bins],1,function(x)summary(lm(all4[ind,bins]~x))$sigma/max(all4[ind,bins]))
all=unlist(lapply(savedreactivedata$useful_data,function(x)x[[10]]$results_to_save$fitting_error))
plot(sort(ple))
lines(sort(all))
matplot(t(all4[order(all)[1:20]]),type='l')
matplot(t(all4[order(all)[1:20],]),type='l')
matplot(t(all4[order(all)[101:120],]),type='l')
matplot(t(all4[order(all)[121:132],]),type='l')
all4=t(as.data.frame(lapply(savedreactivedata$useful_data,function(x)x[[10]]$plot_data[1,])))
matplot(t(all4),type='l')
ind=which.max(colSums(cor(t(all4))))
spectra_lag=rep(NA,dim(all4)[1])
for (i in 1:dim(all4)[1]) {
d <-
ccf(all4[i, ],
apply(all4, 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))
all5=all4
for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]
matplot(t(all4),type='l')
ple2=apply(all4[,bins],1,function(x)summary(lm(apply(all4[,bins],2,median)~x))$sigma/max(apply(all4[,bins],2,median)))
plot(sort(ple))
lines(sort(all))
lines(sort(ple2))
lapply(savedreactivedata$useful_data,function(x)x[[10]]$results_to_save$fitting_error))
lapply(savedreactivedata$useful_data,function(x)x[[10]]$results_to_save$fitting_error)
lapply(savedreactivedata$useful_data,function(x)x[[10]]$results_to_save$fitting_error)=1:132
savedreactivedata$useful_data[[1:132]][[10]]$results_to_save$fitting_error)=1:132
savedreactivedata$useful_data[[1:132]][[10]]$results_to_save$fitting_error=1:132
savedreactivedata$useful_data[1:132][[10]]$results_to_save$fitting_error=1:132
savedreactivedata$useful_data[1:132][[10]]$results_to_save$fitting_error
savedreactivedata$useful_data[3][[10]]$results_to_save$fitting_error
savedreactivedata$useful_data[[3]][[10]]$results_to_save$fitting_error
length(savedreactivedata$useful_data[[3]])
nrow(ROI_data)
nrow(savedreactivedata$ROI_data)
library(rDolphin)
library(rDolphin)
rDolphin_GUI
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
load("C:/Bruker/TopSpin3.2/data/MTBLS237/data_analysis/prova4.RData")
library(rDolphin)
library(reshape2)
library(plotly)
library(apcluster)
imported_data=savedreactivedata$imported_data
if (nrow(imported_data$dataset)>10) {
scaled_roi=scale(imported_data$dataset[ , sort(colMeans(imported_data$dataset),decreasing=T,index.return=T)$ix[1:(ncol(imported_data$dataset)/3)],drop=F])
updated_scaled_roi=scaled_roi
rm_ind=c()
stop=0
ind=seq(nrow(imported_data$dataset))
while ((!is.null(rm_ind)|stop==0)&(nrow(scaled_roi)>15)) {
stop=1
if (length(rm_ind)>0) scaled_roi=scaled_roi[-rm_ind,]
rm_ind=c()
apres <- suppressWarnings(apclusterK(negDistMat(r=2), scaled_roi, K=min(c(dim(scaled_roi)[1]-1,10)),verbose=F))
for (i in 1:length(apres@clusters)) {
if (length(apres@clusters[[i]])==1) rm_ind=c(rm_ind,apres@clusters[[i]][1])
}
ind=apres@exemplars
}
updated_scaled_roi=scaled_roi[ind,,drop=F]
spectra_lag=rep(NA,nrow(updated_scaled_roi))
dummy=apply(updated_scaled_roi, 2, function(x)  median(x,na.rm=T))
for (i in 1:nrow(updated_scaled_roi)) {
d <-ccf(updated_scaled_roi[i,],dummy,type = 'covariance',plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
visual_roi=original_roi=imported_data$dataset[ind[sort(spectra_lag,index.return=T)$ix],,drop=F]
} else {
visual_roi=original_roi=imported_data$dataset
ind=seq(nrow(imported_data$dataset))
}
# for (i in 1:nrow(original_roi))   visual_roi[i,]=original_roi[i,]+(i-1)*mean(original_roi)
plotdata = data.frame(Xdata=imported_data$ppm, signals = t(visual_roi) )
colnames(plotdata)=c('Xdata',imported_data$Experiments[ ind])
plotdata=melt(plotdata,id = "Xdata")
head(plotdata)
plot_ly(data=plotdata,x=~Xdata,y=~ value,color=~variable,type='scatter',mode='lines',colors = "Blues")%>% layout(xaxis = list(autorange = 'reversed',yaxis = list(range = range(plotdata$value),title='Intensity'))
plot_ly(data=plotdata,x=~Xdata,y=~ value,color=~variable,type='scatter',mode='lines',colors = "Blues")%>% layout(xaxis = list(autorange = 'reversed',yaxis = list(range = range(plotdata$value),title='Intensity')
plot_ly(data=plotdata,x=~Xdata,y=~ value,color=~variable,type='scatter',mode='lines',colors = "Blues")%>% layout(xaxis = list(autorange = 'reversed',title='ppm'),yaxis = list(range = range(plotdata$value),title='Intensity')
plot_ly(data=plotdata,x=~Xdata,y=~ value,color=~variable,type='scatter',mode='lines',colors = "Blues")%>% layout(xaxis = list(autorange = 'reversed',title='ppm'),yaxis = list(range = range(plotdata$value),title='Intensity'))
p_value_bucketing=as.vector(p_values(imported_data$dataset,imported_data$Metadata))
clusterplot=plot_ly(data=plotdata,x=~Xdata,y=~ value,color=~variable,type='scatter',mode='lines',colors = "Blues")
clusterplot
clusterplot%>%
add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")
dim(visual_roi)
View(visual_roi)
p=plot_ly()
for (i in seq(ncol(visual_roi))){
p=p%>%
add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ]),name=imported_data$Experiments[ i])%>%
}
p=plot_ly()
for (i in seq(ncol(visual_roi))){
p=p%>%
add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ i])%>%
}
p=plot_ly()
for (i in seq(ncol(visual_roi))){
p=p%>%
add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ i])
}
p=plot_ly()
for (i in seq(nrow(visual_roi))){
p=p%>%
add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ i])
}
p
p=plot_ly()
for (i in seq(nrow(visual_roi))){
p=p%>%
add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ ind[i]])
}
p
imported_data$Experiments
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
az = list(title = "Intensity",range = c(-1, max(plotdata$value)-1))
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
ay <- list(tickfont = list(color = "red"),overlaying = "y",side = "right",title = "p value",range = c(0,max(plotdata$value)))
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
p
seq(nrow(visual_roi))
matplot(t(visual_roi))
if (nrow(imported_data$dataset)>10) {
scaled_roi=scale(imported_data$dataset[ , sort(colMeans(imported_data$dataset),decreasing=T,index.return=T)$ix[1:(ncol(imported_data$dataset)/3)],drop=F])
updated_scaled_roi=scaled_roi
rm_ind=c()
stop=0
ind=seq(nrow(imported_data$dataset))
while ((!is.null(rm_ind)|stop==0)&(nrow(scaled_roi)>15)) {
stop=1
if (length(rm_ind)>0) scaled_roi=scaled_roi[-rm_ind,]
rm_ind=c()
apres <- suppressWarnings(apclusterK(negDistMat(r=2), scaled_roi, K=min(c(dim(scaled_roi)[1]-1,10)),verbose=F))
for (i in 1:length(apres@clusters)) {
if (length(apres@clusters[[i]])==1) rm_ind=c(rm_ind,apres@clusters[[i]][1])
}
ind=apres@exemplars
}
updated_scaled_roi=scaled_roi[ind,,drop=F]
spectra_lag=rep(NA,nrow(updated_scaled_roi))
dummy=apply(updated_scaled_roi, 2, function(x)  median(x,na.rm=T))
for (i in 1:nrow(updated_scaled_roi)) {
d <-ccf(updated_scaled_roi[i,],dummy,type = 'covariance',plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
visual_roi=original_roi=imported_data$dataset[ind[sort(spectra_lag,index.return=T)$ix],,drop=F]
} else {
visual_roi=original_roi=imported_data$dataset
ind=seq(nrow(imported_data$dataset))
}
ay <- list(tickfont = list(color = "red"),overlaying = "y",side = "right",title = "p value",range = c(0,max(plotdata$value)))
az = list(title = "Intensity",range = c(-1, max(plotdata$value)-1))
p=plot_ly()
for (i in seq(nrow(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ ind[i]])
}
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
p
p=plot_ly()
for (i in 1:9){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ ind[i]])
}
p
p=plot_ly()
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[1, ],name=imported_data$Experiments[ ind[1]])
p
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[2, ],name=imported_data$Experiments[ ind[2]])
p
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[3, ],name=imported_data$Experiments[ ind[3]])
p
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[4, ],name=imported_data$Experiments[ ind[3]])
p=plot_ly()
for (i in seq(nrow(visual_roi))){
spectrum=visual_roi[i, ]
p=p%>%add_lines(x=~imported_data$ppm,y = ~spectrum,name=imported_data$Experiments[ ind[i]])
}
p
p=plot_ly()
for (i in 1:3){
spectrum=visual_roi[i, ]
p=p%>%add_lines(x=~imported_data$ppm,y = ~spectrum,name=imported_data$Experiments[ ind[i]])
}
p
p=plot_ly()
for (i in seq(nrow(visual_roi))){
spectrum=as.numeric(visual_roi[i, ])
p=p%>%add_lines(x=~imported_data$ppm,y = ~spectrum,name=imported_data$Experiments[ ind[i]])
}
p
visual_roi=t(visual_roi)
p=plot_ly()
for (i in seq(nrow(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[,i],name=imported_data$Experiments[ ind[i]])
}
visual_roi=t(visual_roi)
p=plot_ly()
for (i in seq(ncol(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[,i],name=imported_data$Experiments[ ind[i]])
}
visual_roi=t(visual_roi)
p=plot_ly()
for (i in seq(ncol(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[,i],name=imported_data$Experiments[ ind[i]])
}
p
rm(p)
visual_roi=t(visual_roi)
p=plot_ly()
for (i in seq(ncol(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[,i],name=imported_data$Experiments[ ind[i]])
}
visual_roi=t(visual_roi)
p=plot_ly()
for (i in seq(ncol(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[,i],name=imported_data$Experiments[ ind[i]])
}
p
p=plot_ly()
for (i in seq(ncol(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~as.numeric(visual_roi[,i]),name=imported_data$Experiments[ ind[i]])
}
p
p=plot_ly()
for (jj in seq(ncol(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~as.numeric(visual_roi[,jj]))
}
p
p=plot_ly()
for (jj in seq(ncol(visual_roi))){
mm=jj
p=p%>%add_lines(x=~imported_data$ppm,y = ~as.numeric(visual_roi[,mm]))
}
p
p=plot_ly()
for (jj in seq(ncol(visual_roi))){
mm=jj
p=p%>%add_lines(x=~imported_data$ppm,y = ~as.numeric(visual_roi[,mm]),,name='Der')
}
p
p=plot_ly()
for (jj in seq(ncol(visual_roi))){
mm=jj
p=p%>%add_trace(x=~imported_data$ppm,y = ~as.numeric(visual_roi[,mm]))
}
p
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
load("C:/Bruker/TopSpin3.2/data/MTBLS237/data_analysis/prova4.RData")
imported_data=savedreactivedata$imported_data
if (nrow(imported_data$dataset)>10) {
scaled_roi=scale(imported_data$dataset[ , sort(colMeans(imported_data$dataset),decreasing=T,index.return=T)$ix[1:(ncol(imported_data$dataset)/3)],drop=F])
updated_scaled_roi=scaled_roi
rm_ind=c()
stop=0
ind=seq(nrow(imported_data$dataset))
while ((!is.null(rm_ind)|stop==0)&(nrow(scaled_roi)>15)) {
stop=1
if (length(rm_ind)>0) scaled_roi=scaled_roi[-rm_ind,]
rm_ind=c()
apres <- suppressWarnings(apclusterK(negDistMat(r=2), scaled_roi, K=min(c(dim(scaled_roi)[1]-1,10)),verbose=F))
for (i in 1:length(apres@clusters)) {
if (length(apres@clusters[[i]])==1) rm_ind=c(rm_ind,apres@clusters[[i]][1])
}
ind=apres@exemplars
}
updated_scaled_roi=scaled_roi[ind,,drop=F]
spectra_lag=rep(NA,nrow(updated_scaled_roi))
dummy=apply(updated_scaled_roi, 2, function(x)  median(x,na.rm=T))
for (i in 1:nrow(updated_scaled_roi)) {
d <-ccf(updated_scaled_roi[i,],dummy,type = 'covariance',plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
visual_roi=original_roi=imported_data$dataset[ind[sort(spectra_lag,index.return=T)$ix],,drop=F]
} else {
visual_roi=original_roi=imported_data$dataset
ind=seq(nrow(imported_data$dataset))
}
# for (i in 1:nrow(original_roi))   visual_roi[i,]=original_roi[i,]+(i-1)*mean(original_roi)
library(apcluster)
linrary(plotly)
library(plotly)
if (nrow(imported_data$dataset)>10) {
scaled_roi=scale(imported_data$dataset[ , sort(colMeans(imported_data$dataset),decreasing=T,index.return=T)$ix[1:(ncol(imported_data$dataset)/3)],drop=F])
updated_scaled_roi=scaled_roi
rm_ind=c()
stop=0
ind=seq(nrow(imported_data$dataset))
while ((!is.null(rm_ind)|stop==0)&(nrow(scaled_roi)>15)) {
stop=1
if (length(rm_ind)>0) scaled_roi=scaled_roi[-rm_ind,]
rm_ind=c()
apres <- suppressWarnings(apclusterK(negDistMat(r=2), scaled_roi, K=min(c(dim(scaled_roi)[1]-1,10)),verbose=F))
for (i in 1:length(apres@clusters)) {
if (length(apres@clusters[[i]])==1) rm_ind=c(rm_ind,apres@clusters[[i]][1])
}
ind=apres@exemplars
}
updated_scaled_roi=scaled_roi[ind,,drop=F]
spectra_lag=rep(NA,nrow(updated_scaled_roi))
dummy=apply(updated_scaled_roi, 2, function(x)  median(x,na.rm=T))
for (i in 1:nrow(updated_scaled_roi)) {
d <-ccf(updated_scaled_roi[i,],dummy,type = 'covariance',plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
visual_roi=original_roi=imported_data$dataset[ind[sort(spectra_lag,index.return=T)$ix],,drop=F]
} else {
visual_roi=original_roi=imported_data$dataset
ind=seq(nrow(imported_data$dataset))
}
# for (i in 1:nrow(original_roi))   visual_roi[i,]=original_roi[i,]+(i-1)*mean(original_roi)
library(rDolphin)
p_value_bucketing=as.vector(p_values(imported_data$dataset,imported_data$Metadata))
ay <- list(tickfont = list(color = "red"),overlaying = "y",side = "right",title = "p value",range = c(0,max(plotdata$value)))
az = list(title = "Intensity",range = c(-1, max(plotdata$value)-1))
p=plot_ly()
for (i in seq(nrow(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ ind[i]])
}
p
p=plot_ly()
for (i in 1:2){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ ind[i]])
}
p
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
ay <- list(tickfont = list(color = "red"),overlaying = "y",side = "right",title = "p value",range = c(0,max(visual_roi)))
az = list(title = "Intensity",range = c(-1, max(visual_roi)-1))
p=plot_ly()
for (i in seq(nrow(visual_roi))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~visual_roi[i, ],name=imported_data$Experiments[ ind[i]])
}
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
p
types=unique(imported_data$Metadata[,2])
mediandataset=matrix(NA,length(types),ncol(imported_data$dataset))
for (i in 1:length(types)) mediandataset[i,]=apply(imported_data$dataset[which(imported_data$Metadata[,2]==types[i]),,drop=F],2,median)
ay <- list(tickfont = list(color = "red"),overlaying = "y",side = "right",title = "p value",range = c(0,max(mediandataset)))
ay <- list(tickfont = list(color = "red"),overlaying = "y",side = "right",title = "p value",range = c(0,max(mediandataset)))
az = list(title = "Intensity",range = c(-1, max(mediandataset)-1))
p=plot_ly()
for (i in seq(nrow(mediandataset))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~mediandataset[i, ],name=imported_data$Experiments[ ind[i]])
}
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
p
ay <- list(tickfont = list(color = "red"),overlaying = "y",side = "right",title = "p value",range = c(0,max(mediandataset)))
az = list(title = "Intensity",range = c(-1, max(mediandataset)-1))
p=plot_ly()
for (i in seq(nrow(mediandataset))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~mediandataset[i, ],name=types[ ind[i]])
}
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
p
types
ay <- list(tickfont = list(color = "red"),overlaying = "y",side = "right",title = "p value",range = c(0,max(mediandataset)))
az = list(title = "Intensity",range = c(-1, max(mediandataset)-1))
p=plot_ly()
for (i in seq(nrow(mediandataset))){
p=p%>%add_lines(x=~imported_data$ppm,y = ~mediandataset[i, ],name=types[ i])
}
p=p%>%add_lines(x=~imported_data$ppm,y = ~p_value_bucketing,name='p value', yaxis = "y2")%>%
layout(xaxis=list(title='ppm',range=c(max(imported_data$ppm),min(imported_data$ppm))),yaxis=az, yaxis2 = ay)
p
