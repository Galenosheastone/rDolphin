maxiter = program_parameters$nls_lm_maxiter,
ftol = program_parameters$ftol,
ptol = program_parameters$ptol
)
)
coef(nls.out)
residFun <-
function(par, observed, xx,multiplicities,roof_effect,freq)
observed - colSums(signal_fitting(par, xx,multiplicities,roof_effect,observed,freq))
ts=signal_fitting(paramprov, Xdata,multiplicities,roof_effect,Ydata,program_parameters$freq)
plot(ts[1,])
plot(ts[2,])
paramprov
cumulative_area = cumsum(colSums(ts[1:2,])) / sum(colSums(ts[1:2,]))
if (all(is.na(cumulative_area))) {
p1=1
p2=length(cumulative_area)
} else {
p1 = which(cumulative_area< 0.05)[length(which(cumulative_area< 0.05))]
p2 = which(cumulative_area > 0.95)[1]
}
p1
which(cumulative_area< 0.05)[length(which(cumulative_area< 0.05))]
residFun <-
function(par, observed, xx,multiplicities,roof_effect,freq)
observed[p1:p2] - colSums(signal_fitting(par, xx,multiplicities,roof_effect,observed,freq))[p1:p2]
nls.out <-
nls.lm(
par = s0,
fn = residFun,
observed = Ydata,
xx = Xdata,
multiplicities=multiplicities,
roof_effect=roof_effect,
freq=program_parameters$freq,
lower = lb,
upper = ub,
control = nls.lm.control(
factor = program_parameters$factor,
maxiter = program_parameters$nls_lm_maxiter,
ftol = program_parameters$ftol,
ptol = program_parameters$ptol
)
)
coef(nls.out)
reactiveROItestingdata$signpar
runApp('inst/app')
runApp('inst/app')
Xdata= as.numeric(imported_data$ppm[ROI_buckets])
Ydata = as.numeric(imported_data$dataset[spectrum_index, ROI_buckets])
program_parameters=imported_data$program_parameters
program_parameters$freq = imported_data$freq
program_parameters$ROI_buckets = ROI_buckets
program_parameters$buck_step = imported_data$buck_step
signals_to_quantify = which(ROI_profile[, 5] >0)
signals_codes = replicate(length(signals_to_quantify), NA)
signals_names = replicate(length(signals_to_quantify), NA)
j = 1
for (i in signals_to_quantify) {
k = which(imported_data$signals_names == paste(ROI_profile[i,
4],ROI_profile[i,5],sep='_'))
signals_codes[j] = imported_data$signals_codes[k]
signals_names[j] = as.character(imported_data$signals_names[k])
j = j + 1
}
# program_parameters$clean_fit = clean_fit
experiment_name = imported_data$Experiments[[spectrum_index]]
fitting_type=ROI_profile[1,3]
#Fitting of the signals
multiplicities=signals_introduce[,6]
roof_effect=signals_introduce[,7]
signals_parameters=as.vector(t(signals_introduce[,1:5]))
Xdata_2=imported_data$ppm
Ydata_2 = as.numeric(imported_data$dataset[spectrum_index, ])
program_parameters$freq=imported_data$freq
fitted_signals = signal_fitting(signals_parameters,
Xdata_2,multiplicities,roof_effect,Ydata,program_parameters$freq)
dim(signals_parameters) = c(5, length(signals_parameters)/5)
rownames(signals_parameters) = c(
'intensity',
'shift',
'half_band_width',
'gaussian',
'J_coupling'
)
program_parameters$signals_to_quantify=signals_to_quantify
#Generation of output data about the fitting and of the necessary variables for the generation ofa figure
dummy = output_generator(
signals_to_quantify,
fitted_signals,
Ydata_2,
Xdata_2,
signals_parameters,multiplicities
)
output_data=dummy$output_data
error1=dummy$error1
output_data$intensity=signals_parameters[1, signals_to_quantify]
output_data$half_band_width=signals_parameters[3, signals_to_quantify]
#Generation of the dataframe with the final output variables
results_to_save = data.frame(
shift = output_data$shift,
quantification = output_data$quantification,
signal_area_ratio = output_data$signal_area_ratio,
fitting_error = output_data$fitting_error,
intensity = output_data$intensity,
half_band_width = output_data$half_band_width
)
#Adaptation of the quantification to de-scaled Ydata
#Generation of the figure when the conditions specified in the Parameters file are accomplished
plot_data = rbind(
output_data$signals_sum,
output_data$baseline_sum,
output_data$fitted_sum,
output_data$signals
)
rownames(plot_data) = c("signals_sum",
"baseline_sum",
"fitted_sum",
as.character(paste(ROI_profile[,4],ROI_profile[,5],sep='_')),rep('additional signal',dim(plot_data)[1]-length(ROI_profile[,4])-3))
plotdata2 = data.frame(Xdata=Xdata_2,
Ydata=Ydata_2,
plot_data[3, ],
plot_data[2, ] )
plotdata3 <- melt(plotdata2, id = "Xdata")
plotdata3$variable = c(
rep('Original Spectrum', length(Ydata_2)),
rep('Generated Spectrum', length(Ydata_2)),
rep('Generated Background', length(Ydata_2))
)
# plotdata4 = data.frame(Xdata=Xdata_2, (t(plot_data[-c(1, 2, 3), , drop = F]) ))
# plotdata5 = melt(plotdata4, id = "Xdata")
colors=c('red','blue','black','brown','cyan','green','yellow')
# plotdata = data.frame(Xdata=Xdata_2, signals = plot_data[1, ] )
p=plot_ly(plotdata3,x=~Xdata,y=~value,color=~variable,type='scatter',mode='lines',fill=NULL) %>% layout(xaxis = list(range=c(Xdata[1],Xdata[length(Xdata)]),title = 'ppm'), yaxis = list(range=c(0,max(Ydata)),title = 'Intensity'))
for (i in 4:nrow(plot_data)) {
plotdata5 =  data.frame(Xdata=Xdata_2, variable=rownames(plot_data)[i] ,value=plot_data[i,])
p=p %>%add_trace(data=plotdata5,x=~Xdata,y=~value,name=~variable,type='scatter',mode='lines',fill='tozeroy',fillcolor=colors[i-3])
}
# final_output = save_output(
#   spectrum_index,
#   signals_codes,
#   results_to_save,
#   imported_data$buck_step,
#   final_output)
provisional_data=list()
provisional_data$signals_parameters=signals_parameters
provisional_data$program_parameters=program_parameters
provisional_data$p=p
# provisional_data$p2=p2
provisional_data$Xdata=Xdata
provisional_data$Ydata=Ydata
# provisional_data$final_output=final_output
provisional_data$results_to_save=results_to_save
provisional_data$error1=error1
# provisional_data$FeaturesMatrix=FeaturesMatrix
# provisional_data$fitted_signals=fitted_signals[,ROI_buckets]
provisional_data$spectrum_index=spectrum_index
provisional_data$signals_codes=signals_codes
provisional_data$signals_names=signals_names
provisional_data$fitting_type=fitting_type
provisional_data$ROI_profile=ROI_profile
provisional_data$final_output=final_output
provisional_data$plot_data=plot_data[,ROI_buckets]
ROI_buckets = which.min(abs(as.numeric(ROI_profile[1, 1])-imported_data$ppm)):which.min(abs(as.numeric(ROI_profile[1, 2])-imported_data$ppm))
Xdata= as.numeric(imported_data$ppm[ROI_buckets])
Ydata = as.numeric(imported_data$dataset[spectrum_index, ROI_buckets])
program_parameters=imported_data$program_parameters
program_parameters$freq = imported_data$freq
program_parameters$ROI_buckets = ROI_buckets
program_parameters$buck_step = imported_data$buck_step
signals_to_quantify = which(ROI_profile[, 5] >0)
signals_codes = replicate(length(signals_to_quantify), NA)
signals_names = replicate(length(signals_to_quantify), NA)
j = 1
for (i in signals_to_quantify) {
k = which(imported_data$signals_names == paste(ROI_profile[i,
4],ROI_profile[i,5],sep='_'))
signals_codes[j] = imported_data$signals_codes[k]
signals_names[j] = as.character(imported_data$signals_names[k])
j = j + 1
}
signals_to_quantify = which(ROI_profile[, 5] >0)
signals_codes = replicate(length(signals_to_quantify), NA)
signals_names = replicate(length(signals_to_quantify), NA)
j = 1
for (i in signals_to_quantify) {
k = which(imported_data$signals_names == paste(ROI_profile[i,
4],ROI_profile[i,5],sep='_'))
signals_codes[j] = imported_data$signals_codes[k]
signals_names[j] = as.character(imported_data$signals_names[k])
j = j + 1
}
runApp('inst/app')
signals_parameters=rbind(signals_parameters,multiplicities,roof_effect)
library(rDolphin)
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
paste('baseline_signal',seq(3))
library(rDolphin)
runApp('inst/app')
signals_names
paste('baseline_signal',seq(nrow(signals_parameters)-length(signals_names)),sep='_')
library(rDolphin)
runApp('inst/app')
der=matrix(NA,2,7)
all(is.na(der))
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
set.seed(7)
# load the library
library(mlbench)
library(caret)
# load the data
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
library(readxl)
combined_mtbls374 <- as.data.frame(read_excel("~/Additional Info/combined_mtbls374.xlsx"))
library(missForest)
combined_mtbls374 <- as.data.frame(read_excel("~/combined_mtbls374.xlsx"))
library(missForest)
miss=missForest(data.matrix(combined_mtbls374[,2:112]))$ximp
miss2=scale(miss[,-1],center=T,scale=T)
results <- rfe(miss2, factor(combined_mtbls374[,2]), sizes=seq(5,50,5), rfeControl=control)
print(results)
# list the chosen features
predictors(results)
# plot the results
results2 <- rfe(miss2[,1:54], factor(combined_mtbls374[,2]), sizes=seq(5,50,5), rfeControl=control)
plot(prcomp(miss2[,1:54]))
plot(prcomp(miss2[,55:108]))
shift <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
fitting_error <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/fitting_error.csv")[,-1])
signal_area_ratio <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/signal_area_ratio.csv")[,-1])
w=data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/half_band_width.csv")[,-1])
w[signal_area_ratio<5]=NA
w[fitting_error>0.15]=NA
ind=apply(w,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
w_clean=w[,ind<40]
shift[signal_area_ratio<5]=NA
shift[fitting_error>0.15]=NA
ind=apply(shift,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
shift_clean=shift[,ind<40]
colnames(shift_clean)=paste(colnames(w_clean),'shift',sep='_')
metadata=as.data.frame(read_excel("~/combined_mtbls374.xlsx"))
combined_mtbls374=as.data.frame(cbind(metadata,w_clean,shift_clean))
library(readr)
shift <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
fitting_error <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/fitting_error.csv")[,-1])
signal_area_ratio <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/signal_area_ratio.csv")[,-1])
w=data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/half_band_width.csv")[,-1])
w[signal_area_ratio<5]=NA
w[fitting_error>0.15]=NA
ind=apply(w,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
w_clean=w[,ind<40]
shift[signal_area_ratio<5]=NA
shift[fitting_error>0.15]=NA
ind=apply(shift,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
shift_clean=shift[,ind<40]
colnames(shift_clean)=paste(colnames(w_clean),'shift',sep='_')
metadata=as.data.frame(read_excel("~/combined_mtbls374.xlsx"))
combined_mtbls374=as.data.frame(cbind(metadata,w_clean,shift_clean))
library(readr)
shift <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
fitting_error <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/fitting_error.csv")[,-1])
signal_area_ratio <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/signal_area_ratio.csv")[,-1])
w=data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
w[signal_area_ratio<5]=NA
w[fitting_error>0.15]=NA
ind=apply(w,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
w_clean=w[,ind<40]
shift[signal_area_ratio<5]=NA
shift[fitting_error>0.15]=NA
ind=apply(shift,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
shift_clean=shift[,ind<40]
colnames(shift_clean)=paste(colnames(w_clean),'shift',sep='_')
metadata=as.data.frame(read_excel("~/combined_mtbls374.xlsx"))
combined_mtbls374=as.data.frame(cbind(metadata,w_clean,shift_clean))
?fwrite
View(metadata)
aa=fread("C:\Bruker\TopSpin3.2\data\MTBLS374\s_BoEfRTP2 Serum NMR.txt")
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
library(data.table)
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
View(aa)
ab <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv"))
View(ab)
View(aa)
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")[,1]
View(aa)
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
metadata=aa$`Factor Value[smoking status]`
aa[,1]
as.vector(aa[,1])
class(aa[,1])
aa[4,1]
1:182 %in% aa[,1]
1:182 %in% as.numeric(aa[,1])
as.numeric(aa[,1])
as.numeric(as.character(aa[,1]))
as.numeric(as.matrix(aa[,1]))
as.matrix(aa[,1])
w_clean=w_clean[as.numeric(as.matrix(aa[,1])),]
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
aa=aa[which(is.na(aa$`Factor Value[smoking status]`)),]
library(readr)
library(data.table)
shift <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
fitting_error <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/fitting_error.csv")[,-1])
signal_area_ratio <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/signal_area_ratio.csv")[,-1])
w=data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
w[signal_area_ratio<5]=NA
w[fitting_error>0.15]=NA
ind=apply(w,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
w_clean=w[,ind<40]
shift[signal_area_ratio<5]=NA
shift[fitting_error>0.15]=NA
ind=apply(shift,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
shift_clean=shift[,ind<40]
colnames(shift_clean)=paste(colnames(w_clean),'shift',sep='_')
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
aa=aa[which(!is.na(aa$`Factor Value[smoking status]`)),]
metadata=aa$`Factor Value[smoking status]`
w_clean=w_clean[as.numeric(as.matrix(aa[,1])),]
combined_mtbls374=as.data.frame(cbind(metadata,w_clean[as.numeric(as.matrix(aa[,1])),],shift_clean[as.numeric(as.matrix(aa[,1])),]))
library(readr)
library(data.table)
shift <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
fitting_error <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/fitting_error.csv")[,-1])
signal_area_ratio <- data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/signal_area_ratio.csv")[,-1])
w=data.matrix(read_csv("C:/Bruker/TopSpin3.2/data/MTBLS374/data_analysis/output_info/shift.csv")[,-1])
w[signal_area_ratio<5]=NA
w[fitting_error>0.15]=NA
ind=apply(w,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
w_clean=w[,ind<40]
shift[signal_area_ratio<5]=NA
shift[fitting_error>0.15]=NA
ind=apply(shift,2,function(x)length(which(is.na(x))))
# shift_clean=shift[,ind<64]
shift_clean=shift[,ind<40]
colnames(shift_clean)=paste(colnames(w_clean),'shift',sep='_')
aa=fread("C:/Bruker/TopSpin3.2/data/MTBLS374/s_BoEfRTP2 Serum NMR.txt")
aa=aa[which(!is.na(aa$`Factor Value[smoking status]`)),]
metadata=aa$`Factor Value[smoking status]`
combined_mtbls374=as.data.frame(cbind(metadata,w_clean[as.numeric(as.matrix(aa[,1])),],shift_clean[as.numeric(as.matrix(aa[,1])),]))
# asd=apply(w_clean,2,function(x) wilcox.test(x[which(metadata[,1]=='Never Smoker')],x[which(metadata[,1]=='Smoker')])$p.value)
combined_mtbls374=as.data.frame(cbind(w_clean[as.numeric(as.matrix(aa[,1])),],shift_clean[as.numeric(as.matrix(aa[,1])),]))
metadata=factor(aa$`Factor Value[smoking status]`)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
library(readxl)
# combined_mtbls374 <- as.data.frame(read_excel("~/combined_mtbls374.xlsx"))
library(missForest)
miss=missForest(data.matrix(combined_mtbls374))$ximp
miss2=scale(miss,center=T,scale=T)
results <- rfe(miss2, metadata, sizes=seq(5,50,5), rfeControl=control)
print(results)
# list the chosen features
predictors(results)
results2 <- rfe(miss2[,1:(ncol(miss2)/2)], metadata, sizes=seq(5,ncol(miss2)/2,5), rfeControl=control)
print(results2)
print(results3)
results3 <- rfe(miss2[,(ncol(miss2)/2+1):(ncol(miss2))], metadata, sizes=seq(5,ncol(miss2)/2,5), rfeControl=control)
print(results3)
results <- rfe(miss2, metadata, sizes=seq(5,50,5), rfeControl=control)
print(results)
# list the chosen features
predictors(results)
# plot the results
results2 <- rfe(miss2[,1:(ncol(miss2)/2)], metadata, sizes=seq(5,ncol(miss2)/2,5), rfeControl=control)
print(results2)
# list the chosen features
# plot the results
results3 <- rfe(miss2[,(ncol(miss2)/2+1):(ncol(miss2))], metadata, sizes=seq(5,ncol(miss2)/2,5), rfeControl=control)
print(results3)
as.numeric(as.matrix(aa[,1]))
load("C:/Users/Usuario/Downloads/joj3.RData")
all4=t(as.data.frame(lapply(savedreactivedata$useful_data,function(x)x[[11]]$plot_data[1,])))
ind=which.max(colSums(cor(t(all4))))
spectra_lag=rep(NA,dim(all4)[1])
for (i in 1:dim(all4)[1]) {
d <-
ccf(all4[i, ],
apply(all4, 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))
all5=all4
for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]
sorted_bins=sort(all4[ind,]/sum(all4[ind,]),decreasing=T,index.return=T)
if(length(sorted_bins$x)>0) {
bins= sorted_bins$ix[1:which.min(abs(cumsum(sorted_bins$x)-0.9))]
} else {
bins=seq_along(all4[ind,])
}
ple=apply(all4[,bins],1,function(x)summary(lm(all4[ind,bins]~x))$sigma/max(all4[ind,bins]))
all=unlist(lapply(savedreactivedata$useful_data,function(x)x[[11]]$results_to_save$fitting_error))
matplot(t(all4),type='l')
load("C:/Bruker/TopSpin3.2/data/MTBLS1/MTBLS1_example.RData")
savedreactivedata$ROI_data
all4=t(as.data.frame(lapply(savedreactivedata$useful_data,function(x)x[[15]]$plot_data[1,])))
ind=which.max(colSums(cor(t(all4))))
spectra_lag=rep(NA,dim(all4)[1])
for (i in 1:dim(all4)[1]) {
d <-
ccf(all4[i, ],
apply(all4, 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))
all5=all4
for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]
sorted_bins=sort(all4[ind,]/sum(all4[ind,]),decreasing=T,index.return=T)
if(length(sorted_bins$x)>0) {
bins= sorted_bins$ix[1:which.min(abs(cumsum(sorted_bins$x)-0.9))]
} else {
bins=seq_along(all4[ind,])
}
ple=apply(all4[,bins],1,function(x)summary(lm(all4[ind,bins]~x))$sigma/max(all4[ind,bins]))
all=unlist(lapply(savedreactivedata$useful_data,function(x)x[[15]]$results_to_save$fitting_error))
matplot(t(all4),type='l')
plot(sort(ple))
lines(sort(all))
ple2=apply(all4[,bins],1,function(x)summary(lm(apply(all4[,bins],2,median)~x))$sigma/max(all4[ind,bins]))
lines(sort(ple2))
tre=cor(t(all4))
View(tre)
View(tre[ind,])
tre[ind,]
cor(tre[ind,],ple)
cor(tre[ind,],ple,method='spearman')
cor(tre[ind,],all,method='spearman')
all4=t(as.data.frame(lapply(savedreactivedata$useful_data,function(x)x[[10]]$plot_data[1,])))
ind=which.max(colSums(cor(t(all4))))
spectra_lag=rep(NA,dim(all4)[1])
for (i in 1:dim(all4)[1]) {
d <-
ccf(all4[i, ],
apply(all4, 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))
all5=all4
for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]
sorted_bins=sort(all4[ind,]/sum(all4[ind,]),decreasing=T,index.return=T)
if(length(sorted_bins$x)>0) {
bins= sorted_bins$ix[1:which.min(abs(cumsum(sorted_bins$x)-0.9))]
} else {
bins=seq_along(all4[ind,])
}
ple=apply(all4[,bins],1,function(x)summary(lm(all4[ind,bins]~x))$sigma/max(all4[ind,bins]))
all=unlist(lapply(savedreactivedata$useful_data,function(x)x[[10]]$results_to_save$fitting_error))
plot(sort(ple))
lines(sort(all))
matplot(t(all4[order(all)[1:20]]),type='l')
matplot(t(all4[order(all)[1:20],]),type='l')
matplot(t(all4[order(all)[101:120],]),type='l')
matplot(t(all4[order(all)[121:132],]),type='l')
all4=t(as.data.frame(lapply(savedreactivedata$useful_data,function(x)x[[10]]$plot_data[1,])))
matplot(t(all4),type='l')
ind=which.max(colSums(cor(t(all4))))
spectra_lag=rep(NA,dim(all4)[1])
for (i in 1:dim(all4)[1]) {
d <-
ccf(all4[i, ],
apply(all4, 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(ncol(all4)-max(abs(spectra_lag)))
all5=all4
for (i in 1:dim(all4)[1])   all4[i,so-spectra_lag[i]]=all4[i,so]
matplot(t(all4),type='l')
ple2=apply(all4[,bins],1,function(x)summary(lm(apply(all4[,bins],2,median)~x))$sigma/max(apply(all4[,bins],2,median)))
plot(sort(ple))
lines(sort(all))
lines(sort(ple2))
lapply(savedreactivedata$useful_data,function(x)x[[10]]$results_to_save$fitting_error))
lapply(savedreactivedata$useful_data,function(x)x[[10]]$results_to_save$fitting_error)
lapply(savedreactivedata$useful_data,function(x)x[[10]]$results_to_save$fitting_error)=1:132
savedreactivedata$useful_data[[1:132]][[10]]$results_to_save$fitting_error)=1:132
savedreactivedata$useful_data[[1:132]][[10]]$results_to_save$fitting_error=1:132
savedreactivedata$useful_data[1:132][[10]]$results_to_save$fitting_error=1:132
savedreactivedata$useful_data[1:132][[10]]$results_to_save$fitting_error
savedreactivedata$useful_data[3][[10]]$results_to_save$fitting_error
savedreactivedata$useful_data[[3]][[10]]$results_to_save$fitting_error
length(savedreactivedata$useful_data[[3]])
nrow(ROI_data)
nrow(savedreactivedata$ROI_data)
library(rDolphin)
library(rDolphin)
rDolphin_GUI
rDolphin_GUI()
library(rDolphin)
rDolphin_GUI()
